// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/codefile"
	"github.com/safedep/code/ent/usageevidence"
)

// CodeFileCreate is the builder for creating a CodeFile entity.
type CodeFileCreate struct {
	config
	mutation *CodeFileMutation
	hooks    []Hook
}

// SetFilePath sets the "FilePath" field.
func (cfc *CodeFileCreate) SetFilePath(s string) *CodeFileCreate {
	cfc.mutation.SetFilePath(s)
	return cfc
}

// AddUsageEvidenceIDs adds the "usage_evidences" edge to the UsageEvidence entity by IDs.
func (cfc *CodeFileCreate) AddUsageEvidenceIDs(ids ...int) *CodeFileCreate {
	cfc.mutation.AddUsageEvidenceIDs(ids...)
	return cfc
}

// AddUsageEvidences adds the "usage_evidences" edges to the UsageEvidence entity.
func (cfc *CodeFileCreate) AddUsageEvidences(u ...*UsageEvidence) *CodeFileCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfc.AddUsageEvidenceIDs(ids...)
}

// Mutation returns the CodeFileMutation object of the builder.
func (cfc *CodeFileCreate) Mutation() *CodeFileMutation {
	return cfc.mutation
}

// Save creates the CodeFile in the database.
func (cfc *CodeFileCreate) Save(ctx context.Context) (*CodeFile, error) {
	return withHooks(ctx, cfc.sqlSave, cfc.mutation, cfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CodeFileCreate) SaveX(ctx context.Context) *CodeFile {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CodeFileCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CodeFileCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CodeFileCreate) check() error {
	if _, ok := cfc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "FilePath", err: errors.New(`ent: missing required field "CodeFile.FilePath"`)}
	}
	return nil
}

func (cfc *CodeFileCreate) sqlSave(ctx context.Context) (*CodeFile, error) {
	if err := cfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cfc.mutation.id = &_node.ID
	cfc.mutation.done = true
	return _node, nil
}

func (cfc *CodeFileCreate) createSpec() (*CodeFile, *sqlgraph.CreateSpec) {
	var (
		_node = &CodeFile{config: cfc.config}
		_spec = sqlgraph.NewCreateSpec(codefile.Table, sqlgraph.NewFieldSpec(codefile.FieldID, field.TypeInt))
	)
	if value, ok := cfc.mutation.FilePath(); ok {
		_spec.SetField(codefile.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if nodes := cfc.mutation.UsageEvidencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   codefile.UsageEvidencesTable,
			Columns: []string{codefile.UsageEvidencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usageevidence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CodeFileCreateBulk is the builder for creating many CodeFile entities in bulk.
type CodeFileCreateBulk struct {
	config
	err      error
	builders []*CodeFileCreate
}

// Save creates the CodeFile entities in the database.
func (cfcb *CodeFileCreateBulk) Save(ctx context.Context) ([]*CodeFile, error) {
	if cfcb.err != nil {
		return nil, cfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CodeFile, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CodeFileCreateBulk) SaveX(ctx context.Context) []*CodeFile {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CodeFileCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CodeFileCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
