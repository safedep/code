// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/callgraphnode"
)

// CallgraphNodeCreate is the builder for creating a CallgraphNode entity.
type CallgraphNodeCreate struct {
	config
	mutation *CallgraphNodeMutation
	hooks    []Hook
}

// SetNamespace sets the "namespace" field.
func (cnc *CallgraphNodeCreate) SetNamespace(s string) *CallgraphNodeCreate {
	cnc.mutation.SetNamespace(s)
	return cnc
}

// AddCalledByIDs adds the "called_by" edge to the CallgraphNode entity by IDs.
func (cnc *CallgraphNodeCreate) AddCalledByIDs(ids ...int) *CallgraphNodeCreate {
	cnc.mutation.AddCalledByIDs(ids...)
	return cnc
}

// AddCalledBy adds the "called_by" edges to the CallgraphNode entity.
func (cnc *CallgraphNodeCreate) AddCalledBy(c ...*CallgraphNode) *CallgraphNodeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnc.AddCalledByIDs(ids...)
}

// AddCallsToIDs adds the "calls_to" edge to the CallgraphNode entity by IDs.
func (cnc *CallgraphNodeCreate) AddCallsToIDs(ids ...int) *CallgraphNodeCreate {
	cnc.mutation.AddCallsToIDs(ids...)
	return cnc
}

// AddCallsTo adds the "calls_to" edges to the CallgraphNode entity.
func (cnc *CallgraphNodeCreate) AddCallsTo(c ...*CallgraphNode) *CallgraphNodeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnc.AddCallsToIDs(ids...)
}

// Mutation returns the CallgraphNodeMutation object of the builder.
func (cnc *CallgraphNodeCreate) Mutation() *CallgraphNodeMutation {
	return cnc.mutation
}

// Save creates the CallgraphNode in the database.
func (cnc *CallgraphNodeCreate) Save(ctx context.Context) (*CallgraphNode, error) {
	return withHooks(ctx, cnc.sqlSave, cnc.mutation, cnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cnc *CallgraphNodeCreate) SaveX(ctx context.Context) *CallgraphNode {
	v, err := cnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnc *CallgraphNodeCreate) Exec(ctx context.Context) error {
	_, err := cnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnc *CallgraphNodeCreate) ExecX(ctx context.Context) {
	if err := cnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnc *CallgraphNodeCreate) check() error {
	if _, ok := cnc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "CallgraphNode.namespace"`)}
	}
	return nil
}

func (cnc *CallgraphNodeCreate) sqlSave(ctx context.Context) (*CallgraphNode, error) {
	if err := cnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cnc.mutation.id = &_node.ID
	cnc.mutation.done = true
	return _node, nil
}

func (cnc *CallgraphNodeCreate) createSpec() (*CallgraphNode, *sqlgraph.CreateSpec) {
	var (
		_node = &CallgraphNode{config: cnc.config}
		_spec = sqlgraph.NewCreateSpec(callgraphnode.Table, sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt))
	)
	if value, ok := cnc.mutation.Namespace(); ok {
		_spec.SetField(callgraphnode.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if nodes := cnc.mutation.CalledByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cnc.mutation.CallsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CallgraphNodeCreateBulk is the builder for creating many CallgraphNode entities in bulk.
type CallgraphNodeCreateBulk struct {
	config
	err      error
	builders []*CallgraphNodeCreate
}

// Save creates the CallgraphNode entities in the database.
func (cncb *CallgraphNodeCreateBulk) Save(ctx context.Context) ([]*CallgraphNode, error) {
	if cncb.err != nil {
		return nil, cncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cncb.builders))
	nodes := make([]*CallgraphNode, len(cncb.builders))
	mutators := make([]Mutator, len(cncb.builders))
	for i := range cncb.builders {
		func(i int, root context.Context) {
			builder := cncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CallgraphNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cncb *CallgraphNodeCreateBulk) SaveX(ctx context.Context) []*CallgraphNode {
	v, err := cncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cncb *CallgraphNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := cncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncb *CallgraphNodeCreateBulk) ExecX(ctx context.Context) {
	if err := cncb.Exec(ctx); err != nil {
		panic(err)
	}
}
