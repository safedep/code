// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/ent/callgraphnode"
	"github.com/safedep/code/ent/codefile"
	"github.com/safedep/code/ent/predicate"
	"github.com/safedep/code/ent/usageevidence"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCallgraphNode = "CallgraphNode"
	TypeCodeFile      = "CodeFile"
	TypeUsageEvidence = "UsageEvidence"
)

// CallgraphNodeMutation represents an operation that mutates the CallgraphNode nodes in the graph.
type CallgraphNodeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	namespace        *string
	clearedFields    map[string]struct{}
	called_by        map[int]struct{}
	removedcalled_by map[int]struct{}
	clearedcalled_by bool
	calls_to         map[int]struct{}
	removedcalls_to  map[int]struct{}
	clearedcalls_to  bool
	done             bool
	oldValue         func(context.Context) (*CallgraphNode, error)
	predicates       []predicate.CallgraphNode
}

var _ ent.Mutation = (*CallgraphNodeMutation)(nil)

// callgraphnodeOption allows management of the mutation configuration using functional options.
type callgraphnodeOption func(*CallgraphNodeMutation)

// newCallgraphNodeMutation creates new mutation for the CallgraphNode entity.
func newCallgraphNodeMutation(c config, op Op, opts ...callgraphnodeOption) *CallgraphNodeMutation {
	m := &CallgraphNodeMutation{
		config:        c,
		op:            op,
		typ:           TypeCallgraphNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCallgraphNodeID sets the ID field of the mutation.
func withCallgraphNodeID(id int) callgraphnodeOption {
	return func(m *CallgraphNodeMutation) {
		var (
			err   error
			once  sync.Once
			value *CallgraphNode
		)
		m.oldValue = func(ctx context.Context) (*CallgraphNode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CallgraphNode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCallgraphNode sets the old CallgraphNode of the mutation.
func withCallgraphNode(node *CallgraphNode) callgraphnodeOption {
	return func(m *CallgraphNodeMutation) {
		m.oldValue = func(context.Context) (*CallgraphNode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CallgraphNodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CallgraphNodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CallgraphNodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CallgraphNodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CallgraphNode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNamespace sets the "namespace" field.
func (m *CallgraphNodeMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *CallgraphNodeMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the CallgraphNode entity.
// If the CallgraphNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallgraphNodeMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *CallgraphNodeMutation) ResetNamespace() {
	m.namespace = nil
}

// AddCalledByIDs adds the "called_by" edge to the CallgraphNode entity by ids.
func (m *CallgraphNodeMutation) AddCalledByIDs(ids ...int) {
	if m.called_by == nil {
		m.called_by = make(map[int]struct{})
	}
	for i := range ids {
		m.called_by[ids[i]] = struct{}{}
	}
}

// ClearCalledBy clears the "called_by" edge to the CallgraphNode entity.
func (m *CallgraphNodeMutation) ClearCalledBy() {
	m.clearedcalled_by = true
}

// CalledByCleared reports if the "called_by" edge to the CallgraphNode entity was cleared.
func (m *CallgraphNodeMutation) CalledByCleared() bool {
	return m.clearedcalled_by
}

// RemoveCalledByIDs removes the "called_by" edge to the CallgraphNode entity by IDs.
func (m *CallgraphNodeMutation) RemoveCalledByIDs(ids ...int) {
	if m.removedcalled_by == nil {
		m.removedcalled_by = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.called_by, ids[i])
		m.removedcalled_by[ids[i]] = struct{}{}
	}
}

// RemovedCalledBy returns the removed IDs of the "called_by" edge to the CallgraphNode entity.
func (m *CallgraphNodeMutation) RemovedCalledByIDs() (ids []int) {
	for id := range m.removedcalled_by {
		ids = append(ids, id)
	}
	return
}

// CalledByIDs returns the "called_by" edge IDs in the mutation.
func (m *CallgraphNodeMutation) CalledByIDs() (ids []int) {
	for id := range m.called_by {
		ids = append(ids, id)
	}
	return
}

// ResetCalledBy resets all changes to the "called_by" edge.
func (m *CallgraphNodeMutation) ResetCalledBy() {
	m.called_by = nil
	m.clearedcalled_by = false
	m.removedcalled_by = nil
}

// AddCallsToIDs adds the "calls_to" edge to the CallgraphNode entity by ids.
func (m *CallgraphNodeMutation) AddCallsToIDs(ids ...int) {
	if m.calls_to == nil {
		m.calls_to = make(map[int]struct{})
	}
	for i := range ids {
		m.calls_to[ids[i]] = struct{}{}
	}
}

// ClearCallsTo clears the "calls_to" edge to the CallgraphNode entity.
func (m *CallgraphNodeMutation) ClearCallsTo() {
	m.clearedcalls_to = true
}

// CallsToCleared reports if the "calls_to" edge to the CallgraphNode entity was cleared.
func (m *CallgraphNodeMutation) CallsToCleared() bool {
	return m.clearedcalls_to
}

// RemoveCallsToIDs removes the "calls_to" edge to the CallgraphNode entity by IDs.
func (m *CallgraphNodeMutation) RemoveCallsToIDs(ids ...int) {
	if m.removedcalls_to == nil {
		m.removedcalls_to = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.calls_to, ids[i])
		m.removedcalls_to[ids[i]] = struct{}{}
	}
}

// RemovedCallsTo returns the removed IDs of the "calls_to" edge to the CallgraphNode entity.
func (m *CallgraphNodeMutation) RemovedCallsToIDs() (ids []int) {
	for id := range m.removedcalls_to {
		ids = append(ids, id)
	}
	return
}

// CallsToIDs returns the "calls_to" edge IDs in the mutation.
func (m *CallgraphNodeMutation) CallsToIDs() (ids []int) {
	for id := range m.calls_to {
		ids = append(ids, id)
	}
	return
}

// ResetCallsTo resets all changes to the "calls_to" edge.
func (m *CallgraphNodeMutation) ResetCallsTo() {
	m.calls_to = nil
	m.clearedcalls_to = false
	m.removedcalls_to = nil
}

// Where appends a list predicates to the CallgraphNodeMutation builder.
func (m *CallgraphNodeMutation) Where(ps ...predicate.CallgraphNode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CallgraphNodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CallgraphNodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CallgraphNode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CallgraphNodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CallgraphNodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CallgraphNode).
func (m *CallgraphNodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CallgraphNodeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.namespace != nil {
		fields = append(fields, callgraphnode.FieldNamespace)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CallgraphNodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case callgraphnode.FieldNamespace:
		return m.Namespace()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CallgraphNodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case callgraphnode.FieldNamespace:
		return m.OldNamespace(ctx)
	}
	return nil, fmt.Errorf("unknown CallgraphNode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallgraphNodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case callgraphnode.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	}
	return fmt.Errorf("unknown CallgraphNode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CallgraphNodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CallgraphNodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallgraphNodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CallgraphNode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CallgraphNodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CallgraphNodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CallgraphNodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CallgraphNode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CallgraphNodeMutation) ResetField(name string) error {
	switch name {
	case callgraphnode.FieldNamespace:
		m.ResetNamespace()
		return nil
	}
	return fmt.Errorf("unknown CallgraphNode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CallgraphNodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.called_by != nil {
		edges = append(edges, callgraphnode.EdgeCalledBy)
	}
	if m.calls_to != nil {
		edges = append(edges, callgraphnode.EdgeCallsTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CallgraphNodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case callgraphnode.EdgeCalledBy:
		ids := make([]ent.Value, 0, len(m.called_by))
		for id := range m.called_by {
			ids = append(ids, id)
		}
		return ids
	case callgraphnode.EdgeCallsTo:
		ids := make([]ent.Value, 0, len(m.calls_to))
		for id := range m.calls_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CallgraphNodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcalled_by != nil {
		edges = append(edges, callgraphnode.EdgeCalledBy)
	}
	if m.removedcalls_to != nil {
		edges = append(edges, callgraphnode.EdgeCallsTo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CallgraphNodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case callgraphnode.EdgeCalledBy:
		ids := make([]ent.Value, 0, len(m.removedcalled_by))
		for id := range m.removedcalled_by {
			ids = append(ids, id)
		}
		return ids
	case callgraphnode.EdgeCallsTo:
		ids := make([]ent.Value, 0, len(m.removedcalls_to))
		for id := range m.removedcalls_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CallgraphNodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcalled_by {
		edges = append(edges, callgraphnode.EdgeCalledBy)
	}
	if m.clearedcalls_to {
		edges = append(edges, callgraphnode.EdgeCallsTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CallgraphNodeMutation) EdgeCleared(name string) bool {
	switch name {
	case callgraphnode.EdgeCalledBy:
		return m.clearedcalled_by
	case callgraphnode.EdgeCallsTo:
		return m.clearedcalls_to
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CallgraphNodeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CallgraphNode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CallgraphNodeMutation) ResetEdge(name string) error {
	switch name {
	case callgraphnode.EdgeCalledBy:
		m.ResetCalledBy()
		return nil
	case callgraphnode.EdgeCallsTo:
		m.ResetCallsTo()
		return nil
	}
	return fmt.Errorf("unknown CallgraphNode edge %s", name)
}

// CodeFileMutation represents an operation that mutates the CodeFile nodes in the graph.
type CodeFileMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_FilePath              *string
	clearedFields          map[string]struct{}
	usage_evidences        map[int]struct{}
	removedusage_evidences map[int]struct{}
	clearedusage_evidences bool
	done                   bool
	oldValue               func(context.Context) (*CodeFile, error)
	predicates             []predicate.CodeFile
}

var _ ent.Mutation = (*CodeFileMutation)(nil)

// codefileOption allows management of the mutation configuration using functional options.
type codefileOption func(*CodeFileMutation)

// newCodeFileMutation creates new mutation for the CodeFile entity.
func newCodeFileMutation(c config, op Op, opts ...codefileOption) *CodeFileMutation {
	m := &CodeFileMutation{
		config:        c,
		op:            op,
		typ:           TypeCodeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodeFileID sets the ID field of the mutation.
func withCodeFileID(id int) codefileOption {
	return func(m *CodeFileMutation) {
		var (
			err   error
			once  sync.Once
			value *CodeFile
		)
		m.oldValue = func(ctx context.Context) (*CodeFile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CodeFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCodeFile sets the old CodeFile of the mutation.
func withCodeFile(node *CodeFile) codefileOption {
	return func(m *CodeFileMutation) {
		m.oldValue = func(context.Context) (*CodeFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodeFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodeFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodeFileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodeFileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CodeFile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFilePath sets the "FilePath" field.
func (m *CodeFileMutation) SetFilePath(s string) {
	m._FilePath = &s
}

// FilePath returns the value of the "FilePath" field in the mutation.
func (m *CodeFileMutation) FilePath() (r string, exists bool) {
	v := m._FilePath
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "FilePath" field's value of the CodeFile entity.
// If the CodeFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeFileMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "FilePath" field.
func (m *CodeFileMutation) ResetFilePath() {
	m._FilePath = nil
}

// AddUsageEvidenceIDs adds the "usage_evidences" edge to the UsageEvidence entity by ids.
func (m *CodeFileMutation) AddUsageEvidenceIDs(ids ...int) {
	if m.usage_evidences == nil {
		m.usage_evidences = make(map[int]struct{})
	}
	for i := range ids {
		m.usage_evidences[ids[i]] = struct{}{}
	}
}

// ClearUsageEvidences clears the "usage_evidences" edge to the UsageEvidence entity.
func (m *CodeFileMutation) ClearUsageEvidences() {
	m.clearedusage_evidences = true
}

// UsageEvidencesCleared reports if the "usage_evidences" edge to the UsageEvidence entity was cleared.
func (m *CodeFileMutation) UsageEvidencesCleared() bool {
	return m.clearedusage_evidences
}

// RemoveUsageEvidenceIDs removes the "usage_evidences" edge to the UsageEvidence entity by IDs.
func (m *CodeFileMutation) RemoveUsageEvidenceIDs(ids ...int) {
	if m.removedusage_evidences == nil {
		m.removedusage_evidences = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.usage_evidences, ids[i])
		m.removedusage_evidences[ids[i]] = struct{}{}
	}
}

// RemovedUsageEvidences returns the removed IDs of the "usage_evidences" edge to the UsageEvidence entity.
func (m *CodeFileMutation) RemovedUsageEvidencesIDs() (ids []int) {
	for id := range m.removedusage_evidences {
		ids = append(ids, id)
	}
	return
}

// UsageEvidencesIDs returns the "usage_evidences" edge IDs in the mutation.
func (m *CodeFileMutation) UsageEvidencesIDs() (ids []int) {
	for id := range m.usage_evidences {
		ids = append(ids, id)
	}
	return
}

// ResetUsageEvidences resets all changes to the "usage_evidences" edge.
func (m *CodeFileMutation) ResetUsageEvidences() {
	m.usage_evidences = nil
	m.clearedusage_evidences = false
	m.removedusage_evidences = nil
}

// Where appends a list predicates to the CodeFileMutation builder.
func (m *CodeFileMutation) Where(ps ...predicate.CodeFile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodeFileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodeFileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CodeFile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodeFileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodeFileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CodeFile).
func (m *CodeFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodeFileMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._FilePath != nil {
		fields = append(fields, codefile.FieldFilePath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodeFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case codefile.FieldFilePath:
		return m.FilePath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodeFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case codefile.FieldFilePath:
		return m.OldFilePath(ctx)
	}
	return nil, fmt.Errorf("unknown CodeFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case codefile.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	}
	return fmt.Errorf("unknown CodeFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodeFileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodeFileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CodeFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodeFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodeFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodeFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CodeFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodeFileMutation) ResetField(name string) error {
	switch name {
	case codefile.FieldFilePath:
		m.ResetFilePath()
		return nil
	}
	return fmt.Errorf("unknown CodeFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodeFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.usage_evidences != nil {
		edges = append(edges, codefile.EdgeUsageEvidences)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodeFileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case codefile.EdgeUsageEvidences:
		ids := make([]ent.Value, 0, len(m.usage_evidences))
		for id := range m.usage_evidences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodeFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusage_evidences != nil {
		edges = append(edges, codefile.EdgeUsageEvidences)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodeFileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case codefile.EdgeUsageEvidences:
		ids := make([]ent.Value, 0, len(m.removedusage_evidences))
		for id := range m.removedusage_evidences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodeFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusage_evidences {
		edges = append(edges, codefile.EdgeUsageEvidences)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodeFileMutation) EdgeCleared(name string) bool {
	switch name {
	case codefile.EdgeUsageEvidences:
		return m.clearedusage_evidences
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodeFileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CodeFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodeFileMutation) ResetEdge(name string) error {
	switch name {
	case codefile.EdgeUsageEvidences:
		m.ResetUsageEvidences()
		return nil
	}
	return fmt.Errorf("unknown CodeFile edge %s", name)
}

// UsageEvidenceMutation represents an operation that mutates the UsageEvidence nodes in the graph.
type UsageEvidenceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_PackageHint     *string
	_ModuleName      *string
	_ModuleItem      *string
	_ModuleAlias     *string
	_IsWildCardUsage *bool
	_Identifier      *string
	_UsageFilePath   *string
	_Line            *uint
	add_Line         *int
	clearedFields    map[string]struct{}
	code_file        *int
	clearedcode_file bool
	done             bool
	oldValue         func(context.Context) (*UsageEvidence, error)
	predicates       []predicate.UsageEvidence
}

var _ ent.Mutation = (*UsageEvidenceMutation)(nil)

// usageevidenceOption allows management of the mutation configuration using functional options.
type usageevidenceOption func(*UsageEvidenceMutation)

// newUsageEvidenceMutation creates new mutation for the UsageEvidence entity.
func newUsageEvidenceMutation(c config, op Op, opts ...usageevidenceOption) *UsageEvidenceMutation {
	m := &UsageEvidenceMutation{
		config:        c,
		op:            op,
		typ:           TypeUsageEvidence,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsageEvidenceID sets the ID field of the mutation.
func withUsageEvidenceID(id int) usageevidenceOption {
	return func(m *UsageEvidenceMutation) {
		var (
			err   error
			once  sync.Once
			value *UsageEvidence
		)
		m.oldValue = func(ctx context.Context) (*UsageEvidence, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UsageEvidence.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsageEvidence sets the old UsageEvidence of the mutation.
func withUsageEvidence(node *UsageEvidence) usageevidenceOption {
	return func(m *UsageEvidenceMutation) {
		m.oldValue = func(context.Context) (*UsageEvidence, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsageEvidenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsageEvidenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsageEvidenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsageEvidenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UsageEvidence.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPackageHint sets the "PackageHint" field.
func (m *UsageEvidenceMutation) SetPackageHint(s string) {
	m._PackageHint = &s
}

// PackageHint returns the value of the "PackageHint" field in the mutation.
func (m *UsageEvidenceMutation) PackageHint() (r string, exists bool) {
	v := m._PackageHint
	if v == nil {
		return
	}
	return *v, true
}

// OldPackageHint returns the old "PackageHint" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldPackageHint(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPackageHint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPackageHint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackageHint: %w", err)
	}
	return oldValue.PackageHint, nil
}

// ClearPackageHint clears the value of the "PackageHint" field.
func (m *UsageEvidenceMutation) ClearPackageHint() {
	m._PackageHint = nil
	m.clearedFields[usageevidence.FieldPackageHint] = struct{}{}
}

// PackageHintCleared returns if the "PackageHint" field was cleared in this mutation.
func (m *UsageEvidenceMutation) PackageHintCleared() bool {
	_, ok := m.clearedFields[usageevidence.FieldPackageHint]
	return ok
}

// ResetPackageHint resets all changes to the "PackageHint" field.
func (m *UsageEvidenceMutation) ResetPackageHint() {
	m._PackageHint = nil
	delete(m.clearedFields, usageevidence.FieldPackageHint)
}

// SetModuleName sets the "ModuleName" field.
func (m *UsageEvidenceMutation) SetModuleName(s string) {
	m._ModuleName = &s
}

// ModuleName returns the value of the "ModuleName" field in the mutation.
func (m *UsageEvidenceMutation) ModuleName() (r string, exists bool) {
	v := m._ModuleName
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleName returns the old "ModuleName" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldModuleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleName: %w", err)
	}
	return oldValue.ModuleName, nil
}

// ResetModuleName resets all changes to the "ModuleName" field.
func (m *UsageEvidenceMutation) ResetModuleName() {
	m._ModuleName = nil
}

// SetModuleItem sets the "ModuleItem" field.
func (m *UsageEvidenceMutation) SetModuleItem(s string) {
	m._ModuleItem = &s
}

// ModuleItem returns the value of the "ModuleItem" field in the mutation.
func (m *UsageEvidenceMutation) ModuleItem() (r string, exists bool) {
	v := m._ModuleItem
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleItem returns the old "ModuleItem" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldModuleItem(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleItem: %w", err)
	}
	return oldValue.ModuleItem, nil
}

// ClearModuleItem clears the value of the "ModuleItem" field.
func (m *UsageEvidenceMutation) ClearModuleItem() {
	m._ModuleItem = nil
	m.clearedFields[usageevidence.FieldModuleItem] = struct{}{}
}

// ModuleItemCleared returns if the "ModuleItem" field was cleared in this mutation.
func (m *UsageEvidenceMutation) ModuleItemCleared() bool {
	_, ok := m.clearedFields[usageevidence.FieldModuleItem]
	return ok
}

// ResetModuleItem resets all changes to the "ModuleItem" field.
func (m *UsageEvidenceMutation) ResetModuleItem() {
	m._ModuleItem = nil
	delete(m.clearedFields, usageevidence.FieldModuleItem)
}

// SetModuleAlias sets the "ModuleAlias" field.
func (m *UsageEvidenceMutation) SetModuleAlias(s string) {
	m._ModuleAlias = &s
}

// ModuleAlias returns the value of the "ModuleAlias" field in the mutation.
func (m *UsageEvidenceMutation) ModuleAlias() (r string, exists bool) {
	v := m._ModuleAlias
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleAlias returns the old "ModuleAlias" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldModuleAlias(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleAlias is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleAlias requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleAlias: %w", err)
	}
	return oldValue.ModuleAlias, nil
}

// ClearModuleAlias clears the value of the "ModuleAlias" field.
func (m *UsageEvidenceMutation) ClearModuleAlias() {
	m._ModuleAlias = nil
	m.clearedFields[usageevidence.FieldModuleAlias] = struct{}{}
}

// ModuleAliasCleared returns if the "ModuleAlias" field was cleared in this mutation.
func (m *UsageEvidenceMutation) ModuleAliasCleared() bool {
	_, ok := m.clearedFields[usageevidence.FieldModuleAlias]
	return ok
}

// ResetModuleAlias resets all changes to the "ModuleAlias" field.
func (m *UsageEvidenceMutation) ResetModuleAlias() {
	m._ModuleAlias = nil
	delete(m.clearedFields, usageevidence.FieldModuleAlias)
}

// SetIsWildCardUsage sets the "IsWildCardUsage" field.
func (m *UsageEvidenceMutation) SetIsWildCardUsage(b bool) {
	m._IsWildCardUsage = &b
}

// IsWildCardUsage returns the value of the "IsWildCardUsage" field in the mutation.
func (m *UsageEvidenceMutation) IsWildCardUsage() (r bool, exists bool) {
	v := m._IsWildCardUsage
	if v == nil {
		return
	}
	return *v, true
}

// OldIsWildCardUsage returns the old "IsWildCardUsage" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldIsWildCardUsage(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsWildCardUsage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsWildCardUsage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsWildCardUsage: %w", err)
	}
	return oldValue.IsWildCardUsage, nil
}

// ClearIsWildCardUsage clears the value of the "IsWildCardUsage" field.
func (m *UsageEvidenceMutation) ClearIsWildCardUsage() {
	m._IsWildCardUsage = nil
	m.clearedFields[usageevidence.FieldIsWildCardUsage] = struct{}{}
}

// IsWildCardUsageCleared returns if the "IsWildCardUsage" field was cleared in this mutation.
func (m *UsageEvidenceMutation) IsWildCardUsageCleared() bool {
	_, ok := m.clearedFields[usageevidence.FieldIsWildCardUsage]
	return ok
}

// ResetIsWildCardUsage resets all changes to the "IsWildCardUsage" field.
func (m *UsageEvidenceMutation) ResetIsWildCardUsage() {
	m._IsWildCardUsage = nil
	delete(m.clearedFields, usageevidence.FieldIsWildCardUsage)
}

// SetIdentifier sets the "Identifier" field.
func (m *UsageEvidenceMutation) SetIdentifier(s string) {
	m._Identifier = &s
}

// Identifier returns the value of the "Identifier" field in the mutation.
func (m *UsageEvidenceMutation) Identifier() (r string, exists bool) {
	v := m._Identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "Identifier" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldIdentifier(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ClearIdentifier clears the value of the "Identifier" field.
func (m *UsageEvidenceMutation) ClearIdentifier() {
	m._Identifier = nil
	m.clearedFields[usageevidence.FieldIdentifier] = struct{}{}
}

// IdentifierCleared returns if the "Identifier" field was cleared in this mutation.
func (m *UsageEvidenceMutation) IdentifierCleared() bool {
	_, ok := m.clearedFields[usageevidence.FieldIdentifier]
	return ok
}

// ResetIdentifier resets all changes to the "Identifier" field.
func (m *UsageEvidenceMutation) ResetIdentifier() {
	m._Identifier = nil
	delete(m.clearedFields, usageevidence.FieldIdentifier)
}

// SetUsageFilePath sets the "UsageFilePath" field.
func (m *UsageEvidenceMutation) SetUsageFilePath(s string) {
	m._UsageFilePath = &s
}

// UsageFilePath returns the value of the "UsageFilePath" field in the mutation.
func (m *UsageEvidenceMutation) UsageFilePath() (r string, exists bool) {
	v := m._UsageFilePath
	if v == nil {
		return
	}
	return *v, true
}

// OldUsageFilePath returns the old "UsageFilePath" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldUsageFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsageFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsageFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsageFilePath: %w", err)
	}
	return oldValue.UsageFilePath, nil
}

// ResetUsageFilePath resets all changes to the "UsageFilePath" field.
func (m *UsageEvidenceMutation) ResetUsageFilePath() {
	m._UsageFilePath = nil
}

// SetLine sets the "Line" field.
func (m *UsageEvidenceMutation) SetLine(u uint) {
	m._Line = &u
	m.add_Line = nil
}

// Line returns the value of the "Line" field in the mutation.
func (m *UsageEvidenceMutation) Line() (r uint, exists bool) {
	v := m._Line
	if v == nil {
		return
	}
	return *v, true
}

// OldLine returns the old "Line" field's value of the UsageEvidence entity.
// If the UsageEvidence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsageEvidenceMutation) OldLine(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLine: %w", err)
	}
	return oldValue.Line, nil
}

// AddLine adds u to the "Line" field.
func (m *UsageEvidenceMutation) AddLine(u int) {
	if m.add_Line != nil {
		*m.add_Line += u
	} else {
		m.add_Line = &u
	}
}

// AddedLine returns the value that was added to the "Line" field in this mutation.
func (m *UsageEvidenceMutation) AddedLine() (r int, exists bool) {
	v := m.add_Line
	if v == nil {
		return
	}
	return *v, true
}

// ResetLine resets all changes to the "Line" field.
func (m *UsageEvidenceMutation) ResetLine() {
	m._Line = nil
	m.add_Line = nil
}

// SetCodeFileID sets the "code_file" edge to the CodeFile entity by id.
func (m *UsageEvidenceMutation) SetCodeFileID(id int) {
	m.code_file = &id
}

// ClearCodeFile clears the "code_file" edge to the CodeFile entity.
func (m *UsageEvidenceMutation) ClearCodeFile() {
	m.clearedcode_file = true
}

// CodeFileCleared reports if the "code_file" edge to the CodeFile entity was cleared.
func (m *UsageEvidenceMutation) CodeFileCleared() bool {
	return m.clearedcode_file
}

// CodeFileID returns the "code_file" edge ID in the mutation.
func (m *UsageEvidenceMutation) CodeFileID() (id int, exists bool) {
	if m.code_file != nil {
		return *m.code_file, true
	}
	return
}

// CodeFileIDs returns the "code_file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CodeFileID instead. It exists only for internal usage by the builders.
func (m *UsageEvidenceMutation) CodeFileIDs() (ids []int) {
	if id := m.code_file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCodeFile resets all changes to the "code_file" edge.
func (m *UsageEvidenceMutation) ResetCodeFile() {
	m.code_file = nil
	m.clearedcode_file = false
}

// Where appends a list predicates to the UsageEvidenceMutation builder.
func (m *UsageEvidenceMutation) Where(ps ...predicate.UsageEvidence) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UsageEvidenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UsageEvidenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UsageEvidence, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UsageEvidenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UsageEvidenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UsageEvidence).
func (m *UsageEvidenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsageEvidenceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._PackageHint != nil {
		fields = append(fields, usageevidence.FieldPackageHint)
	}
	if m._ModuleName != nil {
		fields = append(fields, usageevidence.FieldModuleName)
	}
	if m._ModuleItem != nil {
		fields = append(fields, usageevidence.FieldModuleItem)
	}
	if m._ModuleAlias != nil {
		fields = append(fields, usageevidence.FieldModuleAlias)
	}
	if m._IsWildCardUsage != nil {
		fields = append(fields, usageevidence.FieldIsWildCardUsage)
	}
	if m._Identifier != nil {
		fields = append(fields, usageevidence.FieldIdentifier)
	}
	if m._UsageFilePath != nil {
		fields = append(fields, usageevidence.FieldUsageFilePath)
	}
	if m._Line != nil {
		fields = append(fields, usageevidence.FieldLine)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsageEvidenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usageevidence.FieldPackageHint:
		return m.PackageHint()
	case usageevidence.FieldModuleName:
		return m.ModuleName()
	case usageevidence.FieldModuleItem:
		return m.ModuleItem()
	case usageevidence.FieldModuleAlias:
		return m.ModuleAlias()
	case usageevidence.FieldIsWildCardUsage:
		return m.IsWildCardUsage()
	case usageevidence.FieldIdentifier:
		return m.Identifier()
	case usageevidence.FieldUsageFilePath:
		return m.UsageFilePath()
	case usageevidence.FieldLine:
		return m.Line()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsageEvidenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usageevidence.FieldPackageHint:
		return m.OldPackageHint(ctx)
	case usageevidence.FieldModuleName:
		return m.OldModuleName(ctx)
	case usageevidence.FieldModuleItem:
		return m.OldModuleItem(ctx)
	case usageevidence.FieldModuleAlias:
		return m.OldModuleAlias(ctx)
	case usageevidence.FieldIsWildCardUsage:
		return m.OldIsWildCardUsage(ctx)
	case usageevidence.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case usageevidence.FieldUsageFilePath:
		return m.OldUsageFilePath(ctx)
	case usageevidence.FieldLine:
		return m.OldLine(ctx)
	}
	return nil, fmt.Errorf("unknown UsageEvidence field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsageEvidenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usageevidence.FieldPackageHint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackageHint(v)
		return nil
	case usageevidence.FieldModuleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleName(v)
		return nil
	case usageevidence.FieldModuleItem:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleItem(v)
		return nil
	case usageevidence.FieldModuleAlias:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleAlias(v)
		return nil
	case usageevidence.FieldIsWildCardUsage:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsWildCardUsage(v)
		return nil
	case usageevidence.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case usageevidence.FieldUsageFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsageFilePath(v)
		return nil
	case usageevidence.FieldLine:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLine(v)
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsageEvidenceMutation) AddedFields() []string {
	var fields []string
	if m.add_Line != nil {
		fields = append(fields, usageevidence.FieldLine)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsageEvidenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usageevidence.FieldLine:
		return m.AddedLine()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsageEvidenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usageevidence.FieldLine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLine(v)
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsageEvidenceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usageevidence.FieldPackageHint) {
		fields = append(fields, usageevidence.FieldPackageHint)
	}
	if m.FieldCleared(usageevidence.FieldModuleItem) {
		fields = append(fields, usageevidence.FieldModuleItem)
	}
	if m.FieldCleared(usageevidence.FieldModuleAlias) {
		fields = append(fields, usageevidence.FieldModuleAlias)
	}
	if m.FieldCleared(usageevidence.FieldIsWildCardUsage) {
		fields = append(fields, usageevidence.FieldIsWildCardUsage)
	}
	if m.FieldCleared(usageevidence.FieldIdentifier) {
		fields = append(fields, usageevidence.FieldIdentifier)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsageEvidenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsageEvidenceMutation) ClearField(name string) error {
	switch name {
	case usageevidence.FieldPackageHint:
		m.ClearPackageHint()
		return nil
	case usageevidence.FieldModuleItem:
		m.ClearModuleItem()
		return nil
	case usageevidence.FieldModuleAlias:
		m.ClearModuleAlias()
		return nil
	case usageevidence.FieldIsWildCardUsage:
		m.ClearIsWildCardUsage()
		return nil
	case usageevidence.FieldIdentifier:
		m.ClearIdentifier()
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsageEvidenceMutation) ResetField(name string) error {
	switch name {
	case usageevidence.FieldPackageHint:
		m.ResetPackageHint()
		return nil
	case usageevidence.FieldModuleName:
		m.ResetModuleName()
		return nil
	case usageevidence.FieldModuleItem:
		m.ResetModuleItem()
		return nil
	case usageevidence.FieldModuleAlias:
		m.ResetModuleAlias()
		return nil
	case usageevidence.FieldIsWildCardUsage:
		m.ResetIsWildCardUsage()
		return nil
	case usageevidence.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case usageevidence.FieldUsageFilePath:
		m.ResetUsageFilePath()
		return nil
	case usageevidence.FieldLine:
		m.ResetLine()
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsageEvidenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.code_file != nil {
		edges = append(edges, usageevidence.EdgeCodeFile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsageEvidenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usageevidence.EdgeCodeFile:
		if id := m.code_file; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsageEvidenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsageEvidenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsageEvidenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcode_file {
		edges = append(edges, usageevidence.EdgeCodeFile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsageEvidenceMutation) EdgeCleared(name string) bool {
	switch name {
	case usageevidence.EdgeCodeFile:
		return m.clearedcode_file
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsageEvidenceMutation) ClearEdge(name string) error {
	switch name {
	case usageevidence.EdgeCodeFile:
		m.ClearCodeFile()
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsageEvidenceMutation) ResetEdge(name string) error {
	switch name {
	case usageevidence.EdgeCodeFile:
		m.ResetCodeFile()
		return nil
	}
	return fmt.Errorf("unknown UsageEvidence edge %s", name)
}
