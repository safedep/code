// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/callgraphnode"
	"github.com/safedep/code/ent/predicate"
)

// CallgraphNodeQuery is the builder for querying CallgraphNode entities.
type CallgraphNodeQuery struct {
	config
	ctx          *QueryContext
	order        []callgraphnode.OrderOption
	inters       []Interceptor
	predicates   []predicate.CallgraphNode
	withCalledBy *CallgraphNodeQuery
	withCallsTo  *CallgraphNodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CallgraphNodeQuery builder.
func (cnq *CallgraphNodeQuery) Where(ps ...predicate.CallgraphNode) *CallgraphNodeQuery {
	cnq.predicates = append(cnq.predicates, ps...)
	return cnq
}

// Limit the number of records to be returned by this query.
func (cnq *CallgraphNodeQuery) Limit(limit int) *CallgraphNodeQuery {
	cnq.ctx.Limit = &limit
	return cnq
}

// Offset to start from.
func (cnq *CallgraphNodeQuery) Offset(offset int) *CallgraphNodeQuery {
	cnq.ctx.Offset = &offset
	return cnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cnq *CallgraphNodeQuery) Unique(unique bool) *CallgraphNodeQuery {
	cnq.ctx.Unique = &unique
	return cnq
}

// Order specifies how the records should be ordered.
func (cnq *CallgraphNodeQuery) Order(o ...callgraphnode.OrderOption) *CallgraphNodeQuery {
	cnq.order = append(cnq.order, o...)
	return cnq
}

// QueryCalledBy chains the current query on the "called_by" edge.
func (cnq *CallgraphNodeQuery) QueryCalledBy() *CallgraphNodeQuery {
	query := (&CallgraphNodeClient{config: cnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(callgraphnode.Table, callgraphnode.FieldID, selector),
			sqlgraph.To(callgraphnode.Table, callgraphnode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, callgraphnode.CalledByTable, callgraphnode.CalledByPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCallsTo chains the current query on the "calls_to" edge.
func (cnq *CallgraphNodeQuery) QueryCallsTo() *CallgraphNodeQuery {
	query := (&CallgraphNodeClient{config: cnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(callgraphnode.Table, callgraphnode.FieldID, selector),
			sqlgraph.To(callgraphnode.Table, callgraphnode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, callgraphnode.CallsToTable, callgraphnode.CallsToPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CallgraphNode entity from the query.
// Returns a *NotFoundError when no CallgraphNode was found.
func (cnq *CallgraphNodeQuery) First(ctx context.Context) (*CallgraphNode, error) {
	nodes, err := cnq.Limit(1).All(setContextOp(ctx, cnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{callgraphnode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) FirstX(ctx context.Context) *CallgraphNode {
	node, err := cnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CallgraphNode ID from the query.
// Returns a *NotFoundError when no CallgraphNode ID was found.
func (cnq *CallgraphNodeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cnq.Limit(1).IDs(setContextOp(ctx, cnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{callgraphnode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) FirstIDX(ctx context.Context) int {
	id, err := cnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CallgraphNode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CallgraphNode entity is found.
// Returns a *NotFoundError when no CallgraphNode entities are found.
func (cnq *CallgraphNodeQuery) Only(ctx context.Context) (*CallgraphNode, error) {
	nodes, err := cnq.Limit(2).All(setContextOp(ctx, cnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{callgraphnode.Label}
	default:
		return nil, &NotSingularError{callgraphnode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) OnlyX(ctx context.Context) *CallgraphNode {
	node, err := cnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CallgraphNode ID in the query.
// Returns a *NotSingularError when more than one CallgraphNode ID is found.
// Returns a *NotFoundError when no entities are found.
func (cnq *CallgraphNodeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cnq.Limit(2).IDs(setContextOp(ctx, cnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{callgraphnode.Label}
	default:
		err = &NotSingularError{callgraphnode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) OnlyIDX(ctx context.Context) int {
	id, err := cnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CallgraphNodes.
func (cnq *CallgraphNodeQuery) All(ctx context.Context) ([]*CallgraphNode, error) {
	ctx = setContextOp(ctx, cnq.ctx, ent.OpQueryAll)
	if err := cnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CallgraphNode, *CallgraphNodeQuery]()
	return withInterceptors[[]*CallgraphNode](ctx, cnq, qr, cnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) AllX(ctx context.Context) []*CallgraphNode {
	nodes, err := cnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CallgraphNode IDs.
func (cnq *CallgraphNodeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cnq.ctx.Unique == nil && cnq.path != nil {
		cnq.Unique(true)
	}
	ctx = setContextOp(ctx, cnq.ctx, ent.OpQueryIDs)
	if err = cnq.Select(callgraphnode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) IDsX(ctx context.Context) []int {
	ids, err := cnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cnq *CallgraphNodeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cnq.ctx, ent.OpQueryCount)
	if err := cnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cnq, querierCount[*CallgraphNodeQuery](), cnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) CountX(ctx context.Context) int {
	count, err := cnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cnq *CallgraphNodeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cnq.ctx, ent.OpQueryExist)
	switch _, err := cnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cnq *CallgraphNodeQuery) ExistX(ctx context.Context) bool {
	exist, err := cnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CallgraphNodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cnq *CallgraphNodeQuery) Clone() *CallgraphNodeQuery {
	if cnq == nil {
		return nil
	}
	return &CallgraphNodeQuery{
		config:       cnq.config,
		ctx:          cnq.ctx.Clone(),
		order:        append([]callgraphnode.OrderOption{}, cnq.order...),
		inters:       append([]Interceptor{}, cnq.inters...),
		predicates:   append([]predicate.CallgraphNode{}, cnq.predicates...),
		withCalledBy: cnq.withCalledBy.Clone(),
		withCallsTo:  cnq.withCallsTo.Clone(),
		// clone intermediate query.
		sql:  cnq.sql.Clone(),
		path: cnq.path,
	}
}

// WithCalledBy tells the query-builder to eager-load the nodes that are connected to
// the "called_by" edge. The optional arguments are used to configure the query builder of the edge.
func (cnq *CallgraphNodeQuery) WithCalledBy(opts ...func(*CallgraphNodeQuery)) *CallgraphNodeQuery {
	query := (&CallgraphNodeClient{config: cnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cnq.withCalledBy = query
	return cnq
}

// WithCallsTo tells the query-builder to eager-load the nodes that are connected to
// the "calls_to" edge. The optional arguments are used to configure the query builder of the edge.
func (cnq *CallgraphNodeQuery) WithCallsTo(opts ...func(*CallgraphNodeQuery)) *CallgraphNodeQuery {
	query := (&CallgraphNodeClient{config: cnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cnq.withCallsTo = query
	return cnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CallgraphNode.Query().
//		GroupBy(callgraphnode.FieldNamespace).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cnq *CallgraphNodeQuery) GroupBy(field string, fields ...string) *CallgraphNodeGroupBy {
	cnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CallgraphNodeGroupBy{build: cnq}
	grbuild.flds = &cnq.ctx.Fields
	grbuild.label = callgraphnode.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.CallgraphNode.Query().
//		Select(callgraphnode.FieldNamespace).
//		Scan(ctx, &v)
func (cnq *CallgraphNodeQuery) Select(fields ...string) *CallgraphNodeSelect {
	cnq.ctx.Fields = append(cnq.ctx.Fields, fields...)
	sbuild := &CallgraphNodeSelect{CallgraphNodeQuery: cnq}
	sbuild.label = callgraphnode.Label
	sbuild.flds, sbuild.scan = &cnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CallgraphNodeSelect configured with the given aggregations.
func (cnq *CallgraphNodeQuery) Aggregate(fns ...AggregateFunc) *CallgraphNodeSelect {
	return cnq.Select().Aggregate(fns...)
}

func (cnq *CallgraphNodeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cnq); err != nil {
				return err
			}
		}
	}
	for _, f := range cnq.ctx.Fields {
		if !callgraphnode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cnq.path != nil {
		prev, err := cnq.path(ctx)
		if err != nil {
			return err
		}
		cnq.sql = prev
	}
	return nil
}

func (cnq *CallgraphNodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CallgraphNode, error) {
	var (
		nodes       = []*CallgraphNode{}
		_spec       = cnq.querySpec()
		loadedTypes = [2]bool{
			cnq.withCalledBy != nil,
			cnq.withCallsTo != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CallgraphNode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CallgraphNode{config: cnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cnq.withCalledBy; query != nil {
		if err := cnq.loadCalledBy(ctx, query, nodes,
			func(n *CallgraphNode) { n.Edges.CalledBy = []*CallgraphNode{} },
			func(n *CallgraphNode, e *CallgraphNode) { n.Edges.CalledBy = append(n.Edges.CalledBy, e) }); err != nil {
			return nil, err
		}
	}
	if query := cnq.withCallsTo; query != nil {
		if err := cnq.loadCallsTo(ctx, query, nodes,
			func(n *CallgraphNode) { n.Edges.CallsTo = []*CallgraphNode{} },
			func(n *CallgraphNode, e *CallgraphNode) { n.Edges.CallsTo = append(n.Edges.CallsTo, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cnq *CallgraphNodeQuery) loadCalledBy(ctx context.Context, query *CallgraphNodeQuery, nodes []*CallgraphNode, init func(*CallgraphNode), assign func(*CallgraphNode, *CallgraphNode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CallgraphNode)
	nids := make(map[int]map[*CallgraphNode]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(callgraphnode.CalledByTable)
		s.Join(joinT).On(s.C(callgraphnode.FieldID), joinT.C(callgraphnode.CalledByPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(callgraphnode.CalledByPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(callgraphnode.CalledByPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CallgraphNode]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CallgraphNode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "called_by" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cnq *CallgraphNodeQuery) loadCallsTo(ctx context.Context, query *CallgraphNodeQuery, nodes []*CallgraphNode, init func(*CallgraphNode), assign func(*CallgraphNode, *CallgraphNode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CallgraphNode)
	nids := make(map[int]map[*CallgraphNode]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(callgraphnode.CallsToTable)
		s.Join(joinT).On(s.C(callgraphnode.FieldID), joinT.C(callgraphnode.CallsToPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(callgraphnode.CallsToPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(callgraphnode.CallsToPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CallgraphNode]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CallgraphNode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "calls_to" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cnq *CallgraphNodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cnq.querySpec()
	_spec.Node.Columns = cnq.ctx.Fields
	if len(cnq.ctx.Fields) > 0 {
		_spec.Unique = cnq.ctx.Unique != nil && *cnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cnq.driver, _spec)
}

func (cnq *CallgraphNodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(callgraphnode.Table, callgraphnode.Columns, sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt))
	_spec.From = cnq.sql
	if unique := cnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cnq.path != nil {
		_spec.Unique = true
	}
	if fields := cnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, callgraphnode.FieldID)
		for i := range fields {
			if fields[i] != callgraphnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cnq *CallgraphNodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cnq.driver.Dialect())
	t1 := builder.Table(callgraphnode.Table)
	columns := cnq.ctx.Fields
	if len(columns) == 0 {
		columns = callgraphnode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cnq.sql != nil {
		selector = cnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cnq.ctx.Unique != nil && *cnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cnq.predicates {
		p(selector)
	}
	for _, p := range cnq.order {
		p(selector)
	}
	if offset := cnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CallgraphNodeGroupBy is the group-by builder for CallgraphNode entities.
type CallgraphNodeGroupBy struct {
	selector
	build *CallgraphNodeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cngb *CallgraphNodeGroupBy) Aggregate(fns ...AggregateFunc) *CallgraphNodeGroupBy {
	cngb.fns = append(cngb.fns, fns...)
	return cngb
}

// Scan applies the selector query and scans the result into the given value.
func (cngb *CallgraphNodeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cngb.build.ctx, ent.OpQueryGroupBy)
	if err := cngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallgraphNodeQuery, *CallgraphNodeGroupBy](ctx, cngb.build, cngb, cngb.build.inters, v)
}

func (cngb *CallgraphNodeGroupBy) sqlScan(ctx context.Context, root *CallgraphNodeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cngb.fns))
	for _, fn := range cngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cngb.flds)+len(cngb.fns))
		for _, f := range *cngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CallgraphNodeSelect is the builder for selecting fields of CallgraphNode entities.
type CallgraphNodeSelect struct {
	*CallgraphNodeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cns *CallgraphNodeSelect) Aggregate(fns ...AggregateFunc) *CallgraphNodeSelect {
	cns.fns = append(cns.fns, fns...)
	return cns
}

// Scan applies the selector query and scans the result into the given value.
func (cns *CallgraphNodeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cns.ctx, ent.OpQuerySelect)
	if err := cns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallgraphNodeQuery, *CallgraphNodeSelect](ctx, cns.CallgraphNodeQuery, cns, cns.inters, v)
}

func (cns *CallgraphNodeSelect) sqlScan(ctx context.Context, root *CallgraphNodeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cns.fns))
	for _, fn := range cns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
