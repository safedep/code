// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/ent/codefile"
	"github.com/safedep/code/ent/usageevidence"
)

// UsageEvidence is the model entity for the UsageEvidence schema.
type UsageEvidence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageHint holds the value of the "PackageHint" field.
	PackageHint *string `json:"PackageHint,omitempty"`
	// ModuleName holds the value of the "ModuleName" field.
	ModuleName string `json:"ModuleName,omitempty"`
	// ModuleItem holds the value of the "ModuleItem" field.
	ModuleItem *string `json:"ModuleItem,omitempty"`
	// ModuleAlias holds the value of the "ModuleAlias" field.
	ModuleAlias *string `json:"ModuleAlias,omitempty"`
	// IsWildCardUsage holds the value of the "IsWildCardUsage" field.
	IsWildCardUsage bool `json:"IsWildCardUsage,omitempty"`
	// Identifier holds the value of the "Identifier" field.
	Identifier *string `json:"Identifier,omitempty"`
	// UsageFilePath holds the value of the "UsageFilePath" field.
	UsageFilePath string `json:"UsageFilePath,omitempty"`
	// Line holds the value of the "Line" field.
	Line uint `json:"Line,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsageEvidenceQuery when eager-loading is set.
	Edges                    UsageEvidenceEdges `json:"edges"`
	usage_evidence_code_file *int
	selectValues             sql.SelectValues
}

// UsageEvidenceEdges holds the relations/edges for other nodes in the graph.
type UsageEvidenceEdges struct {
	// CodeFile holds the value of the code_file edge.
	CodeFile *CodeFile `json:"code_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CodeFileOrErr returns the CodeFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsageEvidenceEdges) CodeFileOrErr() (*CodeFile, error) {
	if e.CodeFile != nil {
		return e.CodeFile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: codefile.Label}
	}
	return nil, &NotLoadedError{edge: "code_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsageEvidence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usageevidence.FieldIsWildCardUsage:
			values[i] = new(sql.NullBool)
		case usageevidence.FieldID, usageevidence.FieldLine:
			values[i] = new(sql.NullInt64)
		case usageevidence.FieldPackageHint, usageevidence.FieldModuleName, usageevidence.FieldModuleItem, usageevidence.FieldModuleAlias, usageevidence.FieldIdentifier, usageevidence.FieldUsageFilePath:
			values[i] = new(sql.NullString)
		case usageevidence.ForeignKeys[0]: // usage_evidence_code_file
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsageEvidence fields.
func (ue *UsageEvidence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usageevidence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ue.ID = int(value.Int64)
		case usageevidence.FieldPackageHint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PackageHint", values[i])
			} else if value.Valid {
				ue.PackageHint = new(string)
				*ue.PackageHint = value.String
			}
		case usageevidence.FieldModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModuleName", values[i])
			} else if value.Valid {
				ue.ModuleName = value.String
			}
		case usageevidence.FieldModuleItem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModuleItem", values[i])
			} else if value.Valid {
				ue.ModuleItem = new(string)
				*ue.ModuleItem = value.String
			}
		case usageevidence.FieldModuleAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModuleAlias", values[i])
			} else if value.Valid {
				ue.ModuleAlias = new(string)
				*ue.ModuleAlias = value.String
			}
		case usageevidence.FieldIsWildCardUsage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsWildCardUsage", values[i])
			} else if value.Valid {
				ue.IsWildCardUsage = value.Bool
			}
		case usageevidence.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Identifier", values[i])
			} else if value.Valid {
				ue.Identifier = new(string)
				*ue.Identifier = value.String
			}
		case usageevidence.FieldUsageFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UsageFilePath", values[i])
			} else if value.Valid {
				ue.UsageFilePath = value.String
			}
		case usageevidence.FieldLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Line", values[i])
			} else if value.Valid {
				ue.Line = uint(value.Int64)
			}
		case usageevidence.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field usage_evidence_code_file", value)
			} else if value.Valid {
				ue.usage_evidence_code_file = new(int)
				*ue.usage_evidence_code_file = int(value.Int64)
			}
		default:
			ue.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsageEvidence.
// This includes values selected through modifiers, order, etc.
func (ue *UsageEvidence) Value(name string) (ent.Value, error) {
	return ue.selectValues.Get(name)
}

// QueryCodeFile queries the "code_file" edge of the UsageEvidence entity.
func (ue *UsageEvidence) QueryCodeFile() *CodeFileQuery {
	return NewUsageEvidenceClient(ue.config).QueryCodeFile(ue)
}

// Update returns a builder for updating this UsageEvidence.
// Note that you need to call UsageEvidence.Unwrap() before calling this method if this UsageEvidence
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UsageEvidence) Update() *UsageEvidenceUpdateOne {
	return NewUsageEvidenceClient(ue.config).UpdateOne(ue)
}

// Unwrap unwraps the UsageEvidence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ue *UsageEvidence) Unwrap() *UsageEvidence {
	_tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsageEvidence is not a transactional entity")
	}
	ue.config.driver = _tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UsageEvidence) String() string {
	var builder strings.Builder
	builder.WriteString("UsageEvidence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ue.ID))
	if v := ue.PackageHint; v != nil {
		builder.WriteString("PackageHint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("ModuleName=")
	builder.WriteString(ue.ModuleName)
	builder.WriteString(", ")
	if v := ue.ModuleItem; v != nil {
		builder.WriteString("ModuleItem=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ue.ModuleAlias; v != nil {
		builder.WriteString("ModuleAlias=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("IsWildCardUsage=")
	builder.WriteString(fmt.Sprintf("%v", ue.IsWildCardUsage))
	builder.WriteString(", ")
	if v := ue.Identifier; v != nil {
		builder.WriteString("Identifier=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("UsageFilePath=")
	builder.WriteString(ue.UsageFilePath)
	builder.WriteString(", ")
	builder.WriteString("Line=")
	builder.WriteString(fmt.Sprintf("%v", ue.Line))
	builder.WriteByte(')')
	return builder.String()
}

// UsageEvidences is a parsable slice of UsageEvidence.
type UsageEvidences []*UsageEvidence
