// Code generated by ent, DO NOT EDIT.

package codefile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the codefile type in the database.
	Label = "code_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilePath holds the string denoting the filepath field in the database.
	FieldFilePath = "FilePath"
	// EdgeUsageEvidences holds the string denoting the usage_evidences edge name in mutations.
	EdgeUsageEvidences = "usage_evidences"
	// Table holds the table name of the codefile in the database.
	Table = "code_files"
	// UsageEvidencesTable is the table that holds the usage_evidences relation/edge.
	UsageEvidencesTable = "usage_evidences"
	// UsageEvidencesInverseTable is the table name for the UsageEvidence entity.
	// It exists in this package in order to avoid circular dependency with the "usageevidence" package.
	UsageEvidencesInverseTable = "usage_evidences"
	// UsageEvidencesColumn is the table column denoting the usage_evidences relation/edge.
	UsageEvidencesColumn = "usage_evidence_code_file"
)

// Columns holds all SQL columns for codefile fields.
var Columns = []string{
	FieldID,
	FieldFilePath,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CodeFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilePath orders the results by the FilePath field.
func ByFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePath, opts...).ToFunc()
}

// ByUsageEvidencesCount orders the results by usage_evidences count.
func ByUsageEvidencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsageEvidencesStep(), opts...)
	}
}

// ByUsageEvidences orders the results by usage_evidences terms.
func ByUsageEvidences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsageEvidencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsageEvidencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsageEvidencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UsageEvidencesTable, UsageEvidencesColumn),
	)
}
