// Code generated by ent, DO NOT EDIT.

package codefile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldLTE(FieldID, id))
}

// FilePath applies equality check predicate on the "FilePath" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldEQ(FieldFilePath, v))
}

// FilePathEQ applies the EQ predicate on the "FilePath" field.
func FilePathEQ(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "FilePath" field.
func FilePathNEQ(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "FilePath" field.
func FilePathIn(vs ...string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "FilePath" field.
func FilePathNotIn(vs ...string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "FilePath" field.
func FilePathGT(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "FilePath" field.
func FilePathGTE(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "FilePath" field.
func FilePathLT(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "FilePath" field.
func FilePathLTE(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "FilePath" field.
func FilePathContains(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "FilePath" field.
func FilePathHasPrefix(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "FilePath" field.
func FilePathHasSuffix(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathEqualFold applies the EqualFold predicate on the "FilePath" field.
func FilePathEqualFold(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "FilePath" field.
func FilePathContainsFold(v string) predicate.CodeFile {
	return predicate.CodeFile(sql.FieldContainsFold(FieldFilePath, v))
}

// HasUsageEvidences applies the HasEdge predicate on the "usage_evidences" edge.
func HasUsageEvidences() predicate.CodeFile {
	return predicate.CodeFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsageEvidencesTable, UsageEvidencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsageEvidencesWith applies the HasEdge predicate on the "usage_evidences" edge with a given conditions (other predicates).
func HasUsageEvidencesWith(preds ...predicate.UsageEvidence) predicate.CodeFile {
	return predicate.CodeFile(func(s *sql.Selector) {
		step := newUsageEvidencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CodeFile) predicate.CodeFile {
	return predicate.CodeFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CodeFile) predicate.CodeFile {
	return predicate.CodeFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CodeFile) predicate.CodeFile {
	return predicate.CodeFile(sql.NotPredicates(p))
}
