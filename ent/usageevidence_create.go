// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/codefile"
	"github.com/safedep/code/ent/usageevidence"
)

// UsageEvidenceCreate is the builder for creating a UsageEvidence entity.
type UsageEvidenceCreate struct {
	config
	mutation *UsageEvidenceMutation
	hooks    []Hook
}

// SetPackageHint sets the "PackageHint" field.
func (uec *UsageEvidenceCreate) SetPackageHint(s string) *UsageEvidenceCreate {
	uec.mutation.SetPackageHint(s)
	return uec
}

// SetNillablePackageHint sets the "PackageHint" field if the given value is not nil.
func (uec *UsageEvidenceCreate) SetNillablePackageHint(s *string) *UsageEvidenceCreate {
	if s != nil {
		uec.SetPackageHint(*s)
	}
	return uec
}

// SetModuleName sets the "ModuleName" field.
func (uec *UsageEvidenceCreate) SetModuleName(s string) *UsageEvidenceCreate {
	uec.mutation.SetModuleName(s)
	return uec
}

// SetModuleItem sets the "ModuleItem" field.
func (uec *UsageEvidenceCreate) SetModuleItem(s string) *UsageEvidenceCreate {
	uec.mutation.SetModuleItem(s)
	return uec
}

// SetNillableModuleItem sets the "ModuleItem" field if the given value is not nil.
func (uec *UsageEvidenceCreate) SetNillableModuleItem(s *string) *UsageEvidenceCreate {
	if s != nil {
		uec.SetModuleItem(*s)
	}
	return uec
}

// SetModuleAlias sets the "ModuleAlias" field.
func (uec *UsageEvidenceCreate) SetModuleAlias(s string) *UsageEvidenceCreate {
	uec.mutation.SetModuleAlias(s)
	return uec
}

// SetNillableModuleAlias sets the "ModuleAlias" field if the given value is not nil.
func (uec *UsageEvidenceCreate) SetNillableModuleAlias(s *string) *UsageEvidenceCreate {
	if s != nil {
		uec.SetModuleAlias(*s)
	}
	return uec
}

// SetIsWildCardUsage sets the "IsWildCardUsage" field.
func (uec *UsageEvidenceCreate) SetIsWildCardUsage(b bool) *UsageEvidenceCreate {
	uec.mutation.SetIsWildCardUsage(b)
	return uec
}

// SetNillableIsWildCardUsage sets the "IsWildCardUsage" field if the given value is not nil.
func (uec *UsageEvidenceCreate) SetNillableIsWildCardUsage(b *bool) *UsageEvidenceCreate {
	if b != nil {
		uec.SetIsWildCardUsage(*b)
	}
	return uec
}

// SetIdentifier sets the "Identifier" field.
func (uec *UsageEvidenceCreate) SetIdentifier(s string) *UsageEvidenceCreate {
	uec.mutation.SetIdentifier(s)
	return uec
}

// SetNillableIdentifier sets the "Identifier" field if the given value is not nil.
func (uec *UsageEvidenceCreate) SetNillableIdentifier(s *string) *UsageEvidenceCreate {
	if s != nil {
		uec.SetIdentifier(*s)
	}
	return uec
}

// SetUsageFilePath sets the "UsageFilePath" field.
func (uec *UsageEvidenceCreate) SetUsageFilePath(s string) *UsageEvidenceCreate {
	uec.mutation.SetUsageFilePath(s)
	return uec
}

// SetLine sets the "Line" field.
func (uec *UsageEvidenceCreate) SetLine(u uint) *UsageEvidenceCreate {
	uec.mutation.SetLine(u)
	return uec
}

// SetUsedInID sets the "used_in" edge to the CodeFile entity by ID.
func (uec *UsageEvidenceCreate) SetUsedInID(id int) *UsageEvidenceCreate {
	uec.mutation.SetUsedInID(id)
	return uec
}

// SetUsedIn sets the "used_in" edge to the CodeFile entity.
func (uec *UsageEvidenceCreate) SetUsedIn(c *CodeFile) *UsageEvidenceCreate {
	return uec.SetUsedInID(c.ID)
}

// Mutation returns the UsageEvidenceMutation object of the builder.
func (uec *UsageEvidenceCreate) Mutation() *UsageEvidenceMutation {
	return uec.mutation
}

// Save creates the UsageEvidence in the database.
func (uec *UsageEvidenceCreate) Save(ctx context.Context) (*UsageEvidence, error) {
	uec.defaults()
	return withHooks(ctx, uec.sqlSave, uec.mutation, uec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UsageEvidenceCreate) SaveX(ctx context.Context) *UsageEvidence {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uec *UsageEvidenceCreate) Exec(ctx context.Context) error {
	_, err := uec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uec *UsageEvidenceCreate) ExecX(ctx context.Context) {
	if err := uec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uec *UsageEvidenceCreate) defaults() {
	if _, ok := uec.mutation.IsWildCardUsage(); !ok {
		v := usageevidence.DefaultIsWildCardUsage
		uec.mutation.SetIsWildCardUsage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uec *UsageEvidenceCreate) check() error {
	if _, ok := uec.mutation.ModuleName(); !ok {
		return &ValidationError{Name: "ModuleName", err: errors.New(`ent: missing required field "UsageEvidence.ModuleName"`)}
	}
	if _, ok := uec.mutation.UsageFilePath(); !ok {
		return &ValidationError{Name: "UsageFilePath", err: errors.New(`ent: missing required field "UsageEvidence.UsageFilePath"`)}
	}
	if _, ok := uec.mutation.Line(); !ok {
		return &ValidationError{Name: "Line", err: errors.New(`ent: missing required field "UsageEvidence.Line"`)}
	}
	if len(uec.mutation.UsedInIDs()) == 0 {
		return &ValidationError{Name: "used_in", err: errors.New(`ent: missing required edge "UsageEvidence.used_in"`)}
	}
	return nil
}

func (uec *UsageEvidenceCreate) sqlSave(ctx context.Context) (*UsageEvidence, error) {
	if err := uec.check(); err != nil {
		return nil, err
	}
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uec.mutation.id = &_node.ID
	uec.mutation.done = true
	return _node, nil
}

func (uec *UsageEvidenceCreate) createSpec() (*UsageEvidence, *sqlgraph.CreateSpec) {
	var (
		_node = &UsageEvidence{config: uec.config}
		_spec = sqlgraph.NewCreateSpec(usageevidence.Table, sqlgraph.NewFieldSpec(usageevidence.FieldID, field.TypeInt))
	)
	if value, ok := uec.mutation.PackageHint(); ok {
		_spec.SetField(usageevidence.FieldPackageHint, field.TypeString, value)
		_node.PackageHint = &value
	}
	if value, ok := uec.mutation.ModuleName(); ok {
		_spec.SetField(usageevidence.FieldModuleName, field.TypeString, value)
		_node.ModuleName = value
	}
	if value, ok := uec.mutation.ModuleItem(); ok {
		_spec.SetField(usageevidence.FieldModuleItem, field.TypeString, value)
		_node.ModuleItem = &value
	}
	if value, ok := uec.mutation.ModuleAlias(); ok {
		_spec.SetField(usageevidence.FieldModuleAlias, field.TypeString, value)
		_node.ModuleAlias = &value
	}
	if value, ok := uec.mutation.IsWildCardUsage(); ok {
		_spec.SetField(usageevidence.FieldIsWildCardUsage, field.TypeBool, value)
		_node.IsWildCardUsage = value
	}
	if value, ok := uec.mutation.Identifier(); ok {
		_spec.SetField(usageevidence.FieldIdentifier, field.TypeString, value)
		_node.Identifier = &value
	}
	if value, ok := uec.mutation.UsageFilePath(); ok {
		_spec.SetField(usageevidence.FieldUsageFilePath, field.TypeString, value)
		_node.UsageFilePath = value
	}
	if value, ok := uec.mutation.Line(); ok {
		_spec.SetField(usageevidence.FieldLine, field.TypeUint, value)
		_node.Line = value
	}
	if nodes := uec.mutation.UsedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usageevidence.UsedInTable,
			Columns: []string{usageevidence.UsedInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codefile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.usage_evidence_used_in = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsageEvidenceCreateBulk is the builder for creating many UsageEvidence entities in bulk.
type UsageEvidenceCreateBulk struct {
	config
	err      error
	builders []*UsageEvidenceCreate
}

// Save creates the UsageEvidence entities in the database.
func (uecb *UsageEvidenceCreateBulk) Save(ctx context.Context) ([]*UsageEvidence, error) {
	if uecb.err != nil {
		return nil, uecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UsageEvidence, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsageEvidenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uecb *UsageEvidenceCreateBulk) SaveX(ctx context.Context) []*UsageEvidence {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uecb *UsageEvidenceCreateBulk) Exec(ctx context.Context) error {
	_, err := uecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uecb *UsageEvidenceCreateBulk) ExecX(ctx context.Context) {
	if err := uecb.Exec(ctx); err != nil {
		panic(err)
	}
}
