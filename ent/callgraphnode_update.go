// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/callgraphnode"
	"github.com/safedep/code/ent/predicate"
)

// CallgraphNodeUpdate is the builder for updating CallgraphNode entities.
type CallgraphNodeUpdate struct {
	config
	hooks    []Hook
	mutation *CallgraphNodeMutation
}

// Where appends a list predicates to the CallgraphNodeUpdate builder.
func (cnu *CallgraphNodeUpdate) Where(ps ...predicate.CallgraphNode) *CallgraphNodeUpdate {
	cnu.mutation.Where(ps...)
	return cnu
}

// AddCalledByIDs adds the "called_by" edge to the CallgraphNode entity by IDs.
func (cnu *CallgraphNodeUpdate) AddCalledByIDs(ids ...int) *CallgraphNodeUpdate {
	cnu.mutation.AddCalledByIDs(ids...)
	return cnu
}

// AddCalledBy adds the "called_by" edges to the CallgraphNode entity.
func (cnu *CallgraphNodeUpdate) AddCalledBy(c ...*CallgraphNode) *CallgraphNodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.AddCalledByIDs(ids...)
}

// AddCallsToIDs adds the "calls_to" edge to the CallgraphNode entity by IDs.
func (cnu *CallgraphNodeUpdate) AddCallsToIDs(ids ...int) *CallgraphNodeUpdate {
	cnu.mutation.AddCallsToIDs(ids...)
	return cnu
}

// AddCallsTo adds the "calls_to" edges to the CallgraphNode entity.
func (cnu *CallgraphNodeUpdate) AddCallsTo(c ...*CallgraphNode) *CallgraphNodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.AddCallsToIDs(ids...)
}

// Mutation returns the CallgraphNodeMutation object of the builder.
func (cnu *CallgraphNodeUpdate) Mutation() *CallgraphNodeMutation {
	return cnu.mutation
}

// ClearCalledBy clears all "called_by" edges to the CallgraphNode entity.
func (cnu *CallgraphNodeUpdate) ClearCalledBy() *CallgraphNodeUpdate {
	cnu.mutation.ClearCalledBy()
	return cnu
}

// RemoveCalledByIDs removes the "called_by" edge to CallgraphNode entities by IDs.
func (cnu *CallgraphNodeUpdate) RemoveCalledByIDs(ids ...int) *CallgraphNodeUpdate {
	cnu.mutation.RemoveCalledByIDs(ids...)
	return cnu
}

// RemoveCalledBy removes "called_by" edges to CallgraphNode entities.
func (cnu *CallgraphNodeUpdate) RemoveCalledBy(c ...*CallgraphNode) *CallgraphNodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.RemoveCalledByIDs(ids...)
}

// ClearCallsTo clears all "calls_to" edges to the CallgraphNode entity.
func (cnu *CallgraphNodeUpdate) ClearCallsTo() *CallgraphNodeUpdate {
	cnu.mutation.ClearCallsTo()
	return cnu
}

// RemoveCallsToIDs removes the "calls_to" edge to CallgraphNode entities by IDs.
func (cnu *CallgraphNodeUpdate) RemoveCallsToIDs(ids ...int) *CallgraphNodeUpdate {
	cnu.mutation.RemoveCallsToIDs(ids...)
	return cnu
}

// RemoveCallsTo removes "calls_to" edges to CallgraphNode entities.
func (cnu *CallgraphNodeUpdate) RemoveCallsTo(c ...*CallgraphNode) *CallgraphNodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.RemoveCallsToIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnu *CallgraphNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cnu.sqlSave, cnu.mutation, cnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnu *CallgraphNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := cnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnu *CallgraphNodeUpdate) Exec(ctx context.Context) error {
	_, err := cnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnu *CallgraphNodeUpdate) ExecX(ctx context.Context) {
	if err := cnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cnu *CallgraphNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(callgraphnode.Table, callgraphnode.Columns, sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt))
	if ps := cnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cnu.mutation.CalledByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.RemovedCalledByIDs(); len(nodes) > 0 && !cnu.mutation.CalledByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.CalledByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnu.mutation.CallsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.RemovedCallsToIDs(); len(nodes) > 0 && !cnu.mutation.CallsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.CallsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callgraphnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cnu.mutation.done = true
	return n, nil
}

// CallgraphNodeUpdateOne is the builder for updating a single CallgraphNode entity.
type CallgraphNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CallgraphNodeMutation
}

// AddCalledByIDs adds the "called_by" edge to the CallgraphNode entity by IDs.
func (cnuo *CallgraphNodeUpdateOne) AddCalledByIDs(ids ...int) *CallgraphNodeUpdateOne {
	cnuo.mutation.AddCalledByIDs(ids...)
	return cnuo
}

// AddCalledBy adds the "called_by" edges to the CallgraphNode entity.
func (cnuo *CallgraphNodeUpdateOne) AddCalledBy(c ...*CallgraphNode) *CallgraphNodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.AddCalledByIDs(ids...)
}

// AddCallsToIDs adds the "calls_to" edge to the CallgraphNode entity by IDs.
func (cnuo *CallgraphNodeUpdateOne) AddCallsToIDs(ids ...int) *CallgraphNodeUpdateOne {
	cnuo.mutation.AddCallsToIDs(ids...)
	return cnuo
}

// AddCallsTo adds the "calls_to" edges to the CallgraphNode entity.
func (cnuo *CallgraphNodeUpdateOne) AddCallsTo(c ...*CallgraphNode) *CallgraphNodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.AddCallsToIDs(ids...)
}

// Mutation returns the CallgraphNodeMutation object of the builder.
func (cnuo *CallgraphNodeUpdateOne) Mutation() *CallgraphNodeMutation {
	return cnuo.mutation
}

// ClearCalledBy clears all "called_by" edges to the CallgraphNode entity.
func (cnuo *CallgraphNodeUpdateOne) ClearCalledBy() *CallgraphNodeUpdateOne {
	cnuo.mutation.ClearCalledBy()
	return cnuo
}

// RemoveCalledByIDs removes the "called_by" edge to CallgraphNode entities by IDs.
func (cnuo *CallgraphNodeUpdateOne) RemoveCalledByIDs(ids ...int) *CallgraphNodeUpdateOne {
	cnuo.mutation.RemoveCalledByIDs(ids...)
	return cnuo
}

// RemoveCalledBy removes "called_by" edges to CallgraphNode entities.
func (cnuo *CallgraphNodeUpdateOne) RemoveCalledBy(c ...*CallgraphNode) *CallgraphNodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.RemoveCalledByIDs(ids...)
}

// ClearCallsTo clears all "calls_to" edges to the CallgraphNode entity.
func (cnuo *CallgraphNodeUpdateOne) ClearCallsTo() *CallgraphNodeUpdateOne {
	cnuo.mutation.ClearCallsTo()
	return cnuo
}

// RemoveCallsToIDs removes the "calls_to" edge to CallgraphNode entities by IDs.
func (cnuo *CallgraphNodeUpdateOne) RemoveCallsToIDs(ids ...int) *CallgraphNodeUpdateOne {
	cnuo.mutation.RemoveCallsToIDs(ids...)
	return cnuo
}

// RemoveCallsTo removes "calls_to" edges to CallgraphNode entities.
func (cnuo *CallgraphNodeUpdateOne) RemoveCallsTo(c ...*CallgraphNode) *CallgraphNodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.RemoveCallsToIDs(ids...)
}

// Where appends a list predicates to the CallgraphNodeUpdate builder.
func (cnuo *CallgraphNodeUpdateOne) Where(ps ...predicate.CallgraphNode) *CallgraphNodeUpdateOne {
	cnuo.mutation.Where(ps...)
	return cnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnuo *CallgraphNodeUpdateOne) Select(field string, fields ...string) *CallgraphNodeUpdateOne {
	cnuo.fields = append([]string{field}, fields...)
	return cnuo
}

// Save executes the query and returns the updated CallgraphNode entity.
func (cnuo *CallgraphNodeUpdateOne) Save(ctx context.Context) (*CallgraphNode, error) {
	return withHooks(ctx, cnuo.sqlSave, cnuo.mutation, cnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnuo *CallgraphNodeUpdateOne) SaveX(ctx context.Context) *CallgraphNode {
	node, err := cnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnuo *CallgraphNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := cnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnuo *CallgraphNodeUpdateOne) ExecX(ctx context.Context) {
	if err := cnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cnuo *CallgraphNodeUpdateOne) sqlSave(ctx context.Context) (_node *CallgraphNode, err error) {
	_spec := sqlgraph.NewUpdateSpec(callgraphnode.Table, callgraphnode.Columns, sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt))
	id, ok := cnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CallgraphNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, callgraphnode.FieldID)
		for _, f := range fields {
			if !callgraphnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != callgraphnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cnuo.mutation.CalledByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.RemovedCalledByIDs(); len(nodes) > 0 && !cnuo.mutation.CalledByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.CalledByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   callgraphnode.CalledByTable,
			Columns: callgraphnode.CalledByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnuo.mutation.CallsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.RemovedCallsToIDs(); len(nodes) > 0 && !cnuo.mutation.CallsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.CallsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   callgraphnode.CallsToTable,
			Columns: callgraphnode.CallsToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callgraphnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CallgraphNode{config: cnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callgraphnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cnuo.mutation.done = true
	return _node, nil
}
