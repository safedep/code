// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/ent/codefile"
	"github.com/safedep/code/ent/predicate"
	"github.com/safedep/code/ent/usageevidence"
)

// UsageEvidenceQuery is the builder for querying UsageEvidence entities.
type UsageEvidenceQuery struct {
	config
	ctx          *QueryContext
	order        []usageevidence.OrderOption
	inters       []Interceptor
	predicates   []predicate.UsageEvidence
	withCodeFile *CodeFileQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UsageEvidenceQuery builder.
func (ueq *UsageEvidenceQuery) Where(ps ...predicate.UsageEvidence) *UsageEvidenceQuery {
	ueq.predicates = append(ueq.predicates, ps...)
	return ueq
}

// Limit the number of records to be returned by this query.
func (ueq *UsageEvidenceQuery) Limit(limit int) *UsageEvidenceQuery {
	ueq.ctx.Limit = &limit
	return ueq
}

// Offset to start from.
func (ueq *UsageEvidenceQuery) Offset(offset int) *UsageEvidenceQuery {
	ueq.ctx.Offset = &offset
	return ueq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ueq *UsageEvidenceQuery) Unique(unique bool) *UsageEvidenceQuery {
	ueq.ctx.Unique = &unique
	return ueq
}

// Order specifies how the records should be ordered.
func (ueq *UsageEvidenceQuery) Order(o ...usageevidence.OrderOption) *UsageEvidenceQuery {
	ueq.order = append(ueq.order, o...)
	return ueq
}

// QueryCodeFile chains the current query on the "code_file" edge.
func (ueq *UsageEvidenceQuery) QueryCodeFile() *CodeFileQuery {
	query := (&CodeFileClient{config: ueq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ueq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ueq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usageevidence.Table, usageevidence.FieldID, selector),
			sqlgraph.To(codefile.Table, codefile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usageevidence.CodeFileTable, usageevidence.CodeFileColumn),
		)
		fromU = sqlgraph.SetNeighbors(ueq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UsageEvidence entity from the query.
// Returns a *NotFoundError when no UsageEvidence was found.
func (ueq *UsageEvidenceQuery) First(ctx context.Context) (*UsageEvidence, error) {
	nodes, err := ueq.Limit(1).All(setContextOp(ctx, ueq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usageevidence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) FirstX(ctx context.Context) *UsageEvidence {
	node, err := ueq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UsageEvidence ID from the query.
// Returns a *NotFoundError when no UsageEvidence ID was found.
func (ueq *UsageEvidenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ueq.Limit(1).IDs(setContextOp(ctx, ueq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usageevidence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) FirstIDX(ctx context.Context) int {
	id, err := ueq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UsageEvidence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UsageEvidence entity is found.
// Returns a *NotFoundError when no UsageEvidence entities are found.
func (ueq *UsageEvidenceQuery) Only(ctx context.Context) (*UsageEvidence, error) {
	nodes, err := ueq.Limit(2).All(setContextOp(ctx, ueq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usageevidence.Label}
	default:
		return nil, &NotSingularError{usageevidence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) OnlyX(ctx context.Context) *UsageEvidence {
	node, err := ueq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UsageEvidence ID in the query.
// Returns a *NotSingularError when more than one UsageEvidence ID is found.
// Returns a *NotFoundError when no entities are found.
func (ueq *UsageEvidenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ueq.Limit(2).IDs(setContextOp(ctx, ueq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usageevidence.Label}
	default:
		err = &NotSingularError{usageevidence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ueq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UsageEvidences.
func (ueq *UsageEvidenceQuery) All(ctx context.Context) ([]*UsageEvidence, error) {
	ctx = setContextOp(ctx, ueq.ctx, ent.OpQueryAll)
	if err := ueq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UsageEvidence, *UsageEvidenceQuery]()
	return withInterceptors[[]*UsageEvidence](ctx, ueq, qr, ueq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) AllX(ctx context.Context) []*UsageEvidence {
	nodes, err := ueq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UsageEvidence IDs.
func (ueq *UsageEvidenceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ueq.ctx.Unique == nil && ueq.path != nil {
		ueq.Unique(true)
	}
	ctx = setContextOp(ctx, ueq.ctx, ent.OpQueryIDs)
	if err = ueq.Select(usageevidence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) IDsX(ctx context.Context) []int {
	ids, err := ueq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ueq *UsageEvidenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ueq.ctx, ent.OpQueryCount)
	if err := ueq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ueq, querierCount[*UsageEvidenceQuery](), ueq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) CountX(ctx context.Context) int {
	count, err := ueq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ueq *UsageEvidenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ueq.ctx, ent.OpQueryExist)
	switch _, err := ueq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ueq *UsageEvidenceQuery) ExistX(ctx context.Context) bool {
	exist, err := ueq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UsageEvidenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ueq *UsageEvidenceQuery) Clone() *UsageEvidenceQuery {
	if ueq == nil {
		return nil
	}
	return &UsageEvidenceQuery{
		config:       ueq.config,
		ctx:          ueq.ctx.Clone(),
		order:        append([]usageevidence.OrderOption{}, ueq.order...),
		inters:       append([]Interceptor{}, ueq.inters...),
		predicates:   append([]predicate.UsageEvidence{}, ueq.predicates...),
		withCodeFile: ueq.withCodeFile.Clone(),
		// clone intermediate query.
		sql:  ueq.sql.Clone(),
		path: ueq.path,
	}
}

// WithCodeFile tells the query-builder to eager-load the nodes that are connected to
// the "code_file" edge. The optional arguments are used to configure the query builder of the edge.
func (ueq *UsageEvidenceQuery) WithCodeFile(opts ...func(*CodeFileQuery)) *UsageEvidenceQuery {
	query := (&CodeFileClient{config: ueq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ueq.withCodeFile = query
	return ueq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageHint string `json:"PackageHint,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UsageEvidence.Query().
//		GroupBy(usageevidence.FieldPackageHint).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ueq *UsageEvidenceQuery) GroupBy(field string, fields ...string) *UsageEvidenceGroupBy {
	ueq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UsageEvidenceGroupBy{build: ueq}
	grbuild.flds = &ueq.ctx.Fields
	grbuild.label = usageevidence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageHint string `json:"PackageHint,omitempty"`
//	}
//
//	client.UsageEvidence.Query().
//		Select(usageevidence.FieldPackageHint).
//		Scan(ctx, &v)
func (ueq *UsageEvidenceQuery) Select(fields ...string) *UsageEvidenceSelect {
	ueq.ctx.Fields = append(ueq.ctx.Fields, fields...)
	sbuild := &UsageEvidenceSelect{UsageEvidenceQuery: ueq}
	sbuild.label = usageevidence.Label
	sbuild.flds, sbuild.scan = &ueq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UsageEvidenceSelect configured with the given aggregations.
func (ueq *UsageEvidenceQuery) Aggregate(fns ...AggregateFunc) *UsageEvidenceSelect {
	return ueq.Select().Aggregate(fns...)
}

func (ueq *UsageEvidenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ueq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ueq); err != nil {
				return err
			}
		}
	}
	for _, f := range ueq.ctx.Fields {
		if !usageevidence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ueq.path != nil {
		prev, err := ueq.path(ctx)
		if err != nil {
			return err
		}
		ueq.sql = prev
	}
	return nil
}

func (ueq *UsageEvidenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UsageEvidence, error) {
	var (
		nodes       = []*UsageEvidence{}
		withFKs     = ueq.withFKs
		_spec       = ueq.querySpec()
		loadedTypes = [1]bool{
			ueq.withCodeFile != nil,
		}
	)
	if ueq.withCodeFile != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usageevidence.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UsageEvidence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UsageEvidence{config: ueq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ueq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ueq.withCodeFile; query != nil {
		if err := ueq.loadCodeFile(ctx, query, nodes, nil,
			func(n *UsageEvidence, e *CodeFile) { n.Edges.CodeFile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ueq *UsageEvidenceQuery) loadCodeFile(ctx context.Context, query *CodeFileQuery, nodes []*UsageEvidence, init func(*UsageEvidence), assign func(*UsageEvidence, *CodeFile)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UsageEvidence)
	for i := range nodes {
		if nodes[i].usage_evidence_code_file == nil {
			continue
		}
		fk := *nodes[i].usage_evidence_code_file
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(codefile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "usage_evidence_code_file" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ueq *UsageEvidenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ueq.querySpec()
	_spec.Node.Columns = ueq.ctx.Fields
	if len(ueq.ctx.Fields) > 0 {
		_spec.Unique = ueq.ctx.Unique != nil && *ueq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ueq.driver, _spec)
}

func (ueq *UsageEvidenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usageevidence.Table, usageevidence.Columns, sqlgraph.NewFieldSpec(usageevidence.FieldID, field.TypeInt))
	_spec.From = ueq.sql
	if unique := ueq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ueq.path != nil {
		_spec.Unique = true
	}
	if fields := ueq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usageevidence.FieldID)
		for i := range fields {
			if fields[i] != usageevidence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ueq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ueq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ueq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ueq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ueq *UsageEvidenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ueq.driver.Dialect())
	t1 := builder.Table(usageevidence.Table)
	columns := ueq.ctx.Fields
	if len(columns) == 0 {
		columns = usageevidence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ueq.sql != nil {
		selector = ueq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ueq.ctx.Unique != nil && *ueq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ueq.predicates {
		p(selector)
	}
	for _, p := range ueq.order {
		p(selector)
	}
	if offset := ueq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ueq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UsageEvidenceGroupBy is the group-by builder for UsageEvidence entities.
type UsageEvidenceGroupBy struct {
	selector
	build *UsageEvidenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uegb *UsageEvidenceGroupBy) Aggregate(fns ...AggregateFunc) *UsageEvidenceGroupBy {
	uegb.fns = append(uegb.fns, fns...)
	return uegb
}

// Scan applies the selector query and scans the result into the given value.
func (uegb *UsageEvidenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uegb.build.ctx, ent.OpQueryGroupBy)
	if err := uegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UsageEvidenceQuery, *UsageEvidenceGroupBy](ctx, uegb.build, uegb, uegb.build.inters, v)
}

func (uegb *UsageEvidenceGroupBy) sqlScan(ctx context.Context, root *UsageEvidenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uegb.fns))
	for _, fn := range uegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uegb.flds)+len(uegb.fns))
		for _, f := range *uegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UsageEvidenceSelect is the builder for selecting fields of UsageEvidence entities.
type UsageEvidenceSelect struct {
	*UsageEvidenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ues *UsageEvidenceSelect) Aggregate(fns ...AggregateFunc) *UsageEvidenceSelect {
	ues.fns = append(ues.fns, fns...)
	return ues
}

// Scan applies the selector query and scans the result into the given value.
func (ues *UsageEvidenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ues.ctx, ent.OpQuerySelect)
	if err := ues.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UsageEvidenceQuery, *UsageEvidenceSelect](ctx, ues.UsageEvidenceQuery, ues, ues.inters, v)
}

func (ues *UsageEvidenceSelect) sqlScan(ctx context.Context, root *UsageEvidenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ues.fns))
	for _, fn := range ues.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ues.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ues.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
