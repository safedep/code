// Code generated by ent, DO NOT EDIT.

package callgraphnode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the callgraphnode type in the database.
	Label = "callgraph_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// EdgeCalledBy holds the string denoting the called_by edge name in mutations.
	EdgeCalledBy = "called_by"
	// EdgeCallsTo holds the string denoting the calls_to edge name in mutations.
	EdgeCallsTo = "calls_to"
	// Table holds the table name of the callgraphnode in the database.
	Table = "callgraph_nodes"
	// CalledByTable is the table that holds the called_by relation/edge. The primary key declared below.
	CalledByTable = "callgraph_node_calls_to"
	// CallsToTable is the table that holds the calls_to relation/edge. The primary key declared below.
	CallsToTable = "callgraph_node_calls_to"
)

// Columns holds all SQL columns for callgraphnode fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
}

var (
	// CalledByPrimaryKey and CalledByColumn2 are the table columns denoting the
	// primary key for the called_by relation (M2M).
	CalledByPrimaryKey = []string{"callgraph_node_id", "called_by_id"}
	// CallsToPrimaryKey and CallsToColumn2 are the table columns denoting the
	// primary key for the calls_to relation (M2M).
	CallsToPrimaryKey = []string{"callgraph_node_id", "called_by_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CallgraphNode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCalledByCount orders the results by called_by count.
func ByCalledByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCalledByStep(), opts...)
	}
}

// ByCalledBy orders the results by called_by terms.
func ByCalledBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCalledByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallsToCount orders the results by calls_to count.
func ByCallsToCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallsToStep(), opts...)
	}
}

// ByCallsTo orders the results by calls_to terms.
func ByCallsTo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallsToStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCalledByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CalledByTable, CalledByPrimaryKey...),
	)
}
func newCallsToStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CallsToTable, CallsToPrimaryKey...),
	)
}
