// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/ent/callgraphnode"
)

// CallgraphNode is the model entity for the CallgraphNode schema.
type CallgraphNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallgraphNodeQuery when eager-loading is set.
	Edges        CallgraphNodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CallgraphNodeEdges holds the relations/edges for other nodes in the graph.
type CallgraphNodeEdges struct {
	// CalledBy holds the value of the called_by edge.
	CalledBy []*CallgraphNode `json:"called_by,omitempty"`
	// CallsTo holds the value of the calls_to edge.
	CallsTo []*CallgraphNode `json:"calls_to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CalledByOrErr returns the CalledBy value or an error if the edge
// was not loaded in eager-loading.
func (e CallgraphNodeEdges) CalledByOrErr() ([]*CallgraphNode, error) {
	if e.loadedTypes[0] {
		return e.CalledBy, nil
	}
	return nil, &NotLoadedError{edge: "called_by"}
}

// CallsToOrErr returns the CallsTo value or an error if the edge
// was not loaded in eager-loading.
func (e CallgraphNodeEdges) CallsToOrErr() ([]*CallgraphNode, error) {
	if e.loadedTypes[1] {
		return e.CallsTo, nil
	}
	return nil, &NotLoadedError{edge: "calls_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CallgraphNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case callgraphnode.FieldID:
			values[i] = new(sql.NullInt64)
		case callgraphnode.FieldNamespace:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CallgraphNode fields.
func (cn *CallgraphNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case callgraphnode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cn.ID = int(value.Int64)
		case callgraphnode.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				cn.Namespace = value.String
			}
		default:
			cn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CallgraphNode.
// This includes values selected through modifiers, order, etc.
func (cn *CallgraphNode) Value(name string) (ent.Value, error) {
	return cn.selectValues.Get(name)
}

// QueryCalledBy queries the "called_by" edge of the CallgraphNode entity.
func (cn *CallgraphNode) QueryCalledBy() *CallgraphNodeQuery {
	return NewCallgraphNodeClient(cn.config).QueryCalledBy(cn)
}

// QueryCallsTo queries the "calls_to" edge of the CallgraphNode entity.
func (cn *CallgraphNode) QueryCallsTo() *CallgraphNodeQuery {
	return NewCallgraphNodeClient(cn.config).QueryCallsTo(cn)
}

// Update returns a builder for updating this CallgraphNode.
// Note that you need to call CallgraphNode.Unwrap() before calling this method if this CallgraphNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (cn *CallgraphNode) Update() *CallgraphNodeUpdateOne {
	return NewCallgraphNodeClient(cn.config).UpdateOne(cn)
}

// Unwrap unwraps the CallgraphNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cn *CallgraphNode) Unwrap() *CallgraphNode {
	_tx, ok := cn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CallgraphNode is not a transactional entity")
	}
	cn.config.driver = _tx.drv
	return cn
}

// String implements the fmt.Stringer.
func (cn *CallgraphNode) String() string {
	var builder strings.Builder
	builder.WriteString("CallgraphNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cn.ID))
	builder.WriteString("namespace=")
	builder.WriteString(cn.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// CallgraphNodes is a parsable slice of CallgraphNode.
type CallgraphNodes []*CallgraphNode
