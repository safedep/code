// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/ent/codefile"
)

// CodeFile is the model entity for the CodeFile schema.
type CodeFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FilePath holds the value of the "FilePath" field.
	FilePath string `json:"FilePath,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodeFileQuery when eager-loading is set.
	Edges        CodeFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CodeFileEdges holds the relations/edges for other nodes in the graph.
type CodeFileEdges struct {
	// UsageEvidences holds the value of the usage_evidences edge.
	UsageEvidences []*UsageEvidence `json:"usage_evidences,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsageEvidencesOrErr returns the UsageEvidences value or an error if the edge
// was not loaded in eager-loading.
func (e CodeFileEdges) UsageEvidencesOrErr() ([]*UsageEvidence, error) {
	if e.loadedTypes[0] {
		return e.UsageEvidences, nil
	}
	return nil, &NotLoadedError{edge: "usage_evidences"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodeFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case codefile.FieldID:
			values[i] = new(sql.NullInt64)
		case codefile.FieldFilePath:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodeFile fields.
func (cf *CodeFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codefile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int(value.Int64)
		case codefile.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FilePath", values[i])
			} else if value.Valid {
				cf.FilePath = value.String
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CodeFile.
// This includes values selected through modifiers, order, etc.
func (cf *CodeFile) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// QueryUsageEvidences queries the "usage_evidences" edge of the CodeFile entity.
func (cf *CodeFile) QueryUsageEvidences() *UsageEvidenceQuery {
	return NewCodeFileClient(cf.config).QueryUsageEvidences(cf)
}

// Update returns a builder for updating this CodeFile.
// Note that you need to call CodeFile.Unwrap() before calling this method if this CodeFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CodeFile) Update() *CodeFileUpdateOne {
	return NewCodeFileClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CodeFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CodeFile) Unwrap() *CodeFile {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CodeFile is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CodeFile) String() string {
	var builder strings.Builder
	builder.WriteString("CodeFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("FilePath=")
	builder.WriteString(cf.FilePath)
	builder.WriteByte(')')
	return builder.String()
}

// CodeFiles is a parsable slice of CodeFile.
type CodeFiles []*CodeFile
