go - minio
Total -> 442 files
160 files -> 17 minutes

python - django-DefectDojo
Total -> 740 files, start at 1:27 pm
160 files -> 19 minutes

** sometimes it identifies a capability solely based on import, however it can be proven wrong if its not actually used

** some useless capabilities introduced by LLM -
string:manipulation
random:management
time:management

** minified json files from prettier are not at all relevant

** incorrect identification & unnecessary introduction of new capabilities

{
                    "capability_id": "3rd_party:aws:s3",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "import \"github.com/minio/madmin-go/v3\""
                        },
                        {
                            "line_no": 19,
                            "line_content": "import \"github.com/minio/minio/internal/bucket/replication\""
                        }
                    ]
                }

** misunderstood file manipulation & file path resolution -
"scancode-workbench-results/src/utils/paths.ts": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "export const figureOutDefaultSqliteFilePath = (jsonFilePath: string) =>"
                        },
                        {
                            "line_no": 2,
                            "line_content": "jsonFilePath.substring(0, jsonFilePath.lastIndexOf(\".\")) + \".sqlite\";"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "export function getPathDepth(filePath: string) {"
                        },
                        {
                            "line_no": 6,
                            "line_content": "const separatorRegExp = /[\\\\/]/g;"
                        },
                        {
                            "line_no": 7,
                            "line_content": "const depth = (filePath.match(separatorRegExp) || []).length;"
                        }
                    ]
                }
            ]
        },

** data:serialization is not correctly understood or used when nothing else is found-
eg. this is only file content -
export const QUERY_KEYS = {
  PACKAGE: "pkg-identifier",
  LICENSE_DETECTION: "license-identifier",
  LICENSE_CLUE_EXPRESSION: "license-clue-expression",
  LICENSE_CLUE_FILE_PATH: "license-clue-file-path",
  LICENSE_CLUE_FILE_CLUE_IDX: "license-clue-file-clue-idx", // Index at which clue is found in the file/resource
};

still it gives -
"scancode-workbench-results/src/constants/params.ts": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "export const QUERY_KEYS = {"
                        },
                        {
                            "line_no": 2,
                            "line_content": "PACKAGE: \"pkg-identifier\","
                        },
                        {
                            "line_no": 3,
                            "line_content": "LICENSE_DETECTION: \"license-identifier\","
                        },
                        {
                            "line_no": 4,
                            "line_content": "LICENSE_CLUE_EXPRESSION: \"license-clue-expression\","
                        },
                        {
                            "line_no": 5,
                            "line_content": "LICENSE_CLUE_FILE_PATH: \"license-clue-file-path\","
                        },
                        {
                            "line_no": 6,
                            "line_content": "LICENSE_CLUE_FILE_CLUE_IDX: \"license-clue-file-clue-idx\""
                        }
                    ]
                }
            ]
        },

                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "import { ROUTES } from \"./constants/routes\";"
                        }
                    ]
                }
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "var util = _interopDefault(require('util'));"
                        }
                    ]
                }
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const s=new SyntaxError(t+\" (\"+e.start.line+\":\"+e.start.column+\")\");"
                        },
                        {
                            "line_no": 34,
                            "line_content": "var i={sourceType:\"script\",sourceFilename:void 0,startLine:1,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowSuperOutsideMethod:!1,plugins:[],strictMode:null,ranges:!1,tokens:!1};"
                        }
                    ]
                }


                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "import io"
                        }
                    ]
                }
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const { version } = require(\"./package.json\");"
                        },
                        {
                            "line_no": 4,
                            "line_content": "const { addMetaDataFilesToPackage, buildPackageArchive } = require(\"./package-utils\");"
                        }
                    ]
                }


** bit unstable with web framework related capabilities
{
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.core.exceptions import PermissionDenied"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django.http import HttpRequest, HttpResponse"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django.shortcuts import render"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django.views import View"
                        }
                    ]
                }
                
{
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 9,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },