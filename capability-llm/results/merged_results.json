{
    "files": {
        "samples-results/sqlite.py": {
            "capabilities": [
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import sqlite3"
                        },
                        {
                            "line_no": 3,
                            "line_content": "conn = sqlite3.connect('example.db')"
                        },
                        {
                            "line_no": 4,
                            "line_content": "cursor = conn.cursor()"
                        },
                        {
                            "line_no": 5,
                            "line_content": "cursor.execute(\"CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY, data TEXT)\")"
                        },
                        {
                            "line_no": 6,
                            "line_content": "cursor.execute(\"INSERT INTO test (data) VALUES (?)\", (\"Hello, World!\",))"
                        },
                        {
                            "line_no": 7,
                            "line_content": "conn.commit()"
                        },
                        {
                            "line_no": 8,
                            "line_content": "conn.close()"
                        }
                    ]
                }
            ]
        },
        "samples-results/empty.py": {
            "capabilities": []
        },
        "samples-results/cloudLlm.js": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "openai.apiKey = process.env.OPENAI_API_KEY;"
                        }
                    ]
                },
                {
                    "capability_id": "aws:s3",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "const s3 = new AWS.S3();"
                        },
                        {
                            "line_no": 15,
                            "line_content": "await s3.putObject(params).promise();"
                        }
                    ]
                },
                {
                    "capability_id": "gcp:storage",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "const gcs = new Storage();"
                        },
                        {
                            "line_no": 26,
                            "line_content": "await gcs.bucket(bucketName).upload(filename);"
                        }
                    ]
                },
                {
                    "capability_id": "ml:llm",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "const openai = require('openai');"
                        },
                        {
                            "line_no": 6,
                            "line_content": "openai.apiKey = process.env.OPENAI_API_KEY;"
                        }
                    ]
                }
            ]
        },
        "samples-results/netFs.js": {
            "capabilities": [
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "https.get('https://api.example.com/data-fss', (resp) => {"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "resp.on('data', (chunk) => {"
                        },
                        {
                            "line_no": 10,
                            "line_content": "resp.on('end', () => {"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "fs.writeFileSync('output.txt', data);"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/crowd_server.py": {
            "capabilities": [
                {
                    "capability_id": "ml:framework",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import ultralytics"
                        }
                    ]
                },
                {
                    "capability_id": "ml:inference",
                    "evidence": [
                        {
                            "line_no": 21,
                            "line_content": "model = ultralytics.YOLO('yolov8x.pt')"
                        },
                        {
                            "line_no": 51,
                            "line_content": "results = model(\"rtmp://127.0.0.1/mystream\", stream=True, save=False)"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from fastapi import FastAPI, WebSocket, WebSocketDisconnect"
                        },
                        {
                            "line_no": 10,
                            "line_content": "app = FastAPI()"
                        }
                    ]
                },
                {
                    "capability_id": "network:sockets",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from fastapi import FastAPI, WebSocket, WebSocketDisconnect"
                        },
                        {
                            "line_no": 35,
                            "line_content": "class WebSocketConnection:"
                        }
                    ]
                },
                {
                    "capability_id": "ml:framework",
                    "evidence": [
                        {
                            "line_no": 22,
                            "line_content": "print(f\"YOLO model loaded !\")"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 51,
                            "line_content": "results = model(\"rtmp://127.0.0.1/mystream\", stream=True, save=False)"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "app = FastAPI()"
                        },
                        {
                            "line_no": 12,
                            "line_content": "app.add_middleware("
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/chat-server/main.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "load_dotenv()"
                        },
                        {
                            "line_no": 9,
                            "line_content": "PORT = os.getenv('FLASK_RUN_PORT') or 5002"
                        },
                        {
                            "line_no": 10,
                            "line_content": "NGROK_AUTHTOKEN = os.getenv('NGROK_AUTHTOKEN')"
                        },
                        {
                            "line_no": 11,
                            "line_content": "NGROK_DOMAIN = os.environ.get('NGROK_DOMAIN')"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "tunnel_url = ngrok.connect(PORT, bind_tls=True, hostname=NGROK_DOMAIN).public_url"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "app = Flask(__name__)"
                        },
                        {
                            "line_no": 23,
                            "line_content": "@app.route(\"/whatsapp\", methods=[\"GET\", \"POST\"])"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "print(f\"Ingress established at {tunnel_url}\")"
                        },
                        {
                            "line_no": 26,
                            "line_content": "print(request.values)"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/chat-server/utils.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import string"
                        }
                    ]
                },
                {
                    "capability_id": "data:randomization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import random"
                        },
                        {
                            "line_no": 9,
                            "line_content": "return ''.join(random.choice(characters) for _ in range(length))"
                        }
                    ]
                },
                {
                    "capability_id": "string:manipulation",
                    "evidence": [
                        {
                            "line_no": 22,
                            "line_content": "lowercase_input = input_string.lower()"
                        },
                        {
                            "line_no": 26,
                            "line_content": "if init_str.lower() in lowercase_input:"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/src/establish_db_connection.py": {
            "capabilities": [
                {
                    "capability_id": "db:mongodb",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from pymongo import MongoClient"
                        },
                        {
                            "line_no": 5,
                            "line_content": "client = MongoClient(f\"mongodb+srv://{USERNAME}:{PASSWORD}@{DB_URL}/?retryWrites=true&w=majority\")"
                        },
                        {
                            "line_no": 9,
                            "line_content": "database = client.RailRakshak"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from src.config import DB_URL, USERNAME, PASSWORD"
                        }
                    ]
                },
                {
                    "capability_id": "network:dns",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "client = MongoClient(f\"mongodb+srv://{USERNAME}:{PASSWORD}@{DB_URL}/?retryWrites=true&w=majority\")"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/src/database/auth_db.py": {
            "capabilities": [
                {
                    "capability_id": "db:mongodb",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "admins = database.Admins"
                        },
                        {
                            "line_no": 5,
                            "line_content": "admins.create_index([(\"id\", ASCENDING)], unique=True)"
                        },
                        {
                            "line_no": 7,
                            "line_content": "staffs = database.Staffs"
                        },
                        {
                            "line_no": 8,
                            "line_content": "staffs.create_index([(\"id\", ASCENDING)], unique=True)"
                        },
                        {
                            "line_no": 10,
                            "line_content": "users = database.Users"
                        },
                        {
                            "line_no": 11,
                            "line_content": "users.create_index([(\"mobile\", ASCENDING)], unique=True)"
                        },
                        {
                            "line_no": 20,
                            "line_content": "document = admins.find_one({\"id\": admin.id})"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "pwd_context = CryptContext(schemes=[\"bcrypt\"],deprecated=\"auto\")"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "id += chr(random.randint(65,90))"
                        },
                        {
                            "line_no": 18,
                            "line_content": "id += str(random.randint(0,9))"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/src/endpoints/incidents_endp.py": {
            "capabilities": [
                {
                    "capability_id": "aws:s3",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "s3 = boto3.resource("
                        },
                        {
                            "line_no": 20,
                            "line_content": "bucket = s3.Bucket(S3_BUCKET_NAME)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from src.config import AWS_KEY, SECRET_KEY_AWS, S3_BUCKET_NAME"
                        }
                    ]
                },
                {
                    "capability_id": "ml:inference",
                    "evidence": [
                        {
                            "line_no": 23,
                            "line_content": "model = YOLO(\"./assets/last.pt\")"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "router = APIRouter("
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from src.database.notifications_db import create_notification"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from src.database.incident_db import (create_incident, fetch_all_incidents, fetch_incidents_by_dept_and_station, delete_incident_by_id)"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "import io"
                        }
                    ]
                },
                {
                    "capability_id": "random:management",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "import random"
                        },
                        {
                            "line_no": 32,
                            "line_content": "if random.random() < 0.5:"
                        }
                    ]
                }
            ]
        },
        "railrakshak-results/src/models/tasks_model.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import datetime"
                        },
                        {
                            "line_no": 15,
                            "line_content": "last_modified: str = Form(default=datetime.datetime.now())"
                        },
                        {
                            "line_no": 16,
                            "line_content": "created_at: str = Form(default=datetime.datetime.now())"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from fastapi import Form"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from pydantic import BaseModel"
                        },
                        {
                            "line_no": 6,
                            "line_content": "class Task(BaseModel):"
                        },
                        {
                            "line_no": 27,
                            "line_content": "class IncidentToTask(BaseModel):"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/webpack.rules.js": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "use: \"node-loader\""
                        },
                        {
                            "line_no": 23,
                            "line_content": "loader: \"url-loader\""
                        },
                        {
                            "line_no": 34,
                            "line_content": "loader: \"@vercel/webpack-asset-relocator-loader\""
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 25,
                            "line_content": "options: { limit: 8192 }"
                        },
                        {
                            "line_no": 36,
                            "line_content": "outputAssetBase: \"native_modules\""
                        }
                    ]
                },
                {
                    "capability_id": "threading:management",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "use: { loader: \"worker-loader\" }"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 47,
                            "line_content": "use: { loader: \"ts-loader\" }"
                        },
                        {
                            "line_no": 55,
                            "line_content": "use: [\"@svgr/webpack\"]"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/forge.config.js": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const { version } = require(\"./package.json\");"
                        },
                        {
                            "line_no": 4,
                            "line_content": "const { addMetaDataFilesToPackage, buildPackageArchive } = require(\"./package-utils\");"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const { version } = require(\"./package.json\");"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "const ARCHIVE_DIR = \"dist\";"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "const MetaDataFiles = ["
                        },
                        {
                            "line_no": 12,
                            "line_content": "\"workbench.ABOUT\""
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/webpack.plugins.js": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "const ForkTsCheckerWebpackPlugin = require(\"fork-ts-checker-webpack-plugin\");"
                        }
                    ]
                },
                {
                    "capability_id": "devops:ci_cd",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "module.exports = [new ForkTsCheckerWebpackPlugin()];"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/main.ts": {
            "capabilities": [
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import sqlite3 from \"sqlite3\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "import getTemplate from \"./mainMenu\";"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "const isDev = !app.isPackaged;"
                        }
                    ]
                },
                {
                    "capability_id": "process:management",
                    "evidence": [
                        {
                            "line_no": 30,
                            "line_content": "if (require(\"electron-squirrel-startup\")) {"
                        },
                        {
                            "line_no": 31,
                            "line_content": "app.quit();"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 38,
                            "line_content": "app.getAppPath()"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/App.tsx": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import React from \"react\";"
                        },
                        {
                            "line_no": 2,
                            "line_content": "import { HashRouter, Route, Routes } from \"react-router-dom\";"
                        },
                        {
                            "line_no": 8,
                            "line_content": "import Layout from \"./components/Layout/Layout\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import React from \"react\";"
                        },
                        {
                            "line_no": 7,
                            "line_content": "import DropZone from \"./components/DropZone/DropZone\";"
                        },
                        {
                            "line_no": 25,
                            "line_content": "import CopyrightInfoDash from \"./pages/CopyrightInfoDash/CopyrightInfoDash\";"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "import { ROUTES } from \"./constants/routes\";"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/renderer.ts": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "import { renderReactApp } from \"./reactApp\";"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "* To learn more about the differences between the \"main\" and the \"renderer\" context in"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "* By default, Node.js integration in this file is disabled. When enabling Node.js integration"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/mainActions.ts": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "dialog.showSaveDialog(mainWindow, {"
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 22,
                            "line_content": "filters: ["
                        },
                        {
                            "line_no": 24,
                            "line_content": "extensions: [\"sqlite\"],"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "const defaultSqlitePath = figureOutDefaultSqliteFilePath(jsonFilePath);"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/contexts/dbContext.tsx": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import * as electronFs from \"fs\""
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import moment from \"moment\""
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import React, { createContext, useContext, useEffect, useState } from \"react\""
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import { useNavigate } from \"react-router-dom\""
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import { toast } from \"react-toastify\""
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import packageJson from \"../../package.json\""
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "import { WorkbenchDB } from \"../services/workbenchDB\""
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "import { isSqliteSchemaOutdated } from \"../utils/checks\""
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/constants/params.ts": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "export const QUERY_KEYS = {"
                        },
                        {
                            "line_no": 2,
                            "line_content": "PACKAGE: \"pkg-identifier\","
                        },
                        {
                            "line_no": 3,
                            "line_content": "LICENSE_DETECTION: \"license-identifier\","
                        },
                        {
                            "line_no": 4,
                            "line_content": "LICENSE_CLUE_EXPRESSION: \"license-clue-expression\","
                        },
                        {
                            "line_no": 5,
                            "line_content": "LICENSE_CLUE_FILE_PATH: \"license-clue-file-path\","
                        },
                        {
                            "line_no": 6,
                            "line_content": "LICENSE_CLUE_FILE_CLUE_IDX: \"license-clue-file-clue-idx\""
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/constants/IpcConnection.ts": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "JSON: \"open-json-file\""
                        },
                        {
                            "line_no": 34,
                            "line_content": "jsonFilePath: string;"
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "SQLITE_PATH_FOR_JSON: \"choose-sqlite-path-for-json-file\""
                        },
                        {
                            "line_no": 15,
                            "line_content": "SQLITE: \"open-sqlite-file\""
                        },
                        {
                            "line_no": 16,
                            "line_content": "SAVE_SQLITE: \"save-sqlite-file\""
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "SAVE_SQLITE: \"save-sqlite-file\""
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/utils/logger.ts": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "const currentTime = new Date().getTime();"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "if (debugClasses.has(debugClass)) console.log(...args);"
                        },
                        {
                            "line_no": 18,
                            "line_content": "console.log(id, ...args);"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const debugClasses = new Set(["
                        },
                        {
                            "line_no": 11,
                            "line_content": "const lastLogs: { [key: string]: number } = {};"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/utils/paths.ts": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "export const figureOutDefaultSqliteFilePath = (jsonFilePath: string) =>"
                        },
                        {
                            "line_no": 2,
                            "line_content": "jsonFilePath.substring(0, jsonFilePath.lastIndexOf(\".\")) + \".sqlite\";"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "export function getPathDepth(filePath: string) {"
                        },
                        {
                            "line_no": 6,
                            "line_content": "const separatorRegExp = /[\\\\/]/g;"
                        },
                        {
                            "line_no": 7,
                            "line_content": "const depth = (filePath.match(separatorRegExp) || []).length;"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/utils/parsers.ts": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "export function parseIfValidJson(str: unknown) {"
                        },
                        {
                            "line_no": 10,
                            "line_content": "const parsedObj = JSON.parse(str);"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/pages/PageNotFound.tsx": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import React from \"react\";"
                        },
                        {
                            "line_no": 2,
                            "line_content": "import { Link } from \"react-router-dom\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "const PageNotFound = () => {"
                        },
                        {
                            "line_no": 7,
                            "line_content": "  return ("
                        },
                        {
                            "line_no": 8,
                            "line_content": "    <div className=\"text-center\">"
                        },
                        {
                            "line_no": 22,
                            "line_content": "};"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/pages/ScanInfo/InfoEntry.tsx": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import React, { FunctionComponent, PropsWithChildren } from \"react\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "if (!props.show || !props.children) return <></>;"
                        },
                        {
                            "line_no": 9,
                            "line_content": "<tr>"
                        },
                        {
                            "line_no": 10,
                            "line_content": "<td>{props.name}</td>"
                        },
                        {
                            "line_no": 11,
                            "line_content": "<td>{props.children}</td>"
                        },
                        {
                            "line_no": 12,
                            "line_content": "</tr>"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/pages/ScanInfo/ScanInfo.tsx": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import ReactJson from \"@microlink/react-json-view\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import React from \"react\";"
                        }
                    ]
                },
                {
                    "capability_id": "db:nosql",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import { useWorkbenchDB } from \"../../contexts/dbContext\";"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/services/historyStore.ts": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import moment from \"moment\";"
                        },
                        {
                            "line_no": 10,
                            "line_content": "return Number(moment(b.opened_at)) - Number(moment(a.opened_at));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "const history = JSON.parse(window.localStorage.getItem(HISTORY_STORE_KEY) || \"[]\") as HistoryItem[];"
                        },
                        {
                            "line_no": 13,
                            "line_content": "return JSON.parse(window.localStorage.getItem(HISTORY_STORE_KEY) || \"[]\") as HistoryItem[];"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "window.localStorage.getItem(HISTORY_STORE_KEY)"
                        },
                        {
                            "line_no": 7,
                            "line_content": "const history = JSON.parse(window.localStorage.getItem(HISTORY_STORE_KEY) || \"[]\") as HistoryItem[];"
                        },
                        {
                            "line_no": 13,
                            "line_content": "return JSON.parse(window.localStorage.getItem(HISTORY_STORE_KEY) || \"[]\") as HistoryItem[];"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/services/models/packages.ts": {
            "capabilities": [
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "import { Sequelize, DataTypes, Model } from \"sequelize\";"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "import { jsonDataType } from \"./databaseUtils\";"
                        }
                    ]
                }
            ]
        },
        "scancode-workbench-results/src/services/models/database.ts": {
            "capabilities": [
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "import { Model, ModelStatic, Sequelize } from \"sequelize\";"
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "import { Model, ModelStatic, Sequelize } from \"sequelize\";"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "import headerModel, { HeaderAttributes } from \"./header\";"
                        },
                        {
                            "line_no": 15,
                            "line_content": "import fileModel, { FileAttributes } from \"./file\";"
                        },
                        {
                            "line_no": 16,
                            "line_content": "import licenseExpressionModel, { LicenseExpressionAttributes, OptionalLice"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/manage.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"dojo.settings.settings\")"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django.core.management import execute_from_command_line"
                        },
                        {
                            "line_no": 9,
                            "line_content": "execute_from_command_line(sys.argv)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/wsgi.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from django.core.wsgi import get_wsgi_application"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "from django.urls import get_resolver"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from dojo.settings.settings import ROOT_URLCONF"
                        },
                        {
                            "line_no": 18,
                            "line_content": "# We defer to a DJANGO_SETTINGS_MODULE already in the environment."
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/docker/install_chrome_dependencies.py": {
            "capabilities": [
                {
                    "capability_id": "process:management",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "result = subprocess.run(cmd, cwd=cwd, env=env, capture_"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "This solution is largely based on the Playwright's browser dependencies script at"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "result = subprocess.run(cmd, cwd=cwd, env=env, capture_"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/test_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.common.keys import Keys"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.PARTIAL_LINK_TEXT, \"Ad Hoc Engagement\").click()"
                        },
                        {
                            "line_no": 24,
                            "line_content": "driver.find_element(By.PARTIAL_LINK_TEXT, \"Pen Test\").click()"
                        },
                        {
                            "line_no": 26,
                            "line_content": "driver.find_element(By.ID, \"select_all\").click()"
                        },
                        {
                            "line_no": 29,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu2\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase, on_exception_html_source_logger"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from product_test import ProductTest, WaitForPageLoad"
                        },
                        {
                            "line_no": 12,
                            "line_content": "class TestUnitTest(BaseTestCase):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "def test_view_test(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/search_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "class SearchTests(BaseTestCase):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"simple_search\").clear()"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.find_element(By.ID, \"simple_search\").send_keys(\"finding\")"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.ID, \"simple_search_submit\").click()"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver.find_element(By.ID, \"simple_search\").clear()"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.ID, \"simple_search\").send_keys(\"vulnerability_id:CVE-2020-12345\")"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"simple_search_submit\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 11,
                            "line_content": "class SearchTests(BaseTestCase):"
                        },
                        {
                            "line_no": 13,
                            "line_content": "def test_search(self):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "def test_search_vulnerability_id(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/engagement_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 13,
                            "line_content": "class EngagementTest(BaseTestCase):"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 27,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 33,
                            "line_content": "driver = self.driver"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 13,
                            "line_content": "class EngagementTest(BaseTestCase):"
                        },
                        {
                            "line_no": 17,
                            "line_content": "self.assertIn(\"edited test engagement</a>\", driver.page_source)"
                        },
                        {
                            "line_no": 23,
                            "line_content": "self.assertNotIn(\"edited test engagement</a>\", driver.page_source)"
                        },
                        {
                            "line_no": 29,
                            "line_content": "self.assertIn(\"edited test engagement</a>\", driver.page_source)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/finding_test.py": {
            "capabilities": [
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 15,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import os"
                        },
                        {
                            "line_no": 12,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import sys"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import time"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 19,
                            "line_content": "class FindingTest(BaseTestCase):"
                        },
                        {
                            "line_no": 21,
                            "line_content": "def test_list_findings_all(self):"
                        },
                        {
                            "line_no": 22,
                            "line_content": "return self.test_list_findings(\"finding\")"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/check_various_pages.py": {
            "capabilities": [
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "driver.get(self.base_url + \"user\")"
                        },
                        {
                            "line_no": 13,
                            "line_content": "driver.get(self.base_url + \"calendar\")"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \"input.btn.btn-primary\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "class VariousPagesTest(BaseTestCase):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "suite = unittest.TestSuite()"
                        },
                        {
                            "line_no": 27,
                            "line_content": "runner = unittest.TextTestRunner(descriptions=True, failfast=True, verbosity=2)"
                        },
                        {
                            "line_no": 28,
                            "line_content": "ret = not runner.run(suite()).wasSuccessful()"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/report_builder_test.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.action_chains import ActionChains"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 19,
                            "line_content": "in_use = driver.find_element(By.ID, \"sortable2\")"
                        },
                        {
                            "line_no": 20,
                            "line_content": "available_widgets = driver.find_element(By.ID, \"sortable1\").find_elements(By.TAG_NAME, \"li\")"
                        },
                        {
                            "line_no": 21,
                            "line_content": "ActionChains(driver).drag_and_drop(widget, in_use).perform()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 16,
                            "line_content": "class ReportBuilderTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_member_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.get(self.base_url + \"user\")"
                        },
                        {
                            "line_no": 25,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"propersahm\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from user_test import UserTest"
                        },
                        {
                            "line_no": 17,
                            "line_content": "class ProductMemberTest(BaseTestCase):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "def test_user_add_product_member(self):"
                        }
                    ]
                },
                {
                    "capability_id": "logging:usage",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 15,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/group_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.common.exceptions import NoSuchElementException, TimeoutException"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.get(self.base_url + \"group\")"
                        },
                        {
                            "line_no": 17,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"New Group\").click()"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.ID, \"id_name\").clear()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"id_name\").send_keys(\"Group Name\")"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 11,
                            "line_content": "class GroupTest(BaseTestCase):"
                        },
                        {
                            "line_no": 13,
                            "line_content": "def test_create_group(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/ibm_appscan_test.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "# Username and password will be gotten from environ"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"products_wrapper\")"
                        },
                        {
                            "line_no": 24,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"QA Test\").click()"
                        },
                        {
                            "line_no": 26,
                            "line_content": "driver.find_element(By.PARTIAL_LINK_TEXT, \"Findings\").click()"
                        },
                        {
                            "line_no": 28,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"Import Scan Results\").click("
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "class IBMAppScanTest(BaseTestCase):"
                        },
                        {
                            "line_no": 16,
                            "line_content": "def test_import_ibm_app_scan_result(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/notes_test.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "import time"
                        },
                        {
                            "line_no": 17,
                            "line_content": "time.sleep(0.5)"
                        },
                        {
                            "line_no": 25,
                            "line_content": "time.sleep(1)"
                        },
                        {
                            "line_no": 30,
                            "line_content": "time.sleep(1)"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 13,
                            "line_content": "elems = driver.find_elements(By.NAME, \"collapsible\")"
                        },
                        {
                            "line_no": 20,
                            "line_content": "if not driver.find_element(By.ID, \"add_note\").is_displayed():"
                        },
                        {
                            "line_no": 21,
                            "line_content": "self.uncollapse_all(driver)"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.ID, \"id_entry\").send_keys(\"Test public note\")"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"add_note\").click()"
                        },
                        {
                            "line_no": 24,
                            "line_content": "if not driver.find_element(By.ID, \"add_note\").is_displayed():"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 12,
                            "line_content": "class NoteTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 2,
                            "line_content": "import sys"
                        },
                        {
                            "line_no": 10,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/regulations_test.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "driver.find_element(By.ID, \"id_username\").send_keys(os.environ[\"DD_ADMIN_USER\"])"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"id_password\").send_keys(os.environ[\"DD_ADMIN_PASSWORD\"])"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 10,
                            "line_content": "class RegulationTest(BaseTestCase):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.ID, \"id_username\").clear()"
                        },
                        {
                            "line_no": 13,
                            "line_content": "driver.find_element(By.ID, \"id_password\").clear()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \"button.btn.btn-success\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "driver.get(self.base_url + \"login\")"
                        },
                        {
                            "line_no": 26,
                            "line_content": "driver.get(self.base_url + \"regulations\")"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 24,
                            "line_content": "def test_create_regulation(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.common.keys import Keys"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 18,
                            "line_content": "self.old_page = self.browser.find_element(By.TAG_NAME, \"html\")"
                        },
                        {
                            "line_no": 22,
                            "line_content": "new_page = self.browser.find_element(By.TAG_NAME, \"html\")"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import time"
                        },
                        {
                            "line_no": 14,
                            "line_content": "self.timeout = time.time() + timeout"
                        },
                        {
                            "line_no": 27,
                            "line_content": "while time.time() < self.timeout:"
                        },
                        {
                            "line_no": 29,
                            "line_content": "time.sleep(0.2)"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from base_test_class import BaseTestCase, on_exception_html_source_logger, set_suite_settings"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from notifications_test import NotificationTest"
                        },
                        {
                            "line_no": 38,
                            "line_content": "class ProductTest(BaseTestCase):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/base_test_class.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "f = open(\"selenium_page_source.html\", \"w\", encoding=\"utf-8\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "f.writelines(self.driver.page_source)"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium import webdriver"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from selenium.common.exceptions import NoAlertPresentException, NoSuchElementException"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.chrome.options import Options"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support.ui import WebDriverWait"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_type_member_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.get(self.base_url + \"user\")"
                        },
                        {
                            "line_no": 24,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"propersahm\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 12,
                            "line_content": "class ProductTypeMemberTest(BaseTestCase):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "def test_user_add_product_type_member(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/notifications_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from selenium.common.exceptions import NoSuchElementException"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver import ActionChains"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support.ui import WebDriverWait"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 11,
                            "line_content": "class NotificationTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "driver.get(self.base_url + \"system_settings\")"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/note_type_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 12,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 13,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"Add Note Type\").click()"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"id_name\").clear()"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.find_element(By.ID, \"id_name\").send_keys(\"test note type\")"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.ID, \"id_description\").clear()"
                        },
                        {
                            "line_no": 17,
                            "line_content": "driver.find_element(By.ID, \"id_description\").send_keys(\"Test note type description\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.ID, \"id_is_single\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \"input.btn.btn-primary\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 8,
                            "line_content": "class NoteTypeTest(BaseTestCase):"
                        },
                        {
                            "line_no": 21,
                            "line_content": "self.assertTrue(self.is_success_message_present(text=\"Note Type added successfully.\"))"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import sys"
                        },
                        {
                            "line_no": 3,
                            "line_content": "from base_test_class import BaseTestCase"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/tests/file_test.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "# login to site, password set to fetch from environ"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "time.sleep(0.5)"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "elems = driver.find_elements(By.NAME, \"collapsible\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"App Vulnerable to XSS\").click("
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from product_test import ProductTest, WaitForPageLoad"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/dedupe_test.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        },
                        {
                            "line_no": 16,
                            "line_content": "self.relative_path = str(Path(os.path.realpath(__file__)).parent)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        },
                        {
                            "line_no": 16,
                            "line_content": "self.relative_path = str(Path(os.path.realpath(__file__)).parent)"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import time"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from base_test_class import BaseTestCase, on_exception_html_source_logger, set_suite_settings"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from product_test import ProductTest"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 14,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 15,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 16,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/announcement_banner_test.py": {
            "capabilities": [
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from unittest import TestCase"
                        },
                        {
                            "line_no": 8,
                            "line_content": "class AnnouncementBannerTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.get(self.base_url + 'configure_announcement')"
                        },
                        {
                            "line_no": 17,
                            "line_content": "if self.is_element_by_css_selector_present('input.btn.btn-danger'):"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, 'input.btn.btn-danger').click()"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "driver.get(self.base_url + 'configure_announcement')"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/sla_configuration_test.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "driver.find_element(By.ID, \"id_username\").send_keys(os.environ[\"DD_ADMIN_USER\"])"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"id_password\").send_keys(os.environ[\"DD_ADMIN_PASSWORD\"])"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "driver.find_element(By.ID, \"id_username\").clear()"
                        },
                        {
                            "line_no": 12,
                            "line_content": "driver.find_element(By.ID, \"id_username\").send_keys(os.environ[\"DD_ADMIN_USER\"])"
                        },
                        {
                            "line_no": 13,
                            "line_content": "driver.find_element(By.ID, \"id_password\").clear()"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"id_password\").send_keys(os.environ[\"DD_ADMIN_PASSWORD\"])"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \"button.btn.btn-success\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 20,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"Add SLA Configuration\").click()"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver.find_element(By.ID, \"id_name\").clear()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 8,
                            "line_content": "class SLAConfigurationTest(BaseTestCase):"
                        },
                        {
                            "line_no": 17,
                            "line_content": "def test_add_sla_config(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/environment_test.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "driver.find_element(By.ID, \"id_username\").send_keys(os.environ[\"DD_ADMIN_USER\"])"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.find_element(By.ID, \"id_password\").send_keys(os.environ[\"DD_ADMIN_PASSWORD\"])"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 9,
                            "line_content": "class EnvironmentTest(BaseTestCase):"
                        },
                        {
                            "line_no": 11,
                            "line_content": "driver.get(self.base_url + \"login\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 9,
                            "line_content": "class EnvironmentTest(BaseTestCase):"
                        },
                        {
                            "line_no": 16,
                            "line_content": "def test_create_environment(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_type_group_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenuAddProductTypeGroup\").click()"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.ID, \"addProductTypeGroup\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, \"id_product_types\")))"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 12,
                            "line_content": "class ProductTypeGroupTest(BaseTestCase):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "def test_group_add_product_type_group(self):"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, \"id_product_types\")))"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_type_test.py": {
            "capabilities": [
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "logger = logging.getLogger(__name__)"
                        },
                        {
                            "line_no": 13,
                            "line_content": "logger.debug(\"\\n\\nDebug Print Log: testing 'create product type' \\n\")"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 17,
                            "line_content": "driver.get(self.base_url + \"product/type\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"Add Product Type\").click()"
                        },
                        {
                            "line_no": 20,
                            "line_content": "driver.find_element(By.ID, \"id_name\").clear()"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver.find_element(By.ID, \"id_name\").send_keys(\"Product test type\")"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.ID, \"id_critical_product\").click()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \"input.btn.btn-primary\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "class ProductTypeTest(BaseTestCase):"
                        },
                        {
                            "line_no": 25,
                            "line_content": "self.assertTrue(self.is_success_message_present(text=\"Product type added successfully.\"))"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/close_old_findings_test.py": {
            "capabilities": [
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import sys"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from pathlib import Path"
                        },
                        {
                            "line_no": 17,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import os"
                        },
                        {
                            "line_no": 17,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from base_test_class import BaseTestCase, on_exception_html_source_logger, set_suite_settings"
                        },
                        {
                            "line_no": 14,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 23,
                            "line_content": "class CloseOldTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 16,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 18,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 18,
                            "line_content": "from selenium.webdriver.support.expected_conditions as EC"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/endpoint_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"New Endpoint\").click()"
                        },
                        {
                            "line_no": 26,
                            "line_content": "driver.find_element(By.ID, \"id_endpoint\").clear()"
                        },
                        {
                            "line_no": 27,
                            "line_content": "driver.find_element(By.ID, \"id_endpoint\").send_keys(\"moving.com.rnd\")"
                        },
                        {
                            "line_no": 29,
                            "line_content": "Select(driver.find_element("
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "# Username and password will be gotten from environ"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 8,
                            "line_content": "class EndpointTest(BaseTestCase):"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 13,
                            "line_content": "def test_create_endpoint(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/false_positive_history_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from selenium.webdriver.common.keys import Keys"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 19,
                            "line_content": "driver.find_element(By.ID, \"products_wrapper\")"
                        },
                        {
                            "line_no": 21,
                            "line_content": "driver.find_element(By.LINK_TEXT, product_name).click()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.PARTIAL_LINK_TEXT, \"Engagement\").click()"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from product_test import ProductTest, WaitForPageLoad"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/product_group_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        },
                        {
                            "line_no": 15,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenuAddProductGroup\").click()"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.ID, \"addProductGroup\").click()"
                        },
                        {
                            "line_no": 19,
                            "line_content": "WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, \"id_products\")))"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from group_test import GroupTest"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 13,
                            "line_content": "class ProductGroupTest(BaseTestCase):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "def test_group_add_product_group(self):"
                        },
                        {
                            "line_no": 21,
                            "line_content": "self.fail(\"Timed out waiting for products dropdown to initialize \")"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, \"id_products\")))"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/user_test.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from selenium.common.exceptions import NoSuchElementException"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 12,
                            "line_content": "driver = self.driver"
                        },
                        {
                            "line_no": 14,
                            "line_content": "driver.get(self.base_url + \"user\")"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.ID, \"dropdownMenu1\").click()"
                        },
                        {
                            "line_no": 18,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"New User\").click()"
                        },
                        {
                            "line_no": 22,
                            "line_content": "driver.find_element(By.ID, \"id_username\").clear()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"id_username\").send_keys(\"propersahm\")"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 8,
                            "line_content": "class UserTest(BaseTestCase):"
                        },
                        {
                            "line_no": 10,
                            "line_content": "def test_create_user(self):"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/zap.py": {
            "capabilities": [
                {
                    "capability_id": "network:sockets",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "s = socket.socket()"
                        },
                        {
                            "line_no": 21,
                            "line_content": "s.connect((address, port))"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 25,
                            "line_content": "zap = ZAPv2(proxies={\"http\": \"http://127.0.0.1:8080\", \"https\": \"http://127.0.0.1:8080\"})"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "logger = logging.getLogger(__name__)"
                        },
                        {
                            "line_no": 16,
                            "line_content": "logger.info(\"Checking if ZAP is running, connecting to ZAP on http://\" + address + \":\" + str(port))"
                        },
                        {
                            "line_no": 23,
                            "line_content": "logger.info(\"Error connecting to ZAP, exiting.\")"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import time"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/tool_config.py": {
            "capabilities": [
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        },
                        {
                            "line_no": 14,
                            "line_content": "def goto_add_api_scan_configuration(self, driver):"
                        },
                        {
                            "line_no": 16,
                            "line_content": "driver.find_element(By.CSS_SELECTOR, \".dropdown-toggle.pull-left\").click()"
                        },
                        {
                            "line_no": 17,
                            "line_content": "driver.find_element(By.LINK_TEXT, \"Add Scan API Configuration\").click()"
                        },
                        {
                            "line_no": 23,
                            "line_content": "driver.find_element(By.ID, \"link_tt_edgescan_scan\").text"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from base_test_class import BaseTestCase, on_exception_html_source_logger"
                        },
                        {
                            "line_no": 12,
                            "line_content": "class ToolConfigTest(BaseTestCase):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "@on_exception_html_source_logger"
                        },
                        {
                            "line_no": 20,
                            "line_content": "def test_list_api_scan_configuration_tt_and_tc_missing(self):"
                        },
                        {
                            "line_no": 24,
                            "line_content": "self.assertEqual(driver.find_element(By.ID, \"link_tt_edgescan_scan\").text, \"Parser Edgescan Scan requires created tool type Edgescan"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/close_old_findings_dedupe_test.py": {
            "capabilities": [
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 20,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "import os"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from pathlib import Path"
                        },
                        {
                            "line_no": 22,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "import unittest"
                        },
                        {
                            "line_no": 29,
                            "line_content": "class CloseOldDedupeTest(BaseTestCase):"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "import time"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "from selenium.common.exceptions import TimeoutException"
                        },
                        {
                            "line_no": 15,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 16,
                            "line_content": "from selenium.webdriver.support import expected_conditions as EC"
                        },
                        {
                            "line_no": 17,
                            "line_content": "from selenium.webdriver.support.ui import Select, WebDriverWait"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/tests/Import_scanner_test.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "shutil.rmtree(self.repo_path)"
                        },
                        {
                            "line_no": 18,
                            "line_content": "Path(self.repo_path).mkdir()"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from pathlib import Path"
                        },
                        {
                            "line_no": 13,
                            "line_content": "dir_path = Path(os.path.realpath(__file__)).parent"
                        },
                        {
                            "line_no": 26,
                            "line_content": "tool_path = Path(dir_path[:-5] + \"dojo/tools\")"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "git.Repo.clone_from(\"https://github.com/DefectDojo/sample-scan-files\", self.repo_path)"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "from base_test_class import BaseTestCase"
                        },
                        {
                            "line_no": 12,
                            "line_content": "from product_test import ProductTest"
                        },
                        {
                            "line_no": 28,
                            "line_content": "tools = sor"
                        }
                    ]
                },
                {
                    "capability_id": "scraping:web",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from selenium.webdriver.common.by import By"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from selenium.webdriver.support.ui import Select"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/widgets.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import forms"
                        },
                        {
                            "line_no": 2,
                            "line_content": "from django.core.paginator import Paginator"
                        },
                        {
                            "line_no": 3,
                            "line_content": "from django.template.loader import render_to_string"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.template.loader import render_to_string"
                        },
                        {
                            "line_no": 7,
                            "line_content": "template_name = \"dojo/add_findings_as_accepted.html\""
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "selected_ids = data.getlist(name)"
                        },
                        {
                            "line_no": 13,
                            "line_content": "return [int(id) for id in selected_ids]"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/forms.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from datetime import date, datetime"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from django.utils import timezone"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from dateutil.relativedelta import relativedelta"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 2,
                            "line_content": "import os"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.contrib.auth.models import Permission"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from django.contrib.auth.password_validation import validate_password"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import pickle"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from django.utils.safestring import mark_safe"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from django.db.models import Count, Q"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django import forms"
                        },
                        {
                            "line_no": 16,
                            "line_content": "from django.utils.translation import gettext_lazy as _"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.conf.urls import include"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.contrib import admin"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from drf_spectacular.views import SpectacularSwaggerView"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from rest_framework.authtoken import views as tokenviews"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from rest_framework.routers import DefaultRouter"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from drf_spectacular.views import SpectacularSwaggerView"
                        }
                    ]
                },
                {
                    "capability_id": "auth:jwt",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from rest_framework.authtoken import views as tokenviews"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/checks.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.core.checks import Error"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "f\"Configuration error in HASHCODE_FIELDS_PER_SCANNER: Element {field} is not in the allowed list HASHCODE_ALLOWED_FIELDS for {scanner}.\""
                        },
                        {
                            "line_no": 14,
                            "line_content": "hint=f'Check configuration [\"HASHCODE_FIELDS_PER_SCANNER\"][\"{scanner}\"] value',"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tasks.py": {
            "capabilities": [
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 20,
                            "line_content": "logger = get_task_logger(__name__)"
                        },
                        {
                            "line_no": 21,
                            "line_content": "deduplicationLogger = logging.getLogger(\"dojo.specific-loggers.deduplication\")"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from datetime import date, timedelta"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django.utils import timezone"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from dojo.notifications.helper import create_notification"
                        },
                        {
                            "line_no": 26,
                            "line_content": "create_notification(event=\"other\", title=title, description=description,"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.db.models import Count, Prefetch"
                        },
                        {
                            "line_no": 18,
                            "line_content": "from dojo.models import Alerts, Announcement, Endpoint, Engagement, Finding, Product, System_Settings, User"
                        },
                        {
                            "line_no": 25,
                            "line_content": "# Logs the error to the alerts table, which appears in the notification toolbar"
                        }
                    ]
                },
                {
                    "capability_id": "queue:management",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "from dojo.celery import app"
                        },
                        {
                            "line_no": 32,
                            "line_content": "@app.task(bind=True)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/apps.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.apps import AppConfig"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.core.checks import register as register_check"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.db import models"
                        }
                    ]
                },
                {
                    "capability_id": "monitoring:metrics",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 12,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "search:indexing",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from watson import search as watson"
                        },
                        {
                            "line_no": 17,
                            "line_content": "# we need to initializer waston here because in models.py is to early if we want add extra fields to index"
                        },
                        {
                            "line_no": 23,
                            "line_content": "# charfields/textfields are the fields that watson indexes by default (but we have"
                        }
                    ]
                },
                {
                    "capability_id": "data:validation",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from dojo.checks import check_configuration_deduplication"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/celery.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"dojo.settings.settings\")"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "app = Celery(\"dojo\")"
                        },
                        {
                            "line_no": 20,
                            "line_content": "app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "app.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")"
                        }
                    ]
                },
                {
                    "capability_id": "monitoring:metrics",
                    "evidence": [
                        {
                            "line_no": 24,
                            "line_content": "logger.info(f\"Request: {self.request!r}\")"
                        }
                    ]
                },
                {
                    "capability_id": "msg:queue",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "app = Celery(\"dojo\")"
                        },
                        {
                            "line_no": 20,
                            "line_content": "app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/context_processors.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 7,
                            "line_content": "\"SHOW_LOGIN_FORM\": settings.SHOW_LOGIN_FORM,"
                        },
                        {
                            "line_no": 8,
                            "line_content": "\"FORGOT_PASSWORD\": settings.FORGOT_PASSWORD,"
                        },
                        {
                            "line_no": 9,
                            "line_content": "\"FORGOT_USERNAME\": settings.FORGOT_USERNAME,"
                        },
                        {
                            "line_no": 10,
                            "line_content": "\"CLASSIC_AUTH_ENABLED\": settings.CLASSIC_AUTH_ENABLED,"
                        },
                        {
                            "line_no": 11,
                            "line_content": "\"AUTH0_ENABLED\": settings.AUTH0_OAUTH2_ENABLED,"
                        },
                        {
                            "line_no": 12,
                            "line_content": "\"GOOGLE_ENABLED\": settings.GOOGLE_OAUTH_ENABLED,"
                        },
                        {
                            "line_no": 13,
                            "line_content": "\"OKTA_ENABLED\": settings.OKTA_OAUTH_ENABLED,"
                        },
                        {
                            "line_no": 14,
                            "line_content": "\"GITLAB_ENABLED\": settings.GITLAB_OAUTH2_ENABLED,"
                        },
                        {
                            "line_no": 15,
                            "line_content": "\"AZUREAD_TENANT_OAUTH2_ENABLED\": settings.AZUREAD_TENANT_OAUTH2_ENABLED,"
                        },
                        {
                            "line_no": 16,
                            "line_content": "\"AZUREAD_TENANT_OAUTH2_GET_GROUPS\": settings.AZUREAD_TENANT_OAUTH2_GET_GROUPS,"
                        },
                        {
                            "line_no": 17,
                            "line_content": "\"AZUREAD_TENANT_OAUTH2_GROUPS_FILTER\": settings.AZUREAD_TENANT_OAUTH2_GROUPS_FILTER,"
                        },
                        {
                            "line_no": 18,
                            "line_content": "\"AZUREAD_TENANT_OAUTH2_CLEANUP_GROUPS\": settings.AZUREAD_TENANT_OAUTH2_CLEANUP_GROUPS"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "\"AUTH0_ENABLED\": settings.AUTH0_OAUTH2_ENABLED,"
                        },
                        {
                            "line_no": 12,
                            "line_content": "\"GOOGLE_ENABLED\": settings.GOOGLE_OAUTH_ENABLED,"
                        },
                        {
                            "line_no": 13,
                            "line_content": "\"OKTA_ENABLED\": settings.OKTA_OAUTH_ENABLED,"
                        },
                        {
                            "line_no": 14,
                            "line_content": "\"GITLAB_ENABLED\": settings.GITLAB_OAUTH2_ENABLED,"
                        },
                        {
                            "line_no": 15,
                            "line_content": "\"AZUREAD_TENANT_OAUTH2_ENABLED\": settings.AZUREAD_TENANT_OAUTH2_ENABLED,"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/middleware.py": {
            "capabilities": [
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "EXEMPT_URLS = [re.compile(settings.LOGIN_URL.lstrip(\"/\"))]"
                        },
                        {
                            "line_no": 18,
                            "line_content": "if hasattr(settings, \"LOGIN_EXEMPT_URLS\"):"
                        },
                        {
                            "line_no": 19,
                            "line_content": "EXEMPT_URLS += [re.compile(expr) for expr in settings.LOGIN_EXEMPT_URLS]"
                        }
                    ]
                },
                {
                    "capability_id": "auth:session",
                    "evidence": [
                        {
                            "line_no": 27,
                            "line_content": "Middleware that requires a user to be authenticated to view any page other"
                        },
                        {
                            "line_no": 28,
                            "line_content": "than LOGIN_URL. Exemptions to this requirement can optionally be specified"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django.db import models"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from django.http import HttpResponseRedirect"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from django.urls import reverse"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from django.utils.functional import SimpleLazyObject"
                        }
                    ]
                },
                {
                    "capability_id": "auth:user_context",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from auditlog.context import set_actor"
                        }
                    ]
                },
                {
                    "capability_id": "network:url_parsing",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from urllib.parse import quote"
                        }
                    ]
                },
                {
                    "capability_id": "threading:management",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from threading import local"
                        }
                    ]
                },
                {
                    "capability_id": "io:regex",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import re"
                        },
                        {
                            "line_no": 17,
                            "line_content": "EXEMPT_URLS = [re.compile(settings.LOGIN_URL.lstrip(\"/\"))]"
                        },
                        {
                            "line_no": 19,
                            "line_content": "EXEMPT_URLS += [re.compile(expr) for expr in settings.LOGIN_EXEMPT_URLS]"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/wsgi.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from django.core.wsgi import get_wsgi_application"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import os"
                        },
                        {
                            "line_no": 15,
                            "line_content": "os.environ.get('DJANGO_SETTINGS_MODULE')"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import logging"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/__init__.py": {
            "capabilities": [
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "__version__ = \"2.43.1\""
                        },
                        {
                            "line_no": 6,
                            "line_content": "__url__ = \"https://github.com/DefectDojo/django-DefectDojo\""
                        },
                        {
                            "line_no": 7,
                            "line_content": "__docs__ = \"https://documentation.defectdojo.com\""
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from .celery import app as celery_app  # noqa: F401"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/admin.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from django.contrib import admin"
                        },
                        {
                            "line_no": 3,
                            "line_content": "from polymorphic.admin import PolymorphicChildModelAdmin, PolymorphicParentModelAdmin"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from auditlog.models import LogEntry"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from dojo.models import ("
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from dojo.models import ("
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/github.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.template.loader import render_to_string"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "g_ctx = Github(github_conf.api_key)"
                        },
                        {
                            "line_no": 27,
                            "line_content": "repo = g_ctx.get_repo(github_product.git_project)"
                        },
                        {
                            "line_no": 28,
                            "line_content": "issue = repo.get_issue(int(g_issue.issue_id"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "if GITHUB_PKey.objects.filter(product=prod).count() == 0:"
                        },
                        {
                            "line_no": 17,
                            "line_content": "github_product = GITHUB_PKey.objects.get(product=prod)"
                        },
                        {
                            "line_no": 21,
                            "line_content": "g_issue = GITHUB_Issue.objects.get(finding=find)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from dojo.utils import get_system_setting"
                        },
                        {
                            "line_no": 11,
                            "line_content": "if not get_system_setting(\"enable_github\"):"
                        }
                    ]
                },
                {
                    "capability_id": "monitoring:metrics",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "logger = logging.getLogger(__name__)"
                        },
                        {
                            "line_no": 19,
                            "line_content": "logger.error(\"Unable to get project key\")"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/remote_user.py": {
            "capabilities": [
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.contrib.auth.backends import RemoteUserBackend as OriginalRemoteUserBackend"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.contrib.auth.middleware import RemoteUserMiddleware as OriginalRemoteUserMiddleware"
                        },
                        {
                            "line_no": 17,
                            "line_content": "class RemoteUserAuthentication(OriginalRemoteUserAuthentication):"
                        }
                    ]
                },
                {
                    "capability_id": "network:http",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "if IPAddress(request.META[\"REMOTE_ADDR\"]) in settings.AUTH_REMOTEUSER_TRUSTED_PROXY:"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from django.contrib.auth.backends import RemoteUserBackend as OriginalRemoteUserBackend"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.contrib.auth.middleware import RemoteUserMiddleware as OriginalRemoteUserMiddleware"
                        },
                        {
                            "line_no": 17,
                            "line_content": "class RemoteUserAuthentication(OriginalRemoteUserAuthentication):"
                        },
                        {
                            "line_no": 25,
                            "line_content": "return super()."
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 20,
                            "line_content": "if IPAddress(request.META[\"REMOTE_ADDR\"]) in settings.AUTH_REMOTEUSER_TRUSTED_PROXY:"
                        },
                        {
                            "line_no": 21,
                            "line_content": "self.header = settings.AUTH_REMOTEUSER_USERNAME_HEADER"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from dojo.models import Dojo_Group"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from dojo.pipeline import assign_user_to_groups, cleanup_old_groups_for_user"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/filters.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from datetime import datetime, timedelta"
                        },
                        {
                            "line_no": 21,
                            "line_content": "from django.utils import timezone"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from django.db.models import JSONField, Q"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "from django.forms import HiddenInput"
                        },
                        {
                            "line_no": 15,
                            "line_content": "from django.db.models import JSONField, Q"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 33,
                            "line_content": "from django_filters import rest_framework as filters"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from django import forms"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from django.apps import apps"
                        },
                        {
                            "line_no": 14,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tags_signals.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.db.models import signals"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django.dispatch import receiver"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.db.models import signals"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "from dojo.utils import get_system_setting"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import contextlib"
                        },
                        {
                            "line_no": 18,
                            "line_content": "with contextlib.suppress(AttributeError):"
                        }
                    ]
                },
                {
                    "capability_id": "third_party:async_execution",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from dojo.product import helpers as async_product_funcs"
                        },
                        {
                            "line_no": 21,
                            "line_content": "async_product_funcs.propagate_tags_on_product(instance.id, countdown=5)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/pipeline.py": {
            "capabilities": [
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from social_core.backends.azuread_tenant import AzureADTenantOAuth2"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from social_core.backends.google import GoogleOAuth2"
                        },
                        {
                            "line_no": 17,
                            "line_content": "def social_uid(backend, details, response, *args, **kwargs):"
                        },
                        {
                            "line_no": 18,
                            "line_content": "if settings.AZUREAD_TENANT_OAUTH2_ENABLED and isinstance(backend, AzureADTenantOAuth2):"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 18,
                            "line_content": "if settings.AZUREAD_TENANT_OAUTH2_ENABLED and isinstance(backend, AzureADTenantOAuth2):"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/utils.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "import os"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from pathlib import Path"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "import pathlib"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import calendar as tcalendar"
                        },
                        {
                            "line_no": 17,
                            "line_content": "from datetime import date, datetime, timedelta"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from calendar import monthrange"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:encryption",
                    "evidence": [
                        {
                            "line_no": 27,
                            "line_content": "from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes"
                        },
                        {
                            "line_no": 26,
                            "line_content": "from cryptography.hazmat.backends import default_backend"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "import mimetypes"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 30,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 31,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 32,
                            "line_content": "from django.contrib.auth.signals import user_logged_in, user_logged_out, user_login_failed"
                        },
                        {
                            "line_no": 33,
                            "line_content": "from django.core.paginator import Paginator"
                        },
                        {
                            "line_no": 34,
                            "line_content": "from django.db.models import Case, Count, IntegerField, Q, Sum, Value, When"
                        },
                        {
                            "line_no": 35,
                            "line_content": "from django.db.models.query import QuerySet"
                        },
                        {
                            "line_no": 36,
                            "line_content": "from django.db.models.signals import post_save"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/models.py": {
            "capabilities": [
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from datetime import datetime"
                        },
                        {
                            "line_no": 15,
                            "line_content": "from dateutil.relativedelta import relativedelta"
                        },
                        {
                            "line_no": 33,
                            "line_content": "from django.utils import timezone"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from pathlib import Path"
                        },
                        {
                            "line_no": 27,
                            "line_content": "from django.core.files.base import ContentFile"
                        }
                    ]
                },
                {
                    "capability_id": "auth:jwt",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "from django.contrib.auth import get_user_model"
                        },
                        {
                            "line_no": 20,
                            "line_content": "from django.contrib.auth.models import Group"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 24,
                            "line_content": "from django.db import connection, models"
                        },
                        {
                            "line_no": 25,
                            "line_content": "from django.db.models import Count, JSONField, Q"
                        },
                        {
                            "line_no": 26,
                            "line_content": "from django.db.models.expressions import Case, When"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 25,
                            "line_content": "from django.db.models import Count, JSONField, Q"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "from django import forms"
                        },
                        {
                            "line_no": 18,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 28,
                            "line_content": "from django.urls import reverse"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/decorators.py": {
            "capabilities": [
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 12,
                            "line_content": "logger = logging.getLogger(__name__)"
                        },
                        {
                            "line_no": 18,
                            "line_content": "logger.debug(\"dojo_async_task %s: running task in the foreground as sync=True has been found as kwarg\", func)"
                        },
                        {
                            "line_no": 21,
                            "line_content": "logger.debug(\"user: %s\", user)"
                        },
                        {
                            "line_no": 24,
                            "line_content": "logger.debug(\"dojo_async_task %s: running task in the foreground as block_execution is set to True for %s\", func, user)"
                        },
                        {
                            "line_no": 27,
                            "line_content": "logger.debug(\"dojo_async_task %s: no current user, running ta"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from django.db import models"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from dojo.models import Dojo_User, Finding"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.db import models"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django_ratelimit import UNSAFE"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django_ratelimit.core import is_ratelimited"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django_ratelimit.exceptions import Ratelimited"
                        }
                    ]
                },
                {
                    "capability_id": "auth:ratelimit",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django_ratelimit import UNSAFE"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django_ratelimit.core import is_ratelimited"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django_ratelimit.exceptions import Ratelimited"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 27,
                            "line_content": "logger.debug(\"dojo_async_task %s: no current user, running ta"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/views.py": {
            "capabilities": [
                {
                    "capability_id": "auth:permissions",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "user_has_configuration_permission_or_403,"
                        },
                        {
                            "line_no": 27,
                            "line_content": "user_has_permission,"
                        },
                        {
                            "line_no": 28,
                            "line_content": "user_has_permission_or_403,"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "from django.contrib.contenttypes.models import ContentType"
                        },
                        {
                            "line_no": 30,
                            "line_content": "from dojo.models import Endpoint, Engagement, FileUpload, Finding, Product, Test"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 23,
                            "line_content": "from django.shortcuts import get_object_or_404, render"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 24,
                            "line_content": "from django.urls import reverse"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 30,
                            "line_content": "from dojo.models import Endpoint, Engagement, FileUpload, Finding, Product, Test"
                        },
                        {
                            "line_no": 31,
                            "line_content": "from dojo.utils import Product_Tab, generate_file_response, get_page_items"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/authorization_tags.py": {
            "capabilities": [
                {
                    "capability_id": "auth:permissions",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "from dojo.authorization.authorization import user_has_configuration_permission as configuration_permission"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from dojo.authorization.authorization import user_has_global_permission, user_has_permission"
                        },
                        {
                            "line_no": 20,
                            "line_content": "return user_has_permission(crum.get_current_user(), obj, Permissions[permission])"
                        },
                        {
                            "line_no": 25,
                            "line_content": "return user_has_global_permission(crum.get_current_user(), Permissions[permission])"
                        },
                        {
                            "line_no": 30,
                            "line_content": "return configuration_permission(user, permission)"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 16,
                            "line_content": "@register.filter"
                        },
                        {
                            "line_no": 21,
                            "line_content": "@register.filter"
                        },
                        {
                            "line_no": 26,
                            "line_content": "@register.filter"
                        }
                    ]
                },
                {
                    "capability_id": "cache:management",
                    "evidence": [
                        {
                            "line_no": 34,
                            "line_content": "@cache_for_request"
                        },
                        {
                            "line_no": 36,
                            "line_content": "return user.user_permissions.all()"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_config_setting.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 10,
                            "line_content": "if hasattr(settings, config_setting):"
                        },
                        {
                            "line_no": 11,
                            "line_content": "return bool(getattr(settings, config_setting, None))"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 4,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 7,
                            "line_content": "@register.filter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_endpoint_status.py": {
            "capabilities": [
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from django.db.models import Q"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from dojo.models import Endpoint_Status"
                        },
                        {
                            "line_no": 26,
                            "line_content": "return finding.endpoints.filter("
                        },
                        {
                            "line_no": 37,
                            "line_content": "return finding.endpoints.filter("
                        },
                        {
                            "line_no": 47,
                            "line_content": "status = Endpoint_Status.objects.get(endpoint=endpoint, finding"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 6,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 10,
                            "line_content": "@register.filter(name=\"has_endpoints\")"
                        },
                        {
                            "line_no": 15,
                            "line_content": "@register.filter(name=\"get_vulnerable_endpoints\")"
                        },
                        {
                            "line_no": 24,
                            "line_content": "@register.filter(name=\"get_mitigated_endpoints\")"
                        },
                        {
                            "line_no": 46,
                            "line_content": "@register.filter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_attribute.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 3,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 6,
                            "line_content": "@register.filter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/navigation_tags.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 11,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 14,
                            "line_content": "@register.simple_tag(takes_context=True)"
                        },
                        {
                            "line_no": 30,
                            "line_content": "@register.simple_tag"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "parameters = query_string.split(\"&\")"
                        },
                        {
                            "line_no": 21,
                            "line_content": "parts = param.split(\"=\")"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from django.utils.html import escape"
                        },
                        {
                            "line_no": 3,
                            "line_content": "from django.utils.safestring import mark_safe as safe"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.utils.translation import gettext as _"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/dict_key.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.template.defaultfilters import register"
                        },
                        {
                            "line_no": 4,
                            "line_content": "@register.filter(name=\"dict_key\")"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_notetype_availability.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 3,
                            "line_content": "register = template.Library()"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "notes_without_type = notes.filter(note_type=None).count()"
                        },
                        {
                            "line_no": 7,
                            "line_content": "notes_count = notes.count()"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/survey_tags.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 9,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 12,
                            "line_content": "@register.inclusion_tag(\"defectDojo-engagement-survey/surveys.html\")"
                        },
                        {
                            "line_no": 18,
                            "line_content": "@register.inclusion_tag(\"defectDojo-engagement-survey/add_surveys.html\")"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from dojo.models import Answered_Survey, Engagement_Survey"
                        },
                        {
                            "line_no": 13,
                            "line_content": "surveys = Answered_Survey.objects.filter(engagement=engagement)"
                        },
                        {
                            "line_no": 19,
                            "line_content": "ids = [survey.survey.id for survey in Answered_Survey.objects.filter(engagement=engagement)]"
                        },
                        {
                            "line_no": 21,
                            "line_content": "surveys = Engagement_Survey.objects.exclude(id__in=ids)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_note_status.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 3,
                            "line_content": "register = template.Library()"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/get_banner.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 10,
                            "line_content": "register = template.Library()"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from dojo.models import BannerConf"
                        },
                        {
                            "line_no": 16,
                            "line_content": "banner_config = BannerConf.objects.get()"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "def get_banner_conf(attribute):"
                        },
                        {
                            "line_no": 17,
                            "line_content": "value = getattr(banner_config, attribute, None)"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.utils.safestring import mark_safe"
                        },
                        {
                            "line_no": 23,
                            "line_content": "return mark_safe(bleach.clean("
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/templatetags/announcement_banner_tags.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 7,
                            "line_content": "register = template.Library()"
                        }
                    ]
                },
                {
                    "capability_id": "data:sanitization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import bleach"
                        },
                        {
                            "line_no": 2,
                            "line_content": "from bleach.css_sanitizer import CSSSanitizer"
                        },
                        {
                            "line_no": 11,
                            "line_content": "allowed_attributes = bleach.ALLOWED_ATTRIBUTES"
                        },
                        {
                            "line_no": 14,
                            "line_content": "return mark_safe(bleach.clean("
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/multiply.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 3,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 6,
                            "line_content": "@register.filter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/as_json.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 9,
                            "line_content": "return json.dumps(value)"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django import template"
                        },
                        {
                            "line_no": 5,
                            "line_content": "register = template.Library()"
                        },
                        {
                            "line_no": 8,
                            "line_content": "@register.filter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/display_tags.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from django import template"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "from django.contrib.auth.models import User"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import datetime"
                        },
                        {
                            "line_no": 8,
                            "line_content": "import dateutil.relativedelta"
                        },
                        {
                            "line_no": 28,
                            "line_content": "from django.utils import timezone"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "from ast import literal_eval"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 21,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 23,
                            "line_content": "from django.db.models import Case, IntegerField, Sum, Value, When"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 22,
                            "line_content": "from django.contrib.contenttypes.models import ContentType"
                        },
                        {
                            "line_no": 23,
                            "line_content": "from django.db.models import Case, IntegerField, Sum, Value, When"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:base64",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import base64"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "from django.template.defaultfilters import stringfilter"
                        },
                        {
                            "line_no": 32,
                            "line_content": "from django.utils.safestring import mark_safe"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import logging"
                        }
                    ]
                },
                {
                    "capability_id": "io:mimetypes",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import mimetypes"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/templatetags/event_tags.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django import forms, template"
                        },
                        {
                            "line_no": 5,
                            "line_content": "register = template.Library()"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django import forms, template"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/metrics/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from dojo.metrics import views"
                        },
                        {
                            "line_no": 6,
                            "line_content": "re_path(r\"^metrics$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 8,
                            "line_content": "re_path(r\"^critical_product_metrics$\", views.critical_product_metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 10,
                            "line_content": "re_path(r\"^metrics/all$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 12,
                            "line_content": "re_path(r\"^metrics/product/type$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 14,
                            "line_content": "re_path(r\"^metrics/simple$\", views.simple_metrics,"
                        },
                        {
                            "line_no": 16,
                            "line_content": "re_path(r\"^metrics/product/type/(?P<mtype>\\d+)$\","
                        },
                        {
                            "line_no": 18,
                            "line_content": "re_path(r\"^metrics/product/type/counts$\","
                        },
                        {
                            "line_no": 20,
                            "line_content": "re_path(r\"^metrics/product/tag/counts$\","
                        },
                        {
                            "line_no": 22,
                            "line_content": "re_path(r\"^metrics/engineer$\", views.engineer_metrics,"
                        }
                    ]
                },
                {
                    "capability_id": "monitoring:metrics",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "re_path(r\"^metrics$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 8,
                            "line_content": "re_path(r\"^critical_product_metrics$\", views.critical_product_metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 10,
                            "line_content": "re_path(r\"^metrics/all$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 12,
                            "line_content": "re_path(r\"^metrics/product/type$\", views.metrics, {\"mtype\": \"All\"},"
                        },
                        {
                            "line_no": 14,
                            "line_content": "re_path(r\"^metrics/simple$\", views.simple_metrics,"
                        },
                        {
                            "line_no": 18,
                            "line_content": "re_path(r\"^metrics/product/type/counts$\","
                        },
                        {
                            "line_no": 20,
                            "line_content": "re_path(r\"^metrics/product/tag/counts$\","
                        },
                        {
                            "line_no": 22,
                            "line_content": "re_path(r\"^metrics/engineer$\", views.engineer_metrics,"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/metrics/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/metrics/utils.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from datetime import date, datetime, timedelta"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django.utils import timezone"
                        },
                        {
                            "line_no": 17,
                            "line_content": "from dateutil.relativedelta import relativedelta"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 20,
                            "line_content": "from django.db.models import Case, Count, F, IntegerField, Q, Sum, Value, When"
                        },
                        {
                            "line_no": 21,
                            "line_content": "from django.db.models.functions import Coalesce, ExtractDay, Now, TruncMonth, TruncWeek"
                        },
                        {
                            "line_no": 22,
                            "line_content": "from django.db.models.query import QuerySet"
                        },
                        {
                            "line_no": 23,
                            "line_content": "from django.http import HttpRequest"
                        },
                        {
                            "line_no": 24,
                            "line_content": "from django.utils.translation import gettext as _"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from typing import Any, NamedTuple, TypeVar"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "from django.db.models import Case, Count, F, IntegerField, Q, Sum, Value, When"
                        },
                        {
                            "line_no": 21,
                            "line_content": "from django.db.models.functions import Coalesce, ExtractDay, Now, TruncMonth, TruncWeek"
                        },
                        {
                            "line_no": 22,
                            "line_content": "from django.db.models.query import QuerySet"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/metrics/views.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 23,
                            "line_content": "from django.db.models import Case, Count, IntegerField, Q, Sum, Value, When"
                        },
                        {
                            "line_no": 26,
                            "line_content": "from django.shortcuts import get_object_or_404, render"
                        },
                        {
                            "line_no": 27,
                            "line_content": "from django.urls import reverse"
                        },
                        {
                            "line_no": 28,
                            "line_content": "from django.utils import timezone"
                        },
                        {
                            "line_no": 32,
                            "line_content": "from django.views.decorators.cache import cache_page"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from calendar import monthrange"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from datetime import date, datetime, timedelta"
                        },
                        {
                            "line_no": 13,
                            "line_content": "from dateutil.relativedelta import relativedelta"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 36,
                            "line_content": "from dojo.authorization.authorization import user_has_permission_or_403"
                        },
                        {
                            "line_no": 37,
                            "line_content": "from dojo.authorization.roles_permissions import Permissions"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 23,
                            "line_content": "from django.db.models import Case, Count, IntegerField, Q, Sum, Value, When"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "from django.shortcuts import get_object_or_404, render"
                        }
                    ]
                },
                {
                    "capability_id": "cache:management",
                    "evidence": [
                        {
                            "line_no": 32,
                            "line_content": "from django.views.decorators.cache import cache_page"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/settings.dist.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 27,
                            "line_content": "env = environ.Env()"
                        },
                        {
                            "line_no": 29,
                            "line_content": "root = environ.Path(__file__) - 3  # Three folders back"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import json"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "from pathlib import Path"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "from datetime import timedelta"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "import os"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/exception_filter.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.views.debug import SafeExceptionReporterFilter"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.views.debug import SafeExceptionReporterFilter"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/settings/settings.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "# See https://documentation.defectdojo.com/getting_started/configuration/ for options"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "include("
                        },
                        {
                            "line_no": 9,
                            "line_content": "    \"settings.dist.py\","
                        },
                        {
                            "line_no": 10,
                            "line_content": "    optional(\"local_settings.py\"),"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/unittests.py": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "# Do so by copying the file dojo/settings/settings.dist.py to"
                        },
                        {
                            "line_no": 4,
                            "line_content": "# dojo/settings/settings.py; Otherwise, the following import will not work"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "# Do so by copying the file dojo/settings/settings.dist.py to"
                        },
                        {
                            "line_no": 4,
                            "line_content": "# dojo/settings/settings.py; Otherwise, the following import will not work"
                        }
                    ]
                },
                {
                    "capability_id": "db:sqlite",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "\"ENGINE\": \"django.db.backends.sqlite3\","
                        },
                        {
                            "line_no": 9,
                            "line_content": "\"NAME\": \"unittest.sqlite\","
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "# In order to run the unit tests, it is required to create a settings file"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from .settings import *  # noqa: F403"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "# In order to run the unit tests, it is required to create a settings file"
                        },
                        {
                            "line_no": 8,
                            "line_content": "\"ENGINE\": \"django.db.backends.sqlite3\","
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/attribute-maps/saml_uri.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "MAP = {"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/settings/attribute-maps/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/settings/attribute-maps/django_saml_uri.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "MAP = {"
                        },
                        {
                            "line_no": 10,
                            "line_content": "\"identifier\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\","
                        },
                        {
                            "line_no": 11,
                            "line_content": "\"fro\": {"
                        },
                        {
                            "line_no": 16,
                            "line_content": "},"
                        },
                        {
                            "line_no": 17,
                            "line_content": "\"to\": {"
                        },
                        {
                            "line_no": 22,
                            "line_content": "},"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/home/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from dojo.home import views"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "re_path(r\"^$\", views.home, name=\"home\")"
                        },
                        {
                            "line_no": 7,
                            "line_content": "re_path(r\"^dashboard$\", views.dashboard, name=\"dashboard\")"
                        },
                        {
                            "line_no": 8,
                            "line_content": "re_path(r\"^support$\", views.support, name=\"support\")"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/home/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/home/views.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.http import HttpRequest, HttpResponse, HttpResponseRedirect"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from django.shortcuts import render"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from django.urls import reverse"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from datetime import timedelta"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django.utils import timezone"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from django.db.models import Count, Q"
                        },
                        {
                            "line_no": 25,
                            "line_content": "engagements = get_authorized_engagements(Permissions.Engagement_View).distinct()"
                        }
                    ]
                },
                {
                    "capability_id": "auth:jwt",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "from dojo.authorization.authorization import user_has_configuration_permission"
                        },
                        {
                            "line_no": 14,
                            "line_content": "from dojo.authorization.roles_permissions import Permissions"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from dojo.engagement.queries import get_authorized_engagements"
                        },
                        {
                            "line_no": 16,
                            "line_content": "from dojo.finding.queries import get_authorized_findings"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 22,
                            "line_content": "def dashboard(request: HttpRequest) -> HttpResponse:"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from django.shortcuts import render"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tool_type/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "re_path(r\"^tool_type/add\", views.new_tool_type, name=\"add_tool_type\")"
                        },
                        {
                            "line_no": 6,
                            "line_content": "re_path(r\"^tool_type/(?P<ttid>\\d+)/edit$\", views.edit_tool_type, name=\"edit_tool_type\")"
                        },
                        {
                            "line_no": 7,
                            "line_content": "re_path(r\"^tool_type$\", views.tool_type, name=\"tool_type\")"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "from . import views"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tool_type/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tool_type/views.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django.http import HttpResponseRedirect"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django.shortcuts import render"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django.urls import reverse"
                        },
                        {
                            "line_no": 9,
                            "line_content": "from django.utils.translation import gettext as _"
                        }
                    ]
                },
                {
                    "capability_id": "auth:oauth",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "from dojo.authorization.authorization_decorators import user_is_configuration_authorized"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django.shortcuts import render"
                        },
                        {
                            "line_no": 16,
                            "line_content": "tform = ToolTypeForm(request.POST, instance=Tool_Type())"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.utils.translation import gettext as _"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from dojo.models import Tool_Type"
                        },
                        {
                            "line_no": 16,
                            "line_content": "tform = ToolTypeForm(request.POST, instance=Tool_Type())"
                        },
                        {
                            "line_no": 17,
                            "line_content": "if tform.is_valid():"
                        },
                        {
                            "line_no": 18,
                            "line_content": "tform.save()"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from django.http import HttpResponseRedirect"
                        },
                        {
                            "line_no": 21,
                            "line_content": "return HttpResponseRedirect(reverse(\"tool_type\""
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/system_settings/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from dojo.system_settings import views"
                        },
                        {
                            "line_no": 6,
                            "line_content": "re_path("
                        },
                        {
                            "line_no": 9,
                            "line_content": "views.SystemSettingsView.as_view(),"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/system_settings/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/system_settings/views.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        },
                        {
                            "line_no": 4,
                            "line_content": "from django.contrib import messages"
                        },
                        {
                            "line_no": 5,
                            "line_content": "from django.core.exceptions import PermissionDenied"
                        },
                        {
                            "line_no": 6,
                            "line_content": "from django.http import HttpRequest, HttpResponse"
                        },
                        {
                            "line_no": 7,
                            "line_content": "from django.shortcuts import render"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from django.views import View"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "from dojo.models import System_Settings"
                        },
                        {
                            "line_no": 21,
                            "line_content": "return System_Settings.objects.get(no_cache=True)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/note_type/urls.py": {
            "capabilities": [
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from django.urls import re_path"
                        }
                    ]
                },
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "from dojo.note_type import views"
                        },
                        {
                            "line_no": 6,
                            "line_content": "re_path(r\"^note_type$\","
                        },
                        {
                            "line_no": 9,
                            "line_content": "re_path(r\"^note/type/(?P<ntid>\\d+)/edit$\","
                        },
                        {
                            "line_no": 12,
                            "line_content": "re_path(r\"^note/type/(?P<ntid>\\d+)/disable$\","
                        },
                        {
                            "line_no": 15,
                            "line_content": "re_path(r\"^note/type/(?P<ntid>\\d+)/enable$\","
                        },
                        {
                            "line_no": 18,
                            "line_content": "re_path(r\"^add_note_type$\","
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/note_type/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/note_type/views.py": {
            "capabilities": [
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 21,
                            "line_content": "return render(request, \"dojo/note_type.html\", {"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.http import HttpResponseRedirect"
                        },
                        {
                            "line_no": 10,
                            "line_content": "from django.shortcuts import get_object_or_404, render"
                        },
                        {
                            "line_no": 11,
                            "line_content": "from django.urls import reverse"
                        }
                    ]
                },
                {
                    "capability_id": "db:sql",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "from dojo.models import Note_Type"
                        },
                        {
                            "line_no": 18,
                            "line_content": "initial_queryset = Note_Type.objects.all().order_by(\"name\")"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "name_words = initial_queryset.values_list(\"name\", flat=True)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/parser_test.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/factory.py": {
            "capabilities": [
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from pathlib import Path"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import re"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/tool_issue_updater.py": {
            "capabilities": [
                {
                    "capability_id": "web:api",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "from dojo.celery import app"
                        },
                        {
                            "line_no": 11,
                            "line_content": "@dojo_async_task"
                        },
                        {
                            "line_no": 17,
                            "line_content": "@dojo_async_task"
                        },
                        {
                            "line_no": 18,
                            "line_content": "@app.task"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "def async_tool_issue_update(finding, *args, **kwargs):"
                        },
                        {
                            "line_no": 16,
                            "line_content": "def tool_issue_updater(finding, *args, **kwargs):"
                        },
                        {
                            "line_no": 22,
                            "line_content": "SonarQubeApiUpdater().update_sonarqube_finding(finding)"
                        },
                        {
                            "line_no": 25,
                            "line_content": "def update_findings_from_source_issues(**kwargs):"
                        }
                    ]
                },
                {
                    "capability_id": "threading:management",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "@dojo_async_task"
                        },
                        {
                            "line_no": 17,
                            "line_content": "@dojo_async_task"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/utils.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 22,
                            "line_content": "cwe = json.loads(cwe_node)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/testssl/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "content = filename.read()"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "content = content.decode(\"utf-8\")"
                        },
                        {
                            "line_no": 21,
                            "line_content": "reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"')"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 21,
                            "line_content": "reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"')"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/testssl/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/nikto/xml_parser.py": {
            "capabilities": [
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from defusedxml import ElementTree as ET"
                        },
                        {
                            "line_no": 13,
                            "line_content": "tree = ET.parse(file)"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 13,
                            "line_content": "tree = ET.parse(file)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/nikto/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 24,
                            "line_content": "if filename.name.lower().endswith(\".xml\"):"
                        },
                        {
                            "line_no": 26,
                            "line_content": "if filename.name.lower().endswith(\".json\"):"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 27,
                            "line_content": "return NiktoXMLParser().process_xml(filename, test)"
                        },
                        {
                            "line_no": 29,
                            "line_content": "return NiktoJSONParser().process_json(filename, test)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/nikto/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/nikto/json_parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 9,
                            "line_content": "data = json.load(file)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/twistlock/parser.py": {
            "capabilities": [
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import io"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 44,
                            "line_content": "data_vulnerability_id = row.get(\"CVE ID\", \"\")"
                        }
                    ]
                },
                {
                    "capability_id": "logging:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 9,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import json"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/twistlock/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/qualys/csv_parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 15,
                            "line_content": "content = csv_file.read()"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "content = content.decode(\"utf-8\")"
                        },
                        {
                            "line_no": 19,
                            "line_content": "csv_reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"',)"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "csv_reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"',)"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from datetime import datetime"
                        },
                        {
                            "line_no": 8,
                            "line_content": "from dateutil import parser"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 9,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/qualys/parser.py": {
            "capabilities": [
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import datetime"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from django.conf import settings"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "from defusedxml import ElementTree as etree"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import html2text"
                        }
                    ]
                },
                {
                    "capability_id": "monitoring:metrics",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "from cvss import CVSS3"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/qualys/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/retirejs/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 14,
                            "line_content": "tree = json.load(json_output)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/retirejs/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/tfsec/parser.py": {
            "capabilities": [
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 24,
                            "line_content": "data = json.load(filename)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/tfsec/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/appspider/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "vscan = ElementTree.parse(filename)"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "root = vscan.getroot()"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from dojo.models import Endpoint, Finding"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/appspider/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/ggshield/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 24,
                            "line_content": "json_data = json.load(filename)"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from dateutil import parser"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/ggshield/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/anchore_engine/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 17,
                            "line_content": "data = json.load(filename)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/anchore_engine/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/burp_api/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 48,
                            "line_content": "tree = json.load(file)"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 9,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 11,
                            "line_content": "DESCRIPTION_TEMPLATE = \"\"\"**{title}**"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/burp_api/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/php_security_audit_v2/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 20,
                            "line_content": "data = json.loads(str(tree, \"utf-8\"))"
                        },
                        {
                            "line_no": 22,
                            "line_content": "data = json.loads(tree)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 16,
                            "line_content": "tree = filename.read()"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/php_security_audit_v2/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/scantist/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 29,
                            "line_content": "tree = json.load(file)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/scantist/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/xanitizer/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "def get_findings(self, filename, test):"
                        },
                        {
                            "line_no": 22,
                            "line_content": "if filename is None:"
                        },
                        {
                            "line_no": 27,
                            "line_content": "root = self.parse_xml(filename)"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 30,
                            "line_content": "def parse_xml(self, filename):"
                        },
                        {
                            "line_no": 31,
                            "line_content": "tree = ET.parse(filename)"
                        },
                        {
                            "line_no": 34,
                            "line_content": "root = tree.getroot()"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 33,
                            "line_content": "if \"XanitizerFindingsList\" not in root.tag:"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/xanitizer/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/bundler_audit/parser.py": {
            "capabilities": [
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "from datetime import datetime"
                        },
                        {
                            "line_no": 21,
                            "line_content": "find_date = datetime.now()"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "lines = filename.read()"
                        },
                        {
                            "line_no": 15,
                            "line_content": "if isinstance(lines, bytes):"
                        },
                        {
                            "line_no": 16,
                            "line_content": "lines = lines.decode(\"utf-8\")"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 24,
                            "line_content": "warnings = lines.split(\"\\n\\n\")"
                        },
                        {
                            "line_no": 27,
                            "line_content": "gem_report_fields = warning.split(\"\\n\")"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/bundler_audit/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/immuniweb/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "from defusedxml import ElementTree"
                        },
                        {
                            "line_no": 28,
                            "line_content": "ImmuniScanTree = ElementTree.parse(file)"
                        },
                        {
                            "line_no": 29,
                            "line_content": "root = ImmuniScanTree.getroot()"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 28,
                            "line_content": "ImmuniScanTree = ElementTree.parse(file)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/immuniweb/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/neuvector/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 24,
                            "line_content": "tree = json.loads(str(data, \"utf-8\"))"
                        },
                        {
                            "line_no": 26,
                            "line_content": "tree = json.loads(data)"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "data = json_output.read()"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 6,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/neuvector/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/aws_prowler/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 20,
                            "line_content": "if file.name.lower().endswith(\".csv\"):"
                        },
                        {
                            "line_no": 21,
                            "line_content": "return self.process_csv(file, test)"
                        },
                        {
                            "line_no": 22,
                            "line_content": "if file.name.lower().endswith(\".json\"):"
                        },
                        {
                            "line_no": 23,
                            "line_content": "return self.process_json(file, test)"
                        },
                        {
                            "line_no": 33,
                            "line_content": "content = file.read()"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import csv"
                        },
                        {
                            "line_no": 4,
                            "line_content": "import json"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 33,
                            "line_content": "content = file.read()"
                        },
                        {
                            "line_no": 34,
                            "line_content": "if isinstance(content, bytes):"
                        },
                        {
                            "line_no": 35,
                            "line_content": "content = content.decode(\"utf-8\")"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "from datetime import date"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import sys"
                        },
                        {
                            "line_no": 37,
                            "line_content": "csv.field_size_limit(int(sys.maxsize / 10))"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/aws_prowler/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/pip_audit/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 17,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 38,
                            "line_content": "data = json.load(scan_file)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 38,
                            "line_content": "data = json.load(scan_file)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/pip_audit/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/invicti/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "def get_description_for_scan_types(self, scan_type):"
                        },
                        {
                            "line_no": 14,
                            "line_content": "return \"Invicti JSON format.\""
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "def get_findings(self, filename, test):"
                        },
                        {
                            "line_no": 25,
                            "line_content": "return super().get_findings(filename, test)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/invicti/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/talisman/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 26,
                            "line_content": "json_data = json.load(filename)"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 24,
                            "line_content": "def get_findings(self, filename, test):"
                        },
                        {
                            "line_no": 26,
                            "line_content": "json_data = json.load(filename)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/talisman/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/sarif/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 48,
                            "line_content": "tree = json.load(filehandle)"
                        }
                    ]
                },
                {
                    "capability_id": "logging",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import logging"
                        },
                        {
                            "line_no": 14,
                            "line_content": "logger = logging.getLogger(__name__)"
                        }
                    ]
                },
                {
                    "capability_id": "text:manipulation",
                    "evidence": [
                        {
                            "line_no": 3,
                            "line_content": "import textwrap"
                        }
                    ]
                },
                {
                    "capability_id": "time:management",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "import dateutil.parser"
                        }
                    ]
                },
                {
                    "capability_id": "web:framework",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "from django.utils.translation import gettext as _"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/sarif/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/npm_audit_7_plus/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import json"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "import logging"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/npm_audit_7_plus/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/burp_dastardly/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "from defusedxml import ElementTree as etree"
                        },
                        {
                            "line_no": 32,
                            "line_content": "tree = etree.parse(xml_output, etree.XMLParser())"
                        },
                        {
                            "line_no": 33,
                            "line_content": "return self.get_items(tree, test)"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 32,
                            "line_content": "tree = etree.parse(xml_output, etree.XMLParser())"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/burp_dastardly/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/anchorectl_vulns/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "import json"
                        },
                        {
                            "line_no": 15,
                            "line_content": "data = json.load(filename)"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/anchorectl_vulns/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/snyk_code/parser.py": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "import json"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/snyk_code/__init__.py": {
            "capabilities": []
        },
        "django-DefectDojo-master-results/dojo/tools/trustwave/parser.py": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "content = filename.read()"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 19,
                            "line_content": "reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"')"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 18,
                            "line_content": "content = content.decode(\"utf-8\")"
                        },
                        {
                            "line_no": 19,
                            "line_content": "reader = csv.DictReader(io.StringIO(content), delimiter=\",\", quotechar='\"')"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "import hashlib"
                        }
                    ]
                }
            ]
        },
        "django-DefectDojo-master-results/dojo/tools/trustwave/__init__.py": {
            "capabilities": []
        },
        "prettier-results/parser-glimmer.js": {
            "capabilities": []
        },
        "prettier-results/parser-flow.js": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "var fs=_interopDefault(require(\"fs\"));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "function createError(t,e){const r=new SyntaxError(t+\" (\"+e.start.line+\":\"+e.start.column+\")\");"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-vue.js": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "\"use strict\";"
                        }
                    ]
                },
                {
                    "capability_id": "web:template",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "function makeMap(e,t){const n=Object.create(null),a=e.split(\",\");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>n[e.toLowerCase()]:e=>n[e]}"
                        },
                        {
                            "line_no": 3,
                            "line_content": "const no=()=>!1,isNonPhrasingTag=makeMap(\"address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track\");"
                        },
                        {
                            "line_no": 9,
                            "line_content": "const isPlainTextElement=makeMap(\"script,style,textarea\",!0)"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "attribute=/^\\s*([^\\s\"'<>/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+))?/,"
                        },
                        {
                            "line_no": 5,
                            "line_content": "ncname=\"[a-zA-Z_][\\\\w\\\\-\\\\.]*\",qnameCapture=`((?:${ncname}\\\\:)?${ncname})`,startTagOpen=new RegExp(`^<${qnameCapture}`),"
                        },
                        {
                            "line_no": 6,
                            "line_content": "startTagClose=/^\\s*(\\/?)>/,endTag=new RegExp(`^<\\\\/${qnameCapture}[^>]*>`),doctype=/^<!DOCTYPE [^>]+>/i,comment=/^<!--/,conditionalComment=/^<!\\\\[/;"
                        }
                    ]
                },
                {
                    "capability_id": "testing:automation",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "let IS_REGEX_CAPTURING_BROKEN=!1;"
                        },
                        {
                            "line_no": 8,
                            "line_content": "\"x\".replace(/x(.)?/g,(e,t)=>{IS_REGEX_CAPTURING_BROKEN=\"\"===t});"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-postcss.js": {
            "capabilities": []
        },
        "prettier-results/parser-babylon.js": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "const s=new SyntaxError(t+\" (\"+e.start.line+\":\"+e.start.column+\")\");"
                        },
                        {
                            "line_no": 34,
                            "line_content": "var i={sourceType:\"script\",sourceFilename:void 0,startLine:1,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowSuperOutsideMethod:!1,plugins:[],strictMode:null,ranges:!1,tokens:!1};"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 26,
                            "line_content": "return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\"default\")?t.default:t"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-markdown.js": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "var util=_interopDefault(require(\"util\"))"
                        },
                        {
                            "line_no": 24,
                            "line_content": "function unwrapExports(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,\"default\")?r.default:r}"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "var path=_interopDefault(require(\"path\"))"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-parse5.js": {
            "capabilities": [
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "var require$$0=_interopDefault(require(\"stream\"));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 1,
                            "line_content": "\"use strict\";"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-typescript.js": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "var fs=_interopDefault(require(\"fs\"))"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "var os=_interopDefault(require(\"os\"))"
                        }
                    ]
                },
                {
                    "capability_id": "crypto:hashing",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "var crypto=_interopDefault(require(\"crypto\"))"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "const r=new SyntaxError(e+\" (\"+t.start.line+\":\"+t.start.column+\")\")"
                        }
                    ]
                }
            ]
        },
        "prettier-results/parser-graphql.js": {
            "capabilities": [
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 2,
                            "line_content": "function createError(e,n){const r=new SyntaxError(e+\" (\"+n.start.line+\":\"+n.start.column+\")\");return r.loc=n,r}"
                        },
                        {
                            "line_no": 22,
                            "line_content": "n.getLocation=function(e,n){var r=/\\r\\n|[\\n\\r]/g,t=1,i=n+1,o=void 0;for(;(o=r.exec(e.body))&&o.index<n;)t+=1,i=n+1-(o.index+o[0].length);return{line:t,column:i}}"
                        }
                    ]
                }
            ]
        },
        "prettier-results/index.js": {
            "capabilities": [
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "env:config",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "var os = _interopDefault(require('os'));"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "var os = _interopDefault(require('os'));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "var util = _interopDefault(require('util'));"
                        }
                    ]
                }
            ]
        },
        "prettier-results/bin-prettier.js": {
            "capabilities": [
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 6,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 14,
                            "line_content": "var readline = _interopDefault(require('readline'));"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 10,
                            "line_content": "var os = _interopDefault(require('os'));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 12,
                            "line_content": "var url = _interopDefault(require('url'));"
                        }
                    ]
                }
            ]
        },
        "prettier-results/third-party.js": {
            "capabilities": [
                {
                    "capability_id": "io:streaming",
                    "evidence": [
                        {
                            "line_no": 4,
                            "line_content": "var stream = _interopDefault(require('stream'));"
                        },
                        {
                            "line_no": 31,
                            "line_content": "const PassThrough = stream.PassThrough;"
                        }
                    ]
                },
                {
                    "capability_id": "system:info",
                    "evidence": [
                        {
                            "line_no": 5,
                            "line_content": "var os = _interopDefault(require('os'));"
                        }
                    ]
                },
                {
                    "capability_id": "file:manipulation",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "file:read",
                    "evidence": [
                        {
                            "line_no": 7,
                            "line_content": "var fs = _interopDefault(require('fs'));"
                        }
                    ]
                },
                {
                    "capability_id": "data:serialization",
                    "evidence": [
                        {
                            "line_no": 8,
                            "line_content": "var util = _interopDefault(require('util'));"
                        }
                    ]
                }
            ]
        }
    }
}