
{
  "capabilities": [
    {
      "capability_id": "web:framework",
      "evidence": [
        {
          "snippet": "from flask import Flask"
        },
        {
          "snippet": "class Apidoc(Blueprint):"
        },
        {
          "snippet": "class Resource(MethodView):"
        },
        {
          "snippet": "app.register_blueprint(apidoc.apidoc)"
        },
        {
          "snippet": "Namespace(*args, **kwargs)"
        }
      ]
    },
    {
      "capability_id": "web:template",
      "evidence": [
        {
          "snippet": "render_template('swagger-ui.html', title=api.title, specs_url=api.specs_url)"
        }
      ]
    },
    {
      "capability_id": "network:sockets",
      "evidence": [
        {
          "snippet": "socket.inet_aton(value)"
        },
        {
          "snippet": "socket.inet_pton(socket.AF_INET6, value)"
        },
        {
          "snippet": "socket.getaddrinfo(data['domain'], None)"
        }
      ]
    },
    {
      "capability_id": "time:management",
      "evidence": [
        {
          "snippet": "timegm(dt.utctimetuple())"
        },
        {
          "snippet": "time()"
        }
      ]
    },
    {
      "capability_id": "data:serialization",
      "evidence": [
        {
          "snippet": "marshal(value, self.type)"
        },
        {
          "snippet": "marshal(value, self.nested, skip_none=self.skip_none, ordered=ordered)"
        },
        {
          "snippet": "marshal(value, self.container.nested)"
        },
        {
          "snippet": "marshal(value, candidates[0].resolved, mask=self.mask, ordered=ordered)"
        },
        {
          "snippet": "unpack(resp)"
        }
      ]
    },
    {
      "capability_id": "crypto:hashing",
      "evidence": [
        {
          "snippet": "uuid5(self.collection.uuid, seed)"
        },
        {
          "snippet": "uuid5(NAMESPACE_URL, self.api.base_url)"
        }
      ]
    },
    {
      "capability_id": "web:api",
      "evidence": [
        {
          "snippet": "url_for(self.endpoint('specs'), _external=True)"
        },
        {
          "snippet": "has_app_context()"
        },
        {
          "snippet": "def abort(code=HTTPStatus.INTERNAL_SERVER_ERROR, message=None, **kwargs):"
        },
        {
          "snippet": "current_app.config.get('ERROR_INCLUDE_MESSAGE', True)"
        },
        {
          "snippet": "got_request_exception.send(current_app._get_current_object(), exception=e)"
        }
      ]
    },
    {
      "capability_id": "network:dns",
      "evidence": [
        {
          "snippet": "socket.getaddrinfo(data['domain'], None)"
        },
        {
          "snippet": "socket.getaddrinfo(server, None)"
        }
      ]
    },
    {
      "capability_id": "testing:automation",
      "evidence": [
        {
          "snippet": "def test_function():"
        },
        {
          "snippet": "pytest.raises(Exception)"
        }
      ]
    }
  ]
}
