
django:
  django.core.exceptions.ValidationError:
    - ValidationError(\n                    _("Can not set a finding as inactive without adding all mandatory notes"),\n                    code="inactive_without_mandatory_notes",\n                )
    - ValidationError(\n                    _("Can not set a finding as false positive without adding all mandatory notes"),\n                    code="false_p_without_mandatory_notes",\n                )
    - ValidationError(\n                    _("Can not set a finding as inactive without adding all mandatory notes"),\n                    code="inactive_without_mandatory_notes")
    - ValidationError(\n                    _("Can not set a finding as false positive without adding all mandatory notes"),\n                    code="false_p_without_mandatory_notes")
    - ValidationError(\n                    _("Can not set a finding as inactive without adding all mandatory notes"),\n                    code="not_active_or_false_p_true")
    - ValidationError(\n                    _("Can not set a finding as false positive without adding all mandatory notes"),\n                    code="not_active_or_false_p_true")
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - try:\n                    bug_endpoint.clean()\n                    try:\n                        finding.unsaved_endpoints = [bug_endpoint]\n                    except Exception as e:\n              ...
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - titleText = None\n            description = item.findtext("description")\n            # Cut the title down to the first sentence\n            sentences = re.split(\n                r"(?<!\w\.\w.)(?<![...
    - try:\n                        validate_ipv46_address(ip)\n                        endpoint = Endpoint(host=ip)\n                    except ValidationError:\n                        endpoint = Endpoint...
    - ValidationError(\n                self.get_help_text(),\n                code="password_too_short")
    - ValidationError(\n                self.get_help_text(),\n                code="password_too_short")
    - ValidationError(\n                self.get_help_text(),\n                code="password_no_number")
    - ValidationError(\n                self.get_help_text(),\n                code="password_no_upper")
    - ValidationError(\n                self.get_help_text(),\n                code="password_no_lower")
    - ValidationError(\n                self.get_help_text(),\n                code="password_no_symbol")
    - ValidationError(msg)
    - ValidationError(msg)
  django.db.transaction:
    - transaction.atomic()
    - transaction.atomic()
    - transaction.atomic()
    - transaction.atomic()
  django.http.JsonResponse:
    - JsonResponse({"result": "OK"})
    - JsonResponse({"result": "OK"})
    - JsonResponse({\n        "critical": open_findings_burndown.get("Critical", []),\n        "high": open_findings_burndown.get("High", []),\n        "medium": open_findings_burndown.get("Medium", []),\n ...
    - JsonResponse({"count": count})
    - JsonResponse({"count": 0})
  django.template.loader.render_to_string:
    - render_to_string(template, kwargs)
    - render_to_string(template, kwargs)
    - render_to_string(template, kwargs)
    - render_to_string(\n                    f"notifications/{notification_type}/other.tpl",\n                    kwargs,\n                )
    - render_to_string("dojo/report_widget.html", {"form": self.form,\n                                                            "multiple": self.multiple,\n                                               ...
    - render_to_string("dojo/custom_html_report_cover_page.html", {"heading": self.heading,\n                                                                            "sub_heading": self.sub_heading,\n   ...
    - render_to_string("dojo/report_widget.html", {"form": self.form,\n                                                            "multiple": self.multiple,\n                                               ...
    - render_to_string("dojo/custom_html_toc.html", {"heading": self.heading})
    - render_to_string("dojo/report_widget.html", {"form": self.form,\n                                                            "multiple": self.multiple,\n                                               ...
    - render_to_string(\n            "dojo/custom_html_report_wysiwyg_content.html",\n            {\n                "heading": self.heading,\n                "content": self.content,\n                "page_break_after": self.page_break_after,\n            })
    - render_to_string("dojo/report_widget.html", {"form": self.form,\n                                                            "multiple": self.multiple,\n                                                            "title": self.title})
    - render_to_string("dojo/custom_html_report_finding_list.html",\n                                {"title": self.title,\n                                 "findings": self.findings.qs,\n                  ...
    - render_to_string("dojo/report_findings.html",\n                                {"findings": self.paged_findings,\n                                 "filtered": self.findings,\n                         ...
    - render_to_string("dojo/custom_html_report_endpoint_list.html",\n                                {"title": self.title,\n                                 "endpoints": self.endpoints.qs,\n               ...
    - render_to_string("dojo/report_endpoints.html",\n                                {"endpoints": self.paged_endpoints,\n                                 "filtered": self.endpoints,\n                     ...
    - render_to_string(self.template_name, context)
  django.db.models.CharField:
    - CharField()
  django.contrib.auth.decorators.login_required:
    - # #dev envs\nimport logging\n\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\nfrom django.db.models.deletion import RestrictedError\nfrom django.http i...
    - # #  product\nimport logging\n\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts impo...
    - # # test types\nimport logging\n\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts im...
    - import contextlib\nimport logging\nfrom datetime import timedelta\n\nimport hyperlink\nfrom crum import get_current_user\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom dj...
    - import logging\nfrom pathlib import Path\n\nfrom auditlog.models import LogEntry\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import logi...
  django.utils.formats:
    - formats.date_format(stub_finding.date, "DATE_FORMAT")
  django.forms.widgets.Widget:
    - class MonthYearWidget(Widget):\n\n    """\n    A Widget that splits date input into two <select> boxes for month and year,\n    with 'day' defaulting to the first of the month.\n\n    Based on SelectD...
  django.core.files.base.ContentFile:
    - ContentFile(data)
    - ContentFile(self.file.read(), name=f"{uuid4()}.{extension}")
    - ContentFile(data)
  django.utils.functional.SimpleLazyObject:
    - if class_name is SimpleLazyObject:\n                        decompressed_fields[field] = Dojo_User.objects.get(id=model_value)\n                    else:\n                        decompressed_fields[field] = class_name.objects.get(id=model_value)
    - self.validate(\n            "lead",\n            expected_types=[User, Dojo_User, SimpleLazyObject],\n            required=False,\n            default=None,\n            **kwargs,\n        )
    - self.validate(\n            "user",\n            expected_types=[User, Dojo_User, SimpleLazyObject],\n            required=False,\n            default=get_current_user(),\n            **kwargs,\n        )
    - SimpleLazyObject(lambda: getattr(request, "user", None))
  django.urls.reverse:
    - reverse("configure_announcement")
    - reverse("view_finding", args=(linked_finding.id,))
    - reverse(\n                "download_risk_acceptance", args=(engagement.id, obj.id),\n            )
    - reverse("cred")
    - reverse("cred")
    - reverse(\n        "view_cred_product", args=(\n            cred.product.id,\n            cred.id,\n        ))
    - reverse(\n        "edit_cred_product", args=(\n            cred.product.id,\n            cred.id,\n        ))
    - reverse(\n        "delete_cred_product", args=(\n            cred.product.id,\n            cred.id,\n        ))
    - reverse(\n        "delete_cred_engagement", args=(\n            eid,\n            cred.id,\n        ))
    - reverse(\n        "delete_cred_test", args=(\n            tid,\n            cred.id,\n        ))
    - reverse(\n        "delete_cred_finding", args=(\n            fid,\n            cred.id,\n        ))
    - reverse("all_cred_product", args=(pid, ))
    - reverse("view_engagement", args=(eid, ))
    - reverse("all_cred_product", args=(pid, ))
    - reverse("view_engagement", args=(eid, ))
    - reverse("new_cred_product_engagement", args=(eid, ))
    - reverse("view_test", args=(tid, ))
    - reverse("new_cred_engagement_test", args=(tid, ))
    - reverse("view_finding", args=(fid, ))
    - reverse("new_cred_finding", args=(fid, ))
    - reverse(destination_url)
    - reverse(destination_url, args=(id, ))
    - reverse("dev_env")
    - reverse("dev_env")
    - reverse("dev_env")
    - reverse("endpoint")
    - reverse('endpoint_migrate')
    - reverse("view_endpoint", args=[endpoint.pk])
    - reverse("edit_endpoint", args=[endpoint.pk])
    - reverse("delete_endpoint", args=[endpoint.pk])
    - reverse("import_endpoint_meta", args=(product.id, ))
    - reverse("view_endpoint", args=(endpoint.id,))
    - reverse("view_product", args=(product.id,))
    - reverse("endpoint")
    - reverse("endpoint")
    - reverse("add_endpoint_meta_data", args=(eid,))
    - reverse("view_endpoint", args=(eid,))
    - reverse("view_endpoint", args=(eid,))
    - reverse("endpoint", args=())
    - reverse("endpoint")
    - reverse("view_engagement", args=(instance.id,))
    - reverse("engagement-detail", args=(instance.id,))
    - reverse("engagement_all_findings", args=(instance.id, ))
    - reverse("view_engagement", args=(instance.id, ))
    - reverse("view_product", args=(instance.product.id, ))
    - reverse("add_tests", args=(engagement.id, ))
    - reverse("view_engagement", args=(engagement.id, ))
    - reverse("view_engagements", args=(product.id, ))
    - reverse("view_engagement", args=(engagement_copy.id, ))
    - reverse("view_engagements", args=(product.id, ))
    - reverse("view_test", args=(new_test.id,))
    - reverse("test-detail", args=(new_test.id,))
    - reverse("add_tests", args=(eng.id, ))
    - reverse("add_findings", args=(new_test.id, ))
    - reverse("view_engagement", args=(eng.id, ))
    - reverse("view_test", args=(context.get("test").id, ))
    - reverse(\n            "import_scan_results",\n            args=(context.get("engagement", context.get("product")).id, ),\n        )
    - reverse("view_engagements", args=(eng.product.id, ))
    - reverse("view_engagements", args=(eng.product.id, ))
    - reverse("view_engagement", args=(eid, ))
    - reverse("view_engagement", args=(eid, ))
    - reverse("view_risk_acceptance", args=(eid, raid))
    - reverse("view_risk_acceptance", args=(eid, raid))
    - reverse("view_risk_acceptance", args=(eid, raid))
    - reverse("view_engagement", args=(eng.id, ))
    - reverse("view_engagement", args=(eid, ))
    - reverse('view_engagement', args=(eng.id, ))
    - reverse("vulnerable_endpoints")
    - reverse("view_endpoint", args=(endpoint.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding_id,))
    - reverse("view_finding", args=(finding_id,))
    - reverse("all_findings")
    - reverse("view_test", args=(finding.test.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_test", args=(finding.test.id,))
    - reverse("close_finding", args=(finding.id,))
    - reverse("view_test", args=(finding.test.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(fid,))
    - reverse("copy_finding", args=(finding_copy.id,))
    - reverse("view_test", args=(test.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("edit_template", args=(template.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_test", args=(tid,))
    - reverse("view_test", args=(tid,))
    - reverse("view_test", args=(test.id,))
    - reverse("templates")
    - reverse("templates")
    - reverse("templates")
    - reverse("edit_finding", args=(finding_to_merge_into.id,))
    - reverse(\n            "product_open_findings", args=(finding.test.engagement.product.id,),\n        )
    - reverse(\n                            "view_finding_group", args=(finding_group.id,),\n                        )
    - reverse(\n                            "view_finding_group", args=(finding_group.id,),\n                        )
    - reverse("view_finding", args=(duplicate.id,))
    - reverse("view_finding", args=(duplicate.id,))
    - reverse("view_finding", args=(duplicate_id,))
    - reverse("view_finding", args=(checked_duplicate_id,))
    - reverse("view_finding", args=(finding_id,))
    - reverse("view_finding", args=(jira_issues[0].finding_id,))
    - reverse("github")
    - reverse("github")
    - reverse("github")
    - reverse("view_group", args=(group_id,))
    - reverse("groups")
    - reverse("view_group", args=(group.id,))
    - reverse("view_group", args=(gid, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("view_group", args=(member.group.id, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("view_group", args=(member.group.id, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("view_group", args=(member.group.id, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("groups")
    - reverse("view_group", args=(member.group.id, ))
    - reverse("view_group", args=(gid, ))
    - reverse("view_group", args=(gid, ))
    - reverse("view_group", args=(gid,))
    - reverse("dashboard")
    - reverse("view_test", args=(test.id,))
    - reverse("test-detail", args=(test.id,))
    - reverse("view_test", args=(self.test.id,))
    - reverse("test-detail", args=(self.test.id,))
    - reverse('endpoint_migrate')
    - reverse("view_finding", args=(finding.id, ))
    - find.notes.all().reverse()
    - reverse("view_finding", args=(jissue.finding.id,))
    - reverse("view_finding_group", args=(jissue.finding_group.id,))
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("jira")
    - reverse("view_engineer", args=(request.user.id,))
    - items.reverse()
    - reverse("product_open_findings", args=(prod.id,))
    - reverse("product_open_findings", args=(prod.id,))
    - reverse("change_password")
    - reverse("product_type", args=[str(self.id)])
    - reverse("edit_product_type", args=(self.id,))
    - reverse("view_product", args=[str(self.id)])
    - reverse("view_product", args=(self.id,))
    - reverse("view_engagement", args=[str(self.id)])
    - reverse("view_engagement", args=(self.id,))
    - reverse("view_endpoint", args=[str(self.id)])
    - reverse("view_endpoint", args=(self.id,))
    - reverse("edit_dev_env", args=(self.id,))
    - reverse("view_test", args=[str(self.id)])
    - reverse("view_test", args=(self.id,))
    - reverse("view_finding", args=[str(self.id)])
    - reverse("view_finding", args=(self.id,))
    - reverse("view_finding", args=[str(self.finding.id)])
    - reverse("view_potential_finding", args=(self.id,))
    - reverse("view_test", args=[str(self.test.id)])
    - reverse("edit_template", args=[str(self.id)])
    - reverse("view_template", args=(self.id,))
    - reverse("complete_checklist",\n                               args=(self.engagement.id,))
    - reverse("view_risk_acceptance", args=(\n                    self.engagement_set.first().product.id, self.id))
    - reverse("note_type")
    - reverse("note_type")
    - reverse("note_type")
    - reverse("note_type")
    - reverse(reverse_url, args=(object_id, ))
    - reverse(reverse_url, args=(object_id, ))
    - reverse(reverse_url, args=(object_id, ))
    - reverse("alerts")
    - reverse("alerts")
    - reverse("notification_webhooks")
    - reverse("notification_webhooks")
    - reverse("notification_webhooks")
    - reverse("view_objects", args=(pid,))
    - reverse("view_objects", args=(pid,))
    - reverse("view_objects", args=(pid,))
    - reverse("view_product", args=(instance.id,))
    - reverse("product-detail", args=(instance.id,))
    - reverse("product")
    - reverse("view_product_metrics", args=(prod.id,))
    - reverse("view_product", args=(product.id,))
    - reverse("edit_product", args=(product.id,))
    - reverse("view_product", args=(pid,))
    - reverse("product")
    - reverse("add_tests", args=(engagement.id,))
    - reverse("import_scan_results", args=(engagement.id,))
    - reverse("view_engagement", args=(engagement.id,))
    - reverse("edit_engagement", args=(engagement.id,))
    - reverse("view_product", args=(pid,))
    - reverse("view_product", args=(technology.product.id,))
    - reverse("view_product", args=(technology.product.id,))
    - reverse("add_meta_data", args=(pid,))
    - reverse("view_product", args=(pid,))
    - reverse("view_product", args=(pid,))
    - reverse("view_test", args=(test.id,))
    - reverse("add_findings", args=(test.id,))
    - reverse("engagement_presets", args=(pid,))
    - reverse("engagement_presets", args=(pid,))
    - reverse("engagement_presets", args=(pid,))
    - reverse("view_product", args=(pid,))
    - reverse("view_product", args=(pid,))
    - reverse("view_user", args=(member.user.id,))
    - reverse("view_product", args=(member.product.id,))
    - reverse("view_user", args=(member.user.id,))
    - reverse("product")
    - reverse("view_product", args=(member.product.id,))
    - reverse("add_api_scan_configuration", args=(pid,))
    - reverse("view_api_scan_configurations", args=(pid,))
    - reverse("view_api_scan_configurations", args=(pid,))
    - reverse("view_api_scan_configurations", args=(pid,))
    - reverse("view_group", args=(group.group.id,))
    - reverse("view_product", args=(group.product.id,))
    - reverse("view_group", args=(group.group.id,))
    - reverse("view_product", args=(group.product.id,))
    - reverse("view_product", args=(pid,))
    - reverse("view_product_type", args=(instance.id,))
    - reverse("product_type-detail", args=(instance.id,))
    - reverse("product_type")
    - reverse("product_type")
    - reverse("product_type")
    - reverse("product_type")
