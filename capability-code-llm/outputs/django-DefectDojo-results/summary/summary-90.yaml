
django:
  django.utils.translation.gettext_lazy aliased as _:
    - _("Active but 5xx (or similar) error detected")
    - _("Temporary inactive because of 5xx (or similar) error")
    - _("Permanently inactive")
    - _("Name of the incoming webhook")
    - _("The full URL of the incoming webhook")
    - _("Name of the header required for interacting with Webhook endpoint")
    - _("Content of the header required for interacting with Webhook endpoint")
    - _("Status of the incoming webhook")
    - _("If endpoint is active, when error happened first time")
    - _("If endpoint is active, when error happened last time")
    - _("Description of the latest error")
    - _("Owner/receiver of notification, if empty processed as system notification")
    - _("Succesfully")
    - _("Login is valid")
    - _("Credential")
    - _("Authentication Provider")
    - _("HTML color")
    - _("Number of files")
    - _("Number of blank lines")
    - _("Number of comment lines")
    - _("Number of code lines")
    - _("Confidence level")
    - _("Version Number")
    - _("Full file path")
    - _("Folder")
    - _("Artifact")
    - _("Add tags that help describe this object. Choose from the list or add new tags. Press Enter key to add.")
    - _("Test Unique Identifier")
    - _("Name of the test")
    - _("Summary of the test")
    - _("Objective of the test")
    - _("How to test the objective")
    - _("What the results look like for a test")
    - _("Benchmark Type")
    - _("Pass")
    - _("Does the product meet the requirement?")
    - _("Applicable for this specific product.")
    - _("Total number of active benchmarks for this application.")
    - _("ASVS Level 1 Score")
    - _("Total number of active benchmarks for this application.")
    - _("ASVS Level 2 Score")
    - _("Total number of active benchmarks for this application.")
    - _("ASVS Level 3 Score")
    - _("Publish score to Product.")
    - _("The render order")
    - _("If selected, user doesn't have to answer this question")
    - _("The question text")
    - _("Select one or more")
    - _("Engagement Survey")
    - _("Answered Engagement Survey")
    - _("Answered Engagement Surveys")
    - _("General Engagement Survey")
    - _("General Engagement Surveys")
    - _("The answer text")
    - _("The selected choices as the answer")
    - _("Note deleted.")
    - _("Note was not successfully deleted.")
    - _("Note edited.")
    - _("Note was not succesfully edited.")
    - _("Product %s has been created successfully.")
    - _("Product Type %s has been created successfully.")
    - _("Event %s has occurred.")
    - _("System notification settings")
    - _("Settings saved.")
    - _("Personal notification settings")
    - _("Template notification settings")
    - _("Test of endpoint was not successful: %(error)s")
    - _("Notification Webhook added successfully.")
    - _("Notification Webhook deactivated successfully.")
    - _("Test of endpoint was not successful: %(error)s")
    - _("Notification Webhook updated successfully.")
    - _("Notification Webhook deleted successfully.")
    - _('The product "%(name)s" was deleted by %(user)s')
    - _('The product "%(name)s" was deleted')
    - _("Deletion of %(name)s")
    - _("Product List")
    - _("Product")
    - _("Product")
    - _("All objects have been filtered away. Displaying all objects")
    - _("Product")
    - _("All Engagements")
    - _("Product added successfully.")
    - _("GitHub information added successfully.")
    - _("This label is automatically applied to all issues created by DefectDojo")
    - _("New Product")
    - _(msg)
    - _("GITHUB information updated successfully.")
    - _("Edit Product")
    - _("Product and relationships will be removed in the background.")
    - _("Product and relationships removed.")
    - _("Product")
    - _("Engagement added successfully.")
    - _("New CI/CD Engagement")
    - _("New Interactive Engagement")
    - _("Technology added successfully.")
    - _("Add Technology")
    - _("Technology changed successfully.")
    - _("Edit Technology")
    - _("Technology deleted successfully.")
    - _("Delete Technology")
    - _("Metadata added successfully.")
    - _("Add Metadata")
    - _("Metadata edited successfully.")
    - _("Edit Metadata")
    - _("Pen Test")
    - _("Ad Hoc Engagement")
    - _("Ad Hoc Engagement")
    - _("Add Finding")
    - _("Can not set a finding as inactive without adding all mandatory notes")
    - _("Can not set a finding as false positive without adding all mandatory notes")
    - _("Can not set a finding as inactive or false positive without adding all mandatory notes")
    - _("Finding added successfully.")
    - _, request, success = self.process_forms(request, test, context)
    - _("Engagement Presets")
    - _("Edit Engagement Preset")
    - _("Engagement Preset Successfully Updated.")
    - _("Engagement Preset Successfully Created.")
    - _("New Engagement Preset")
    - _("Engagement presets and engagement relationships removed.")
    - _("Delete Engagement Preset")
    - _("Notification settings updated.")
    - _("You are not permitted to add users as owners.")
    - _("Product members added successfully.")
    - _("Add Product Member")
    - _("You are not permitted to make users to owners.")
    - _("Product member updated successfully.")
    - _("Edit Product Member")
    - _("Product member deleted successfully.")
    - _("Delete Product Member")
    - _("API connection successful with message: %(result)s.")
    - _("API Scan Configuration added successfully.")
    - _("Add API Scan Configuration")
    - _("API Scan Configurations")
    - _("API connection successful with message: %(result)s.")
    - _("API Scan Configuration successfully updated.")
    - _("Edit API Scan Configuration")
    - _("API Scan Configuration deleted.")
    - _("Delete Tool Configuration")
    - _("You are not permitted to make groups owners.")
    - _("Product group updated successfully.")
    - _("Edit Product Group")
    - _("Product group deleted successfully.")
    - _("Delete Product Group")
    - _("You are not permitted to add groups as owners.")
    - _("Product groups added successfully.")
    - _("Edit Product Group")
    - _('The product type "%(name)s" was deleted by %(user)s')
    - _('The product type "%(name)s" was deleted')
    - _("Deletion of %(name)s")
    - _("Product Type List")
    - _("Add Product Type")
    - _("Product type added successfully.")
    - _("View Product Type")
    - _("Previewing the relationships has been disabled.")
    - _("Delete Product Type")
    - _("Product type updated successfully.")
    - _("You are not permitted to add users as owners.")
    - _("Product type members added successfully.")
    - _("Add Product Type Member")
    - _("Edit Product Type Member")
    - _("There must be at least one owner for Product Type %(product_type_name)s.")
    - _("Product type member updated successfully.")
    - _("There must be at least one owner.")
    - _("Product type member deleted successfully.")
    - _("You are not permitted to add groups as owners.")
    - _("Product type groups added successfully.")
    - _("You are not permitted to make groups owners.")
    - _("Product type group updated successfully.")
    - _("Product type group deleted successfully.")
    - _("Simple Search")
    - _("Simple Search")
    - _("Checklist is %(level)s full (pass: %(total_viewed)s, total: %(total)s)")
    - _, iterable, _, num_cols, _, _, varname = token.split_contents()
    - _, iterable, _, num_cols, _, _, varname = token.split_contents()
    - _, iterable, _, num_cols, _, _, varname = token.split_contents()
    - _, iterable, _, num_cols, _, _, varname = token.split_contents()
    - _(display)
    - _('The test "%(name)s" was deleted by %(user)s')
    - _('The test "%(name)s" was deleted')
    - _("Deletion of %(name)s")
    - _("Test")
    - _("Note added successfully.")
    - _("Test saved.")
    - _("Edit Test")
    - _("Test and relationships will be removed in the background.")
    - _("Test and relationships removed.")
    - _("Delete Test")
    - _("Test Calendar")
    - _("Test: %s (%s)")
    - _(\n            "Set aside for test %s, on product %s. "\n            "Additional detail can be found at %s",\n        )
    - _("Add Finding")
    - _("Can not set a finding as inactive without adding all mandatory notes")
    - _("Can not set a finding as false positive without adding all mandatory notes")
    - _("Can not set a finding as inactive or false positive without adding all mandatory notes")
    - _("Addition of %s")
    - _('Finding "%s" was added by %s')
    - _("Finding added successfully.")
    - _, request, success = self.process_forms(request, test, context)
    - _("Can not set a finding as inactive without adding all mandatory notes")
    - _("Can not set a finding as false positive without adding all mandatory notes")
    - _("Can not set a finding as inactive or false positive without adding all mandatory notes")
    - _("Finding from template added successfully.")
    - _("The form has errors, please correct them below.")
    - _("Add Finding")
    - _("Add From Template")
    - _("Re-upload a %s")
    - (\n                context["test"],\n                finding_count,\n                new_finding_count,\n                closed_finding_count,\n                reactivated_finding_count,\n            ...
    - _("Product Tool Configuration Successfully Created.")
    - _("Tool Configurations")
    - _("Tool Configurations")
    - _("Tool Product Configuration Successfully Updated.")
    - _("Edit Product Tool Configuration")
    - _("Tool Product Successfully Deleted.")
    - _("Delete Product Tool Configuration")
    - _("Tool Type Configuration Successfully Created.")
    - _("New Tool Type Configuration")
    - _("Tool Type successfully updated.")
    - _("Edit Tool Type")
    - _("Tool Type List")
    - _('Code flow')
    - _('Rule name')
    - _('Rule short description')
    - _('Rule full description')
    - _("Hello %s! Your last login was %s (%s)")
    - _("API Key generated successfully.")
    - _("API Key")
    - _("API v2 Key")
    - _("You have logged out successfully.")
    - _("Alerts removed.")
    - _("Only superusers are allowed to change their global role.")
    - _("Profile updated successfully.")
    - _("User Profile - %(user_full_name)s")
    - _("Your password has been changed.")
    - _("Change Password")
    - _("All Users")
    - _("Add User")
    - _("Only superusers are allowed to add superusers. User was not saved.")
    - _("Only superusers are allowed to add users with a global role. User was not saved.")
    - _("User added successfully.")
    - _("User was not added successfully.")
    - _("View User")
    - _("Edit User")
    - _("Only superusers are allowed to edit superusers. User was not saved.")
    - _("Only superusers are allowed to edit users with a global role. User was not saved.")
    - _("User saved successfully.")
    - _("User was not saved successfully.")
    - _("You may not delete yourself.")
    - _("Only superusers are allowed to delete superusers. User was not removed.")
    - _("Only superusers are allowed to delete users with a global role. User was not removed.")
    - _("User and relationships removed.")
    - _("User cannot be deleted: %(error)s")
    - _("Delete User")
    - _("Product type members added successfully.")
    - _("Add Product Type Member")
    - _("Product members added successfully.")
    - _("Add Product Member")
    - _("Groups added successfully.")
    - _("Add Group Member")
    - _("Permissions updated.")
    - _("Home")
    - crit_count, high_count, med_count, low_count, _ = [\n            0, 0, 0, 0, 0,\n        ]
    - crit_count, high_count, med_count, low_count, _ = [\n            0, 0, 0, 0, 0,\n        ]
    - f_crit_count, f_high_count, f_med_count, f_low_count, _ = [\n            0, 0, 0, 0, 0,\n        ]
    - ra_crit_count, ra_high_count, ra_med_count, ra_low_count, _ = [\n            0, 0, 0, 0, 0,\n        ]
    - active_crit_count, active_high_count, active_med_count, active_low_count, _ = [\n            0, 0, 0, 0, 0,\n        ]
    - mn, _, fn = fq_name.rpartition(".")
  django.http.HttpResponseRedirect:
    - HttpResponseRedirect("dashboard")
    - HttpResponseRedirect(reverse("configure_announcement"))
    - HttpResponseRedirect("dashboard")
    - HttpResponseRedirect(reverse("cred"))
    - HttpResponseRedirect(reverse("cred"))
    - HttpResponseRedirect(reverse("all_cred_product", args=(pid, )))
    - HttpResponseRedirect(\n                reverse("view_engagement", args=(eid, )))
    - HttpResponseRedirect(reverse("all_cred_product", args=(pid, )))
    - HttpResponseRedirect(\n                reverse("view_engagement", args=(eid, )))
    - HttpResponseRedirect(reverse("view_test", args=(tid, )))
    - HttpResponseRedirect(reverse("view_finding", args=(fid, )))
    - HttpResponseRedirect(reverse(destination_url))
    - HttpResponseRedirect(reverse(destination_url, args=(id, )))
    - HttpResponseRedirect(reverse("dev_env"))
    - HttpResponseRedirect(reverse("dev_env"))
    - HttpResponseRedirect(reverse("dev_env"))
    - HttpResponseRedirect(reverse("import_endpoint_meta", args=(product.id, )))
    - HttpResponseRedirect(reverse("view_endpoint", args=(endpoint.id,)))
    - HttpResponseRedirect(reverse("view_product", args=(product.id,)))
    - HttpResponseRedirect(reverse("endpoint") + "?product=" + pid)
    - HttpResponseRedirect(reverse("endpoint") + f"?product={form.product.id}")
    - HttpResponseRedirect(reverse("add_endpoint_meta_data", args=(eid,)))
    - HttpResponseRedirect(reverse("view_endpoint", args=(eid,)))
    - HttpResponseRedirect(reverse("view_endpoint", args=(eid,)))
    - HttpResponseRedirect(reverse("endpoint", args=()))
    - HttpResponseRedirect(reverse("endpoint") + "?product=" + pid)
    - HttpResponseRedirect(\n                        reverse("add_tests", args=(engagement.id, )))
    - HttpResponseRedirect(\n                    reverse("view_engagement", args=(engagement.id, )))
    - HttpResponseRedirect(reverse("view_engagements", args=(product.id, )))
    - HttpResponseRedirect(\n                    reverse("add_tests", args=(eng.id, )))
    - HttpResponseRedirect(\n                    reverse("add_findings", args=(new_test.id, )))
    - HttpResponseRedirect(\n                    reverse("view_engagement", args=(eng.id, )))
    - def success_redirect(\n        self,\n        context: dict,\n    ) -> HttpResponseRedirect:\n        """Redirect the user to a place that indicates a successful import"""\n        return HttpResponseRedirect(reverse("view_test", args=(context.get("test").id, )))
    - HttpResponseRedirect(reverse("view_test", args=(context.get("test").id, )))
    - def failure_redirect(\n        self,\n        context: dict,\n    ) -> HttpResponseRedirect:\n        """Redirect the user to a place that indicates a failed import"""\n        return HttpResponseRedi...
    - HttpResponseRedirect(reverse(\n            "import_scan_results",\n            args=(context.get("engagement", context.get("product")).id, ),\n        ))
    - HttpResponseRedirect(reverse("view_engagements", args=(eng.product.id, )))
    - HttpResponseRedirect(reverse("view_engagements", args=(eng.product.id, )))
    - HttpResponseRedirect(\n                reverse("view_engagement", args=(eid, )))
    - HttpResponseRedirect(reverse("view_engagement", args=(eng.id, )))
    - HttpResponseRedirect(\n                reverse("view_engagement", args=(eid, )))
    - HttpResponseRedirect(reverse("view_finding", args=(finding_id,)))
    - HttpResponseRedirect(\n                    reverse("view_test", args=(finding.test.id,)),\n                )
    - HttpResponseRedirect(\n                reverse("close_finding", args=(finding.id,)),\n            )
    - HttpResponseRedirect(reverse("view_test", args=(finding.test.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(fid,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_finding", args=(finding.id,)))
    - HttpResponseRedirect(reverse("view_test", args=(tid,)))
    - HttpResponseRedirect(reverse("view_test", args=(tid,)))
    - HttpResponseRedirect(reverse("view_test", args=(test.id,)))
    - HttpResponseRedirect(reverse("templates"))
    - HttpResponseRedirect(reverse("templates"))
    - HttpResponseRedirect(reverse("templates"))
    - HttpResponseRedirect(\n                        reverse("edit_finding", args=(finding_to_merge_into.id,)),\n                    )
    - HttpResponseRedirect(reverse("github"))
    - HttpResponseRedirect(reverse("github"))
    - HttpResponseRedirect(reverse("github"))
    - HttpResponseRedirect(reverse("view_group", args=(gid, )))
    - HttpResponseRedirect(reverse("view_user", args=(member.user.id, )))
    - HttpResponseRedirect(reverse("view_group", args=(member.group.id, )))
    - HttpResponseRedirect(reverse("view_user", args=(member.user.id, )))
    - HttpResponseRedirect(reverse("view_group", args=(member.group.id, )))
    - HttpResponseRedirect(reverse("view_user", args=(member.user.id, )))
    - HttpResponseRedirect(reverse("view_group", args=(member.group.id, )))
    - HttpResponseRedirect(reverse("view_user", args=(member.user.id, )))
    - HttpResponseRedirect(reverse("groups"))
    - HttpResponseRedirect(reverse("view_group", args=(member.group.id, )))
    - HttpResponseRedirect(reverse("view_group", args=(gid, )))
    - HttpResponseRedirect(reverse("view_group", args=(gid, )))
    - HttpResponseRedirect(reverse("view_group", args=(gid,)))
    - HttpResponseRedirect(reverse("dashboard"))
    - HttpResponseRedirect(reverse("jira"))
    - HttpResponseRedirect(reverse("jira"))
    - HttpResponseRedirect(reverse("jira"))
    - HttpResponseRedirect(reverse("jira"))
    - HttpResponseRedirect(reverse("view_engineer", args=(request.user.id,)))
    - HttpResponseRedirect(fullURL)
    - HttpResponseRedirect(reverse("change_password"))
    - HttpResponseRedirect(reverse("note_type"))
    - HttpResponseRedirect(reverse("note_type"))
    - HttpResponseRedirect(reverse("note_type"))
    - HttpResponseRedirect(reverse("note_type"))
    - HttpResponseRedirect(reverse(reverse_url, args=(object_id, )))
    - HttpResponseRedirect(reverse(reverse_url, args=(object_id, )))
    - HttpResponseRedirect(reverse(reverse_url, args=(object_id, )))
    - HttpResponseRedirect(reverse("notification_webhooks"))
    - HttpResponseRedirect(reverse("notification_webhooks"))
    - HttpResponseRedirect(reverse("notification_webhooks"))
    - HttpResponseRedirect(reverse("view_objects", args=(pid,)))
    - HttpResponseRedirect(reverse("view_objects", args=(pid,)))
    - HttpResponseRedirect(reverse("view_objects", args=(pid,)))
    - HttpResponseRedirect(reverse("view_product", args=(product.id,)))
    - HttpResponseRedirect(reverse("edit_product", args=(product.id,)))
    - HttpResponseRedirect(reverse("view_product", args=(pid,)))
    - HttpResponseRedirect(reverse("product"))
    - HttpResponseRedirect(reverse("add_tests", args=(engagement.id,)))
    - HttpResponseRedirect(reverse("import_scan_results", args=(engagement.id,)))
    - HttpResponseRedirect(reverse("view_engagement", args=(engagement.id,)))
    - HttpResponseRedirect(reverse("edit_engagement", args=(engagement.id,)))
    - HttpResponseRedirect(reverse("view_product", args=(pid,)))
    - HttpResponseRedirect(reverse("view_product", args=(technology.product.id,)))
