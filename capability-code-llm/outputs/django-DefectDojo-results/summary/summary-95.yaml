
django:
  django.db.models.deletion.RestrictedError:
    - try:\n                        user.delete()\n                        messages.add_message(request,\n                                            messages.SUCCESS,\n                                     ...
  django.views.decorators.vary.vary_on_cookie:
    - import csv\nimport logging\nimport mimetypes\nimport operator\nimport re\nfrom datetime import datetime\nfrom functools import reduce\nfrom tempfile import NamedTemporaryFile\nfrom time import strftim...
    - # #  metrics\nimport collections\nimport logging\nimport operator\nfrom calendar import monthrange\nfrom collections import OrderedDict\nfrom datetime import date, datetime, timedelta\nfrom functools ...
    - # #  metrics\nimport collections\nimport logging\nimport operator\nfrom calendar import monthrange\nfrom collections import OrderedDict\nfrom datetime import date, datetime, timedelta\nfrom functools ...
    - # #  metrics\nimport collections\nimport logging\nimport operator\nfrom calendar import monthrange\nfrom collections import OrderedDict\nfrom datetime import date, datetime, timedelta\nfrom functools ...
    - # #  tests\nimport base64\nimport logging\nimport operator\nfrom datetime import datetime\nfrom functools import reduce\n\nfrom django.contrib import messages\nfrom django.contrib.admin.utils import N...
  django.db.connections:
    - connection = connections[DEFAULT_DB_ALIAS]
  django.forms.utils.flatatt:
    - flatatt(final_attrs)
  django.core.exceptions.ImproperlyConfigured:
    - ImproperlyConfigured(msg)
    - ImproperlyConfigured(msg)
  django.utils.timezone:
    - timezone.now()
    - timezone.localdate()
    - timezone.make_aware(\n                datetime.combine(context.get("scan_date"), datetime.min.time()),\n            )
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(\n                datetime.combine(findings.qs.last().date, datetime.min.time()),\n            )
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(datetime.combine(all_findings.last().date, datetime.min.time()))
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - pytz.timezone(get_system_setting("time_zone"))
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.localtime(timezone.now())
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(value)
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.localtime(self.expiration_date)
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.now()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(datetime.combine(filters["start_date"], datetime.min.time()))
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(datetime.combine(findings.qs.last().date, datetime.min.time()))
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.localtime(risk_acceptance.expiration_date)
    - timezone.now()
    - timezone.localtime(risk_acceptance.expiration_date)
    - timezone.localtime(risk_acceptance.expiration_date)
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.localtime(timezone.now())
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.now()
    - timezone.make_aware(datetime.combine(first_sunday, datetime.min.time()))
    - timezone.make_aware(datetime.combine(created, datetime.min.time()))
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.get_current_timezone()
    - timezone.now()
    - timezone.now()
    - timezone.now()
  django.db.models.signals.pre_delete:
    - receiver(pre_delete, sender=Cred_User)
    - receiver(pre_delete, sender=Engagement)
    - receiver(pre_delete, sender=Finding)
    - receiver(pre_delete, sender=Test)
    - receiver(pre_delete, sender=Engagement)
    - receiver(pre_delete, sender=Notes)
    - receiver(pre_delete, sender=Risk_Acceptance)
    - receiver(pre_delete, sender=Test)
    - receiver(pre_delete, sender=Tool_Product_Settings)
  django.db.migrations.executor.MigrationExecutor:
    - MigrationExecutor(connection)
  django.http.HttpResponse:
    - HttpResponse()
    - HttpResponse()
    - def get(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> HttpResponse:\n        """Process GET requests for t...
    - def post(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> HttpResponse:\n        """Process POST requests for...
    - HttpResponse(content=output)
    - HttpResponse(content_type="text/csv")
    - HttpResponse(\n        content=stream,\n        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",\n    )
    - HttpResponse(json.dumps(data))
    - HttpResponse(json.dumps(data))
    - HttpResponse(leads_as_json, content_type="json")
    - HttpResponse(status=500)
    - HttpResponse(status=400)
    - HttpResponse(status=500)
    - HttpResponse("")
    - def home(request: HttpRequest) -> HttpResponse:\n    return HttpResponseRedirect(reverse("dashboard"))
    - def dashboard(request: HttpRequest) -> HttpResponse:\n    engagements = get_authorized_engagements(Permissions.Engagement_View).distinct()\n    findings = get_authorized_findings(Permissions.Finding_V...
    - def support(request: HttpRequest) -> HttpResponse:\n    add_breadcrumb(title="Support", top_level=not len(request.GET), request=request)\n    return render(request, "dojo/support.html", {})
    - def webhook_responser_handler(\n    log_level: str,\n    message: str,\n) -> HttpResponse:\n    # These represent an error and will be sent to the debugger\n    # for development purposes\n    if log_...
    - HttpResponse(message, status=200)
    - def get(self, request: HttpRequest) -> HttpResponse:\n        add_breadcrumb(title="Report Builder", top_level=True, request=request)\n        return render(request, self.get_template(), self.get_context(request))
    - def post(self, request: HttpRequest) -> HttpResponse:\n        # saving the report\n        form = self.get_form(request)\n        if form.is_valid():\n            self._set_state(request)\n            return render(request, self.get_template(), self.get_context())\n        raise PermissionDenied
    - HttpResponse(content_type="text/csv")
    - HttpResponse(\n            content=stream,\n            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",\n        )
    - HttpResponse(resp)
    - HttpResponse(resp)
    - def get(\n        self,\n        request: HttpRequest,\n    ) -> HttpResponse:\n        # permission check\n        self.permission_check(request)\n        # Set up the initial context\n        contex...
    - def post(\n        self,\n        request: HttpRequest,\n    ) -> HttpResponse:\n        # permission check\n        self.permission_check(request)\n        # Set up the initial context\n        conte...
    - HttpResponse(content=output)
    - def get(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> HttpResponse:\n        """Process GET requests for the ReImport View"""\n        # process the request and path ...
    - def post(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> HttpResponse:\n        """Process POST requests for the ReImport View"""\n        # process the request and pat...
    - HttpResponse("User-Agent: *\nDisallow: /", content_type="text/plain")
    - HttpResponse(alerts, content_type="application/json")
  django.core.checks.register aliased as register_check:
    - register_check(check_configuration_deduplication, "dojo")
  django.contrib.auth.models.User:
    - User.objects.get(id=form["lead"].value())
    - self.validate(\n            "lead",\n            expected_types=[User, Dojo_User, SimpleLazyObject],\n            required=False,\n            default=None,\n            **kwargs,\n        )
    - self.validate(\n            "user",\n            expected_types=[User, Dojo_User, SimpleLazyObject],\n            required=False,\n            default=get_current_user(),\n            **kwargs,\n        )
    - User.objects.get(id=user_id)
  django.core.validators.MaxValueValidator:
    - MaxValueValidator(1.0)
    - MaxValueValidator(1.0)
    - MaxValueValidator(10.0)

drf_spectacular:
  drf_spectacular.utils.OpenApiResponse:
    - OpenApiResponse(\n                description="Returned if finding does not exist",\n            )
    - OpenApiResponse(\n                description="Returned if the metadata was correctly deleted",\n            )
    - OpenApiResponse(\n                description="Returned if finding does not exist",\n            )
    - OpenApiResponse(\n                description="Returned if there was a problem with the metadata information",\n            )
    - OpenApiResponse(\n                description="Returned if finding does not exist",\n            )
    - OpenApiResponse(\n                description="Returned if there was a problem with the metadata information",\n            )
    - OpenApiResponse(\n                description="Returned if finding does not exist",\n            )
    - OpenApiResponse(\n                description="Returned if there was a problem with the metadata information",\n            )
  drf_spectacular.extensions.OpenApiAuthenticationExtension:
    - class RemoteUserScheme(OpenApiAuthenticationExtension):\n    target_class = "dojo.remote_user.RemoteUserAuthentication"\n    name = "remoteUserAuth"\n    match_subclasses = True\n    priority = 1\n\n ...
  drf_spectacular.views.SpectacularSwaggerView:
    - SpectacularSwaggerView.as_view(url=get_system_setting("url_prefix") + "/api/v2/oa3/schema/?format=json")
  drf_spectacular.utils.extend_schema:
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.DeletePreviewSerializer(many=True),\n        },\n    )
    - extend_schema(\n            parameters=[\n                OpenApiParameter(\n                    "prefetch",\n                    OpenApiTypes.STR,\n                    OpenApiParameter.QUERY,\n      ...
    - extend_schema(\n            parameters=[\n                OpenApiParameter(\n                    "prefetch",\n                    OpenApiTypes.STR,\n                    OpenApiParameter.QUERY,\n      ...
    - extend_schema(\n        exclude=True,\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        request=OpenApiTypes.NONE, responses={status.HTTP_200_OK: ""},\n    )
    - extend_schema(\n        request=OpenApiTypes.NONE, responses={status.HTTP_200_OK: ""},\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.EngagementToNotesSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewNoteOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.NoteSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.EngagementToFilesSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewFileOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.FileSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.EngagementCheckListSerializer,\n        responses={\n            status.HTTP_201_CREATED: serializers.EngagementCheckListSerializer,\n        },\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RawFileSerializer,\n        },\n    )
    - extend_schema(\n        request=serializers.EngagementUpdateJiraEpicSerializer,\n        responses={status.HTTP_200_OK: serializers.EngagementUpdateJiraEpicSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RiskAcceptanceProofSerializer,\n        },\n    )
    - extend_schema(\n        parameters=[\n            OpenApiParameter(\n                "related_fields",\n                OpenApiTypes.BOOL,\n                OpenApiParameter.QUERY,\n                req...
    - extend_schema(\n        parameters=[\n            OpenApiParameter(\n                "related_fields",\n                OpenApiTypes.BOOL,\n                OpenApiParameter.QUERY,\n                req...
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingCloseSerializer,\n        responses={status.HTTP_200_OK: serializers.FindingCloseSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.TagSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.TagSerializer,\n        responses={status.HTTP_201_CREATED: serializers.TagSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.BurpRawRequestResponseSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.BurpRawRequestResponseSerializer,\n        responses={\n            status.HTTP_201_CREATED: serializers.BurpRawRequestResponseSerializer,\n        },\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.FindingToNotesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewNoteOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.NoteSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.FindingToFilesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewFileOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.FileSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RawFileSerializer,\n        },\n    )
    - extend_schema(\n        request=serializers.FindingNoteSerializer,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - extend_schema(\n        methods=["PUT", "PATCH"],\n        request=serializers.TagSerializer,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - extend_schema(\n        responses={\n            status.HTTP_200_OK: serializers.FindingSerializer(many=True),\n        },\n    )
    - extend_schema(\n        request=OpenApiTypes.NONE,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - extend_schema(\n        request=OpenApiTypes.NONE,\n        parameters=[\n            OpenApiParameter(\n                "new_fid", OpenApiTypes.INT, OpenApiParameter.PATH,\n            ),\n        ],\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer(many=True),\n            status.HTTP_404_NOT_FOUND: OpenApiResponse(\n                description="Returned if finding does not exist",\n            ),\n        },\n    )
    - extend_schema(\n        methods=["DELETE"],\n        parameters=[\n            OpenApiParameter(\n                "name",\n                OpenApiTypes.INT,\n                OpenApiParameter.QUERY,\n ...
    - extend_schema(\n        methods=["PUT"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            statu...
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            stat...
    - extend_schema(\n        methods=["post", "patch"],\n        request=serializers.MetaMainSerializer,\n        responses={status.HTTP_200_OK: serializers.MetaMainSerializer},\n        filters=False,\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        exclude=True,\n    )
    - extend_schema(\n        exclude=True,\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        exclude=True,\n    )
    - extend_schema(\n        exclude=True,\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.TestToNotesSerializer},\n    )
