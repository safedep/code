
dojo:
  dojo.forms.ProductNotificationsForm:
    - ProductNotificationsForm(\n        instance=Notifications.objects.filter(user=request.user).filter(product=prod).first())
    - ProductNotificationsForm(request.POST, instance=product_notifications)
  dojo.models.Test_Import:
    - model = Test_Import
    - Test_Import.objects.none()
    - Q(test_import__type=Test_Import.REIMPORT_TYPE)
    - model = Test_Import
    - model = Test_Import
    - Test_Import.objects.filter(findings_affected=finding)
    - def process_scan(\n        self,\n        scan: TemporaryUploadedFile,\n        *args: list,\n        **kwargs: dict,\n    ) -> tuple[Test, int, int, int, int, int, Test_Import]:\n        """\n       ...
    - def update_import_history(\n        self,\n        new_findings: list[Finding] = [],\n        closed_findings: list[Finding] = [],\n        reactivated_findings: list[Finding] = [],\n        untouched...
    - Test_Import.objects.create(\n            test=self.test,\n            import_settings=import_settings,\n            version=self.version,\n            branch_tag=self.branch_tag,\n            build_id...
    - message = f"{self.scan_type} processed a total of {finding_count} findings"\n            if self.import_type == Test_Import.IMPORT_TYPE:\n                # Check for close old findings context to dete...
    - message = f"{self.scan_type} processed a total of {finding_count} findings"\n            if self.import_type == Test_Import.IMPORT_TYPE:\n                # Check for close old findings context to dete...
    - super().__init__(\n            self,\n            *args,\n            import_type=Test_Import.IMPORT_TYPE,\n            **kwargs,\n        )
    - def process_scan(\n        self,\n        scan: TemporaryUploadedFile,\n        *args: list,\n        **kwargs: dict,\n    ) -> tuple[Test, int, int, int, int, int, Test_Import]:\n        """\n       ...
    - super().__init__(\n            self,\n            *args,\n            import_type=Test_Import.REIMPORT_TYPE,\n            **kwargs,\n        )
    - def process_scan(\n        self,\n        scan: TemporaryUploadedFile,\n        *args: list,\n        **kwargs: dict,\n    ) -> tuple[Test, int, int, int, int, int, Test_Import]:\n        """\n       ...
    - self.validate(\n            "import_type",\n            expected_types=[str],\n            required=False,\n            default=Test_Import.IMPORT_TYPE,\n            **kwargs,\n        )
    - Test_Import.objects.none()
    - Test_Import.objects.all()
    - Test_Import.objects.all()
    - Test_Import.objects.annotate(\n        test__engagement__product__prod_type__member=Exists(authorized_product_type_roles),\n        test__engagement__product__member=Exists(authorized_product_roles),\...
    - Test_Import.objects.filter(test=test)
  dojo.endpoint.queries.get_authorized_endpoint_status:
    - get_authorized_endpoint_status(\n            Permissions.Endpoint_View,\n        )
    - get_authorized_endpoint_status(Permissions.Endpoint_View, endpoints_query, request.user)
    - get_authorized_endpoint_status(Permissions.Endpoint_View, endpoints_closed, request.user)
    - get_authorized_endpoint_status(Permissions.Endpoint_View, accepted_endpoints, request.user)
  dojo.filters.EngagementTestFilterWithoutObjectLookups:
    - filter_class = EngagementTestFilterWithoutObjectLookups if filter_string_matching else EngagementTestFilter
  dojo.utils.get_last_object_or_none:
    - get_last_object_or_none(Engagement, product=product, name=engagement_name)
    - get_last_object_or_none(Test, engagement=engagement, title=test_title, scan_type=scan_type)
    - get_last_object_or_none(Test, engagement=engagement, scan_type=scan_type)
  dojo.forms.Delete_Product_GroupForm:
    - Delete_Product_GroupForm(instance=group)
    - Delete_Product_GroupForm(request.POST, instance=group)
  dojo.forms.Add_Product_Type_GroupForm:
    - Add_Product_Type_GroupForm(initial={"product_type": pt.id})
    - Add_Product_Type_GroupForm(request.POST, initial={"product_type": pt.id})
  dojo.user.urls.urlpatterns aliased as user_urls:
    - ur += user_urls
  dojo.models.UserContactInfo:
    - model = UserContactInfo
    - UserContactInfo.objects.none()
    - UserContactInfo.objects.all()
    - model = UserContactInfo
    - UserContactInfo.objects.get(\n                                user_id=user.id,\n                            )
  dojo.filters.GroupFilter:
    - GroupFilter(request.GET, queryset=groups)
  dojo.tools.api_cobalt.api_client.CobaltAPI:
    - SCAN_APIS = {\n                "Bugcrowd API": BugcrowdAPI,\n                "BlackDuck API": BlackduckAPI,\n                "Cobalt.io": CobaltAPI,\n                "Edgescan": EdgescanAPI,\n                "SonarQube": SonarQubeAPI,\n                "Vulners": VulnersAPI,\n             }
  dojo.tools.utils.get_npm_cwe:
    - get_npm_cwe(item_node)
    - get_npm_cwe(item_node)
  dojo.tools.api_sonarqube.updater.SonarQubeApiUpdater:
    - SonarQubeApiUpdater()
  dojo.api_v2.views.DevelopmentEnvironmentViewSet:
    - v2_api.register(r"development_environments", DevelopmentEnvironmentViewSet, basename="development_environment")
  dojo.utils.add_breadcrumb:
    - add_breadcrumb(\n        title=gettext("Announcement Configuration"),\n        top_level=True,\n        request=request,\n    )
    - add_breadcrumb(title="Components", top_level=True, request=request)
    - add_breadcrumb(\n            title="New Credential", top_level=False, request=request)
    - add_breadcrumb(\n        title="Edit Credential Configuration",\n        top_level=False,\n        request=request)
    - add_breadcrumb(title="View", top_level=False, request=request)
    - add_breadcrumb(title="Credential Manager", top_level=True, request=request)
    - add_breadcrumb(\n        title="Credential Manager", top_level=False, request=request)
    - add_breadcrumb(\n        title="Credential Manager", top_level=False, request=request)
    - add_breadcrumb(\n        title="Credential Manager", top_level=False, request=request)
    - add_breadcrumb(\n        title="Credential Manager", top_level=False, request=request)
    - add_breadcrumb(\n        title="Edit Credential Configuration",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Add Credential Configuration", top_level=False, request=request)
    - add_breadcrumb(\n        title="Add Credential Configuration", top_level=False, request=request)
    - add_breadcrumb(\n        title="Add Credential Configuration", top_level=False, request=request)
    - add_breadcrumb(title="Delete Credential", top_level=False, request=request)
    - add_breadcrumb(title="Environment List", top_level=True, request=request)
    - add_breadcrumb(title="Add Environment", top_level=False, request=request)
    - add_breadcrumb(title="Edit Environment", top_level=False, request=request)
    - add_breadcrumb(title=view_name, top_level=not len(request.GET), request=request)
    - add_breadcrumb(parent=endpoint, title="Edit", top_level=False, request=request)
    - add_breadcrumb(title="Add Endpoint", top_level=False, request=request)
    - add_breadcrumb(parent=endpoint, title="Add Metadata", top_level=False, request=request)
    - add_breadcrumb(title="Endpoint Meta Importer", top_level=False, request=request)
    - add_breadcrumb(\n        title="Engagement Calendar", top_level=True, request=request)
    - add_breadcrumb(\n        title=f"{view.capitalize()} Engagements",\n        top_level=not len(request.GET),\n        request=request)
    - add_breadcrumb(\n        title="All Engagements",\n        top_level=not len(request.GET),\n        request=request)
    - add_breadcrumb(parent=eng, top_level=False, request=request)
    - add_breadcrumb(parent=eng, top_level=False, request=request)
    - add_breadcrumb(\n        parent=eng, title="Add Tests", top_level=False, request=request)
    - add_breadcrumb(\n        parent=eng,\n        title="Complete checklist",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        parent=eng,\n        title="Upload a threat model",\n        top_level=False,\n        request=request)
    - add_breadcrumb(title="Findings", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title="Add Stub Finding", top_level=False, request=request)
    - add_breadcrumb(title="Template Listing", top_level=True, request=request)
    - add_breadcrumb(title="Add Template", top_level=False, request=request)
    - add_breadcrumb(title="Edit Template", top_level=False, request=request)
    - add_breadcrumb(title="New GitHub Configuration", top_level=False, request=request)
    - add_breadcrumb(title="GitHub List", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title="Delete", top_level=False, request=request)
    - add_breadcrumb(title="All Groups", top_level=True, request=request)
    - add_breadcrumb(title="View Group", top_level=False, request=request)
    - add_breadcrumb(title="Edit Group", top_level=False, request=request)
    - add_breadcrumb(title="Edit Group", top_level=False, request=request)
    - add_breadcrumb(title="Delete Group", top_level=False, request=request)
    - add_breadcrumb(title="Delete Group", top_level=False, request=request)
    - add_breadcrumb(title="Add Group", top_level=False, request=request)
    - add_breadcrumb(title="Add Group", top_level=False, request=request)
    - add_breadcrumb(title="Add Group Member", top_level=False, request=request)
    - add_breadcrumb(title="Edit a Group Member", top_level=False, request=request)
    - add_breadcrumb("Delete a group member", top_level=False, request=request)
    - add_breadcrumb(title="Add Product Group", top_level=False, request=request)
    - add_breadcrumb(title="Add Product Type Group", top_level=False, request=request)
    - add_breadcrumb(request=request, clear=True)
    - add_breadcrumb(title="Support", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title="New Jira Configuration", top_level=False, request=request)
    - add_breadcrumb(title="New Jira Configuration (Advanced)", top_level=False, request=request)
    - add_breadcrumb(title="Edit JIRA Configuration", top_level=False, request=request)
    - add_breadcrumb(title="JIRA List", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title="Delete", top_level=False, request=request)
    - add_breadcrumb(title="Delete", top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=not len(request.GET), request=request)
    - add_breadcrumb(title=page_name, top_level=not len(request.GET), request=request)
    - add_breadcrumb(title=page_name, top_level=True, request=request)
    - add_breadcrumb(title=_("Bi-Weekly Metrics"), top_level=True, request=request)
    - add_breadcrumb(title=_("Bi-Weekly Metrics"), top_level=True, request=request)
    - add_breadcrumb(title=_("Engineer Metrics"), top_level=True, request=request)
    - add_breadcrumb(title=f"{user.get_full_name()} Metrics", top_level=False, request=request)
    - add_breadcrumb(title="Note Type List", top_level=True, request=request)
    - add_breadcrumb(title="Edit Note Type", top_level=False, request=request)
    - add_breadcrumb(title="Disable Note Type", top_level=False, request=request)
    - add_breadcrumb(title="Enable Note Type", top_level=False, request=request)
    - add_breadcrumb(title="Add Note Type", top_level=False, request=request)
    - add_breadcrumb(title=_("System notification settings"), top_level=False, request=request)
    - add_breadcrumb(title=_("Personal notification settings"), top_level=False, request=request)
    - add_breadcrumb(title=_("Template notification settings"), top_level=False, request=request)
    - add_breadcrumb(title=self.breadcrumb, top_level=False, request=request)
    - add_breadcrumb(title=_("Product List"), top_level=not len(request.GET), request=request)
    - add_breadcrumb(parent=prod, top_level=False, request=request)
    - add_breadcrumb(title=_("New Product"), top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=True, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=_("Delete Product Type"), top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=_("Add Product Type Member"), top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(page_name, top_level=False, request=request)
    - add_breadcrumb(title="New regulation", top_level=False, request=request)
    - add_breadcrumb(title="Edit Regulation", top_level=False, request=request)
    - add_breadcrumb(title="Regulations", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title="Report Builder", top_level=True, request=request)
    - add_breadcrumb(parent=product, title="Vulnerable Product Endpoints Report", top_level=False, request=request)
    - add_breadcrumb(title="Generate Report", top_level=False, request=request)
    - add_breadcrumb(title=_("Simple Search"), top_level=True, request=request)
    - add_breadcrumb(\n            title="New SLA configuration",\n            top_level=False,\n            request=request)
    - add_breadcrumb(\n        title="Edit SLA Configuration",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="SLA Configurations",\n        top_level=not len(\n            request.GET),\n        request=request)
    - add_breadcrumb(\n        title="Delete " + survey.survey.name + " Questionnaire",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Answer " + survey.survey.name + " Survey",\n        top_level=False,\n        request=request)
    - add_breadcrumb(title="Assign Questionnaire", top_level=False, request=request)
    - add_breadcrumb(\n        title=survey.survey.name + " Questionnaire Responses",\n        top_level=False,\n        request=request)
    - add_breadcrumb(title="Add Questionnaire", top_level=False, request=request)
    - add_breadcrumb(title="Edit Questionnaire", top_level=False, request=request)
    - add_breadcrumb(title="Delete Questionnaire", top_level=False, request=request)
    - add_breadcrumb(title="Create Questionnaire", top_level=False, request=request)
    - add_breadcrumb(title="Update Questionnaire Questions", top_level=False, request=request)
    - add_breadcrumb(title="Questionnaires", top_level=True, request=request)
    - add_breadcrumb(title="Questions", top_level=False, request=request)
    - add_breadcrumb(title="Add Question", top_level=False, request=request)
    - add_breadcrumb(title="Edit Question", top_level=False, request=request)
    - add_breadcrumb(title="Add Choice", top_level=False, request=request)
    - add_breadcrumb(title="Add Empty Questionnaire", top_level=False, request=request)
    - add_breadcrumb(\n        title=survey.survey.name + " Questionnaire Responses",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Delete " + survey.survey.name + " Questionnaire",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Delete " + survey.survey.name + " Questionnaire",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Answer Empty " + engagement_survey.name + " Questionnaire",\n        top_level=False,\n        request=request)
    - add_breadcrumb(\n        title="Link Questionnaire to new Engagement",\n        top_level=False,\n        request=request)
    - self.add_breadcrumb(request)
    - self.add_breadcrumb(request)
    - def add_breadcrumb(self, request):\n        add_breadcrumb(\n            title="Link Questionnaire to existing Engagement",\n            top_level=False,\n            request=request)
    - add_breadcrumb(\n            title="Link Questionnaire to existing Engagement",\n            top_level=False,\n            request=request)
    - add_breadcrumb(title="Application settings", top_level=False, request=request)
    - add_breadcrumb(title="Application settings", top_level=False, request=request)
    - add_breadcrumb(title=_("Test Calendar"), top_level=True, request=request)
    - add_breadcrumb(parent=test, title=_("Add From Template"), top_level=False, request=request)
    - add_breadcrumb(title="Test Type List", top_level=True, request=request)
    - add_breadcrumb(title="Add Test Type", top_level=False, request=request)
    - add_breadcrumb(title="Edit Test Type", top_level=False, request=request)
    - add_breadcrumb(title="New Tool Configuration", top_level=False, request=request)
    - add_breadcrumb(title="Edit Tool Configuration", top_level=False, request=request)
    - add_breadcrumb(title="Tool Configuration List", top_level=not len(request.GET), request=request)
    - add_breadcrumb(title=_("New Tool Type Configuration"), top_level=False, request=request)
    - add_breadcrumb(title=_("Edit Tool Type"), top_level=False, request=request)
    - add_breadcrumb(title=_("Tool Type List"), top_level=not len(request.GET), request=request)
    - add_breadcrumb(title=_("API Key"), top_level=True, request=request)
    - add_breadcrumb(title=alert_title, top_level=True, request=request)
    - add_breadcrumb(title=_("User Profile - %(user_full_name)s") % {"user_full_name": user.get_full_name()}, top_level=True, request=request)
    - add_breadcrumb(title=_("Change Password"), top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=True, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=_("View User"), top_level=False, request=request)
    - add_breadcrumb(title=page_name, top_level=False, request=request)
    - add_breadcrumb(title=_("Delete User"), top_level=False, request=request)
    - add_breadcrumb(title=_("Add Product Type Member"), top_level=False, request=request)
    - add_breadcrumb(title=_("Add Product Member"), top_level=False, request=request)
    - add_breadcrumb(title=_("Add Group Member"), top_level=False, request=request)
  dojo.finding.helper.UNDER_REVIEW_QUERY:
    - qs.filter(UNDER_REVIEW_QUERY)
  dojo.decorators.we_want_async:
    - we_want_async()
  dojo.utils.calculate_finding_age:
    - calculate_finding_age(finding)
  dojo.forms.ReImportScanForm:
    - def get_form(\n        self,\n        request: HttpRequest,\n        test: Test,\n        **kwargs: dict,\n    ) -> ReImportScanForm:\n        """Returns the default import form for importing findings...
    - ReImportScanForm(request.POST, request.FILES, test=test, **kwargs)
    - ReImportScanForm(test=test, **kwargs)
    - def process_form(\n        self,\n        request: HttpRequest,\n        form: ReImportScanForm,\n        context: dict,\n    ) -> str | None:\n        """Process the form and manipulate the input in ...
  dojo.forms.Test_TypeForm:
    - Test_TypeForm()
    - Test_TypeForm(request.POST)
    - Test_TypeForm(instance=tt)
    - Test_TypeForm(request.POST, instance=tt)
  dojo.tools.appcheck_web_application_scanner.engines.openvas.OpenVASScannerEngineParser:
    - SCANNING_ENGINE_PARSERS: dict[str, BaseEngineParser] = {\n    engine.SCANNING_ENGINE: engine() for engine in [\n        AppCheckScanningEngineParser, BaseEngineParser, NmapScanningEngineParser, OpenVASScannerEngineParser,\n    ]\n}
  dojo.tools.deepfence_threatmapper.malware.DeepfenceThreatmapperMalware:
    - DeepfenceThreatmapperMalware()
  dojo.tools.risk_recon.api.RiskReconAPI:
