
dojo:
  dojo.models.Finding:
    - user_is_authorized(Finding, Permissions.Finding_View, "fid")
    - get_object_or_404(Finding, id=fid)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - get_object_or_404(Finding, id=fid)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - Finding.get_numerical_severity(\n                new_finding.severity,\n            )
    - Finding.objects.filter(\n                active=True,\n                verified=True,\n                cwe=template.cwe,\n                title__icontains=template.title,\n            )
    - Finding.objects.filter(\n                    active=True,\n                    verified=True,\n                    cwe=title_template.cwe,\n                    title__icontains=title_template.title,\n                )
    - Finding.objects.filter(\n                    active=True, verified=True, cwe=template.cwe,\n                )
    - Finding.objects.filter(\n                    active=True, verified=True, cwe=template.cwe,\n                )
    - Finding.get_numerical_severity(\n                template.severity,\n            )
    - Finding.get_numerical_severity(\n                template.severity,\n            )
    - Finding.objects.get(\n            id=finding_to_update[0], test__engagement__product=product,\n        )
    - Finding.objects.filter(\n            id__in=finding_to_update, test__engagement__product=product,\n        )
    - Finding.objects.filter(id__in=finding_to_update)
    - Finding.get_numerical_severity(\n                                form.cleaned_data["severity"],\n                            )
    - user_is_authorized(Finding, Permissions.Finding_Edit, "original_id")
    - get_object_or_404(Finding, id=original_id)
    - get_object_or_404(Finding, id=duplicate_id)
    - get_object_or_404(Finding, id=duplicate_id)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "duplicate_id")
    - get_object_or_404(Finding, id=finding_id)
    - get_object_or_404(Finding, id=new_original_id)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "finding_id")
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - user_is_authorized(Finding, Permissions.Finding_Edit, "fid")
    - get_object_or_404(Finding, id=fid)
    - model = Finding
    - Finding.objects.none()
    - Finding.objects.none()
    - model = Finding
    - model = Finding
    - model = Finding
    - model = Finding
    - Finding.tags.tag_model.objects.all()
    - Finding.tags.tag_model.objects.all()
    - Finding.tags.tag_model.objects.all()
    - Finding.tags.tag_model.objects.all()
    - model = Finding
    - Finding.objects.filter(test__engagement__product__id=product_id)
    - model = Finding
    - model = Finding
    - model = Finding
    - model = Finding
    - def get_findings(scan_type: str, test: Test) -> list[Finding]:\n        """\n        Stub function to make the hinting happier. The actual class\n        is loosely obligated to have this function def...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Make the conversion from unsaved Findings in memor...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Make the conversion from unsaved Findings in memor...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Identify any findings that have been imported before,\n...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Identify any findings that have been imported before,\n...
    - def parse_findings_static_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Parse the scan report submitted with t...
    - def parse_dynamic_test_type_findings_from_tests(\n        self,\n        tests: list[Test],\n    ) -> list[Finding]:\n        """\n        Currently we only support import one Test\n        so for par...
    - def parse_findings_dynamic_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Use the API configuration object to g...
    - def parse_findings(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Determine how to parse the findings based on the presen...
    - def sync_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n ...
    - def sync_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n ...
    - def sync_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n ...
    - def sync_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n ...
    - def sync_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n ...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Processes findings in chunks within N number...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Processes findings in chunks within N number...
    - def determine_process_method(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Determines whether to process the scan ite...
    - def determine_process_method(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Determines whether to process the scan ite...
    - def update_import_history(\n        self,\n        new_findings: list[Finding] = [],\n        closed_findings: list[Finding] = [],\n        reactivated_findings: list[Finding] = [],\n        untouched...
    - def update_import_history(\n        self,\n        new_findings: list[Finding] = [],\n        closed_findings: list[Finding] = [],\n        reactivated_findings: list[Finding] = [],\n        untouched...
    - def update_import_history(\n        self,\n        new_findings: list[Finding] = [],\n        closed_findings: list[Finding] = [],\n        reactivated_findings: list[Finding] = [],\n        untouched...
    - def update_import_history(\n        self,\n        new_findings: list[Finding] = [],\n        closed_findings: list[Finding] = [],\n        reactivated_findings: list[Finding] = [],\n        untouched...
    - def chunk_findings(\n        self,\n        finding_list: list[Finding],\n        chunk_size: int = settings.ASYNC_FINDING_IMPORT_CHUNK_SIZE,\n    ) -> list[list[Finding]]:\n        """\n        Split...
    - def chunk_findings(\n        self,\n        finding_list: list[Finding],\n        chunk_size: int = settings.ASYNC_FINDING_IMPORT_CHUNK_SIZE,\n    ) -> list[list[Finding]]:\n        """\n        Split...
    - def sanitize_severity(\n        self,\n        finding: Finding,\n    ) -> Finding:\n        """\n        Sanitization on the finding severity such that only the following\n        severities may be s...
    - def sanitize_severity(\n        self,\n        finding: Finding,\n    ) -> Finding:\n        """\n        Sanitization on the finding severity such that only the following\n        severities may be s...
    - Finding.get_numerical_severity(finding.severity)
    - def process_finding_groups(\n        self,\n        finding: Finding,\n        group_names_to_findings_dict: dict,\n    ) -> None:\n        """\n        Determines how to handle an incoming finding wi...
    - def process_request_response_pairs(\n        self,\n        finding: Finding,\n    ) -> None:\n        """\n        Search the unsaved finding for the following attributes to determine\n        if the...
    - def process_endpoints(\n        self,\n        finding: Finding,\n        endpoints_to_add: list[Endpoint],\n    ) -> None:\n        """\n        Process any endpoints to add to the finding. Endpoints...
    - def process_vulnerability_ids(\n        self,\n        finding: Finding,\n    ) -> Finding:\n        """\n        Parse the `unsaved_vulnerability_ids` field from findings after they are parsed\n     ...
    - def process_vulnerability_ids(\n        self,\n        finding: Finding,\n    ) -> Finding:\n        """\n        Parse the `unsaved_vulnerability_ids` field from findings after they are parsed\n     ...
    - def process_files(\n        self,\n        finding: Finding,\n    ) -> None:\n        """\n        Some parsers may supply files in the form of base64 encoded blobs,\n        so lets save them in the ...
    - def mitigate_finding(\n        self,\n        finding: Finding,\n        note_message: str,\n        *,\n        finding_groups_enabled: bool,\n    ) -> None:\n        """\n        Mitigates a finding...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Saves findings in memory that were parsed from the...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Saves findings in memory that were parsed from the...
    - unsaved_finding = self.sanitize_severity(non_clean_unsaved_finding)\n            # Filter on minimum severity if applicable\n            if Finding.SEVERITIES[unsaved_finding.severity] > Finding.SEVER...
    - unsaved_finding = self.sanitize_severity(non_clean_unsaved_finding)\n            # Filter on minimum severity if applicable\n            if Finding.SEVERITIES[unsaved_finding.severity] > Finding.SEVER...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Closes old findings based on a hash code match at eithe...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Closes old findings based on a hash code match at eithe...
    - Finding.objects.exclude(\n            test=self.test,\n        )
    - def parse_findings(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Determine how to parse the findings based on the presen...
    - def parse_findings_static_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Creates a test object as part of the i...
    - def parse_findings_dynamic_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Uses the parser to fetch any tests th...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Processes findings in chunks within N number...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Processes findings in chunks within N number...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n      ...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n      ...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n      ...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n      ...
    - def process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n      ...
    - unsaved_finding = self.sanitize_severity(non_clean_unsaved_finding)\n            # Filter on minimum severity if applicable\n            if Finding.SEVERITIES[unsaved_finding.severity] > Finding.SEVER...
    - unsaved_finding = self.sanitize_severity(non_clean_unsaved_finding)\n            # Filter on minimum severity if applicable\n            if Finding.SEVERITIES[unsaved_finding.severity] > Finding.SEVER...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Updates the status of findings that were detected as "o...
    - def close_old_findings(\n        self,\n        findings: list[Finding],\n        **kwargs: dict,\n    ) -> list[Finding]:\n        """\n        Updates the status of findings that were detected as "o...
    - def parse_findings(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Determine how to parse the findings based on the presen...
    - def parse_findings_static_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Parses the findings from file and assi...
    - def parse_findings_dynamic_test_type(\n        self,\n        scan: TemporaryUploadedFile,\n        parser: Parser,\n    ) -> list[Finding]:\n        """\n        Uses the parser to fetch any tests th...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n...
    - def async_process_findings(\n        self,\n        parsed_findings: list[Finding],\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n...
    - def match_new_finding_to_existing_finding(\n        self,\n        unsaved_finding: Finding,\n    ) -> list[Finding]:\n        """Matches a single new finding to N existing findings and then returns t...
    - def match_new_finding_to_existing_finding(\n        self,\n        unsaved_finding: Finding,\n    ) -> list[Finding]:\n        """Matches a single new finding to N existing findings and then returns t...
    - Finding.objects.filter(\n                test=self.test,\n                hash_code=unsaved_finding.hash_code,\n            )
    - Finding.objects.filter(\n                test=self.test,\n                unique_id_from_tool=unsaved_finding.unique_id_from_tool,\n            )
    - Finding.objects.filter(\n                Q(test=self.test),\n                (Q(hash_code__isnull=False) & Q(hash_code=unsaved_finding.hash_code))\n                | (Q(unique_id_from_tool__isnull=False) & Q(unique_id_from_tool=unsaved_finding.unique_id_from_tool)),\n            )
    - Finding.objects.filter(\n                    title=unsaved_finding.title,\n                    test=self.test,\n                    severity=unsaved_finding.severity,\n                    numerical_severity=Finding.get_numerical_severity(unsaved_finding.severity))
    - Finding.get_numerical_severity(unsaved_finding.severity)
    - def process_matched_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how to handle the an ...
    - def process_matched_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how to handle the an ...
    - def process_matched_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how to handle the an ...
    - def process_matched_special_status_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine if the...
    - def process_matched_special_status_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine if the...
    - def process_matched_special_status_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine if the...
    - def process_matched_mitigated_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how mitigat...
    - def process_matched_mitigated_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how mitigat...
    - def process_matched_mitigated_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        Determine how mitigat...
    - def process_matched_active_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        The existing finding mus...
    - def process_matched_active_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        The existing finding mus...
    - def process_matched_active_finding(\n        self,\n        unsaved_finding: Finding,\n        existing_finding: Finding,\n    ) -> tuple[Finding, bool]:\n        """\n        The existing finding mus...
