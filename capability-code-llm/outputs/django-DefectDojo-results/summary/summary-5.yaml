
django_filters:
  django_filters.CharFilter:
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Not Tag name contains", exclude="True")
    - CharFilter(lookup_expr="icontains", label="Version")
    - CharFilter(field_name="test_import__version", lookup_expr="icontains", label="Reimported Version")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Not tag name contains", exclude=True)
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="iexact",\n        label="Lead Username",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="icontains",\n        label="Lead Username Contains",\n        help_text="Search for Lead username that contain a given pattern")
    - CharFilter(\n        field_name="api_scan_configuration__tool_configuration__name",\n        lookup_expr="iexact",\n        label="API Scan Configuration Name",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="api_scan_configuration__tool_configuration__name",\n        lookup_expr="icontains",\n        label="API Scan Configuration Name Contains",\n        help_text="Search for Lead username that contain a given pattern")
    - CharFilter(\n        label="Test Tag Contains",\n        field_name="tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Test that contain a given pattern")
    - CharFilter(\n        label="Test Tag",\n        field_name="tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Test that are an exact match")
    - CharFilter(\n        label="Test Tag Does Not Contain",\n        field_name="tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Test that contain a given pattern, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Not Test Tag",\n        field_name="tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Test that are an exact match, and exclude them",\n        exclude=True)
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Not Tag name contains", exclude="True")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Not Tag name contains", exclude="True")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Not tag name contains", exclude=True)
    - CharFilter(lookup_expr="icontains", label="Name")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(\n        field_name="reporter__username",\n        lookup_expr="iexact",\n        label="Reporter Username",\n        help_text="Search for Reporter names that are an exact match")
    - CharFilter(\n        field_name="reporter__username",\n        lookup_expr="icontains",\n        label="Reporter Username Contains",\n        help_text="Search for Reporter names that contain a given pattern")
    - CharFilter(\n        field_name="reviewers__username",\n        lookup_expr="iexact",\n        label="Reviewer Username",\n        help_text="Search for Reviewer names that are an exact match")
    - CharFilter(\n        field_name="reviewers__username",\n        lookup_expr="icontains",\n        label="Reviewer Username Contains",\n        help_text="Search for Reviewer usernames that contain a given pattern")
    - CharFilter(\n        field_name="last_reviewed_by__username",\n        lookup_expr="iexact",\n        label="Last Reviewed By Username",\n        help_text="Search for Last Reviewed By names that are an exact match")
    - CharFilter(\n        field_name="last_reviewed_by__username",\n        lookup_expr="icontains",\n        label="Last Reviewed By Username Contains",\n        help_text="Search for Last Reviewed By usernames that contain a given pattern")
    - CharFilter(\n        field_name="review_requested_by__username",\n        lookup_expr="iexact",\n        label="Review Requested By Username",\n        help_text="Search for Review Requested By names that are an exact match")
    - CharFilter(\n        field_name="review_requested_by__username",\n        lookup_expr="icontains",\n        label="Review Requested By Username Contains",\n        help_text="Search for Review Requested By usernames that contain a given pattern")
    - CharFilter(\n        field_name="mitigated_by__username",\n        lookup_expr="iexact",\n        label="Mitigator Username",\n        help_text="Search for Mitigator names that are an exact match")
    - CharFilter(\n        field_name="mitigated_by__username",\n        lookup_expr="icontains",\n        label="Mitigator Username Contains",\n        help_text="Search for Mitigator usernames that contain a given pattern")
    - CharFilter(\n        field_name="defect_review_requested_by__username",\n        lookup_expr="iexact",\n        label="Requester of Defect Review Username",\n        help_text="Search for Requester of Defect Review names that are an exact match")
    - CharFilter(\n        field_name="defect_review_requested_by__username",\n        lookup_expr="icontains",\n        label="Requester of Defect Review Username Contains",\n        help_text="Search for Requester of Defect Review usernames that contain a given pattern")
    - CharFilter(\n        field_name="test__engagement__product__prod_type__name",\n        lookup_expr="iexact",\n        label="Product Type Name",\n        help_text="Search for Product Type names that are an exact match")
    - CharFilter(\n        field_name="test__engagement__product__prod_type__name",\n        lookup_expr="icontains",\n        label="Product Type Name Contains",\n        help_text="Search for Product Type names that contain a given pattern")
    - CharFilter(\n        field_name="test__engagement__product__name",\n        lookup_expr="iexact",\n        label="Product Name",\n        help_text="Search for Product names that are an exact match")
    - CharFilter(\n        field_name="test__engagement__product__name",\n        lookup_expr="icontains",\n        label="Product name Contains",\n        help_text="Search for Product names that contain a given pattern")
    - CharFilter(\n        field_name="test__engagement__name",\n        lookup_expr="iexact",\n        label="Engagement Name",\n        help_text="Search for Engagement names that are an exact match")
    - CharFilter(\n        field_name="test__engagement__name",\n        lookup_expr="icontains",\n        label="Engagement name Contains",\n        help_text="Search for Engagement names that contain a given pattern")
    - CharFilter(\n        field_name="test__name",\n        lookup_expr="iexact",\n        label="Test Name",\n        help_text="Search for Test names that are an exact match")
    - CharFilter(\n        field_name="test__name",\n        lookup_expr="icontains",\n        label="Test name Contains",\n        help_text="Search for Test names that contain a given pattern")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(field_name="version", lookup_expr="icontains")
    - CharFilter(field_name="version", lookup_expr="iexact", label="Version Exact")
    - CharFilter(lookup_expr="icontains", label="Branch/Tag")
    - CharFilter(lookup_expr="icontains", label="Build ID")
    - CharFilter(lookup_expr="icontains", label="Commit hash")
    - filter_overrides = {\n            JSONField: {\n                "filter_class": CharFilter,\n                "extra": lambda _: {\n                    "lookup_expr": "icontains",\n                },\n            },\n        }
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(lookup_expr="icontains")
  django_filters.filters._truncate:
    - _truncate(start_date - timedelta(days=1))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=7))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=30))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=90))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=365))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=7))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=30))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=90))
    - _truncate(now() - timedelta(days=7))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=30))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=90))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=365))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() + timedelta(days=365))
    - _truncate(start_date - timedelta(days=1))
    - _truncate(now() + timedelta(days=1))
    - _truncate(now() - timedelta(days=days))
    - _truncate(now() + timedelta(days=1))
    - _truncate(start_date - timedelta(days=1))
    - _truncate(now() + timedelta(days=1))
  django_filters.OrderingFilter:
    - OrderingFilter(\n        fields=(\n            ("component_name", "component_name"),\n            ("component_version", "component_version"),\n            ("active", "active"),\n            ("duplicat...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("target_start", "target_start"),\n            ("name", "name"),\n            ("product__name", "product__name"),\...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n            ("prod_type__name", "prod_type__name"),\n        ),\n        field_labels={\n            "name": "Product Name",\n            "prod_type__name": "Product Type",\n        },\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n            ("version", "version"),\n            ("target_start", "target_start"),\n           ...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n            ("version", "version"),\n            ("target_start", "target_start"),\n           ...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n            ("name_exact", "name_exact"),\n            ("prod_type__name", "prod_type__name"),\...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("id", "id"),\n            ("tid", "tid"),\n            ("name", "name"),\n            ("created", "created"),\n  ...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("active", "active"),\n            ("component_name", "component_name"),\n            ("component_version", "compo...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("numerical_severity", "numerical_severity"),\n            ("date", "date"),\n            ("mitigated", "mitigated...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("cwe", "cwe"),\n            ("title", "title"),\n            ("numerical_severity", "numerical_severity"),\n        ),\n        field_labels={\n            "numerical_severity": "Severity",\n        },\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("title", "title"),\n            ("cwe", "cwe"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("product", "product"),\n            ("host", "host"),\n            ("id", "id"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("host", "host"),\n            ("product", "product"),\n            ("id", "id"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("title", "title"),\n            ("version", "version"),\n            ("target_start", "target_start"),\n         ...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("title", "title"),\n            ("version", "version"),\n            ("target_start", "target_start"),\n         ...
    - OrderingFilter(\n        fields=(\n            ("title", "title"),\n            ("date", "date"),\n            ("numerical_severity", "numerical_severity"),\n            ("epss_score", "epss_score"),\...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("username", "username"),\n            ("last_name", "last_name"),\n            ("first_name", "first_name"),\n   ...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("date", "date"),\n            ("version", "version"),\n            ("branch_tag", "branch_tag"),\n            ("build_id", "build_id"),\n            ("commit_hash", "commit_hash"),\n\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("action", "action"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("id", "id"),\n            ("created", "created"),\n            ("modified", "modified"),\n            ("version",...
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n        ),\n    )
    - OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ("name", "name"),\n            ("description", "description"),\n            ("is_single", "is_single"),\n            ("is_mandatory", "is_mandatory"),\n        ),\n    )
  django_filters.RangeFilter:
    - class PercentageRangeFilter(RangeFilter):\n    def filter(self, qs, value):\n        if value is not None:\n            start = value.start / decimal.Decimal("100.0") if value.start else None\n       ...
  django_filters.DateFromToRangeFilter:
    - DateFromToRangeFilter(field_name="date", label="Date Discovered")
  django_filters.rest_framework.DjangoFilterBackend:
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
    - filter_backends = (DjangoFilterBackend,)
  django_filters.BooleanFilter:
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(field_name="external_audience")
    - BooleanFilter(field_name="internet_accessible")
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(field_name="external_audience")
    - BooleanFilter(field_name="internet_accessible")
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(field_name="active")
    - BooleanFilter(field_name="duplicate")
    - BooleanFilter(field_name="dynamic_finding")
    - BooleanFilter(field_name="false_p")
    - BooleanFilter(field_name="is_mitigated")
    - BooleanFilter(field_name="out_of_scope")
    - BooleanFilter(field_name="static_finding")
    - BooleanFilter(field_name="under_defect_review")
    - BooleanFilter(field_name="under_review")
    - BooleanFilter(field_name="verified")
    - BooleanFilter(field_name="jira_issue", lookup_expr="isnull", exclude=True)
    - BooleanFilter(field_name="tags", lookup_expr="isnull", exclude=True, label="Has tags")
    - BooleanFilter(\n        field_name="component_name",\n        lookup_expr="isnull",\n        exclude=True,\n        label="Has Component")
    - BooleanFilter(\n        field_name="notes",\n        lookup_expr="isnull",\n        exclude=True,\n        label="Has notes")
