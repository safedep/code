
rest_framework:
  rest_framework.status:
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RawFileSerializer,\n        },\n    )
    - Response(\n                {"error": "File ID not associated with Finding"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - Response(\n                {"error": "File ID not associated with Finding"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - extend_schema(\n        request=serializers.FindingNoteSerializer,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - Response(\n                    {"error": "Selected Note is not assigned to this Finding"},\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    {"error": "Selected Note is not assigned to this Finding"},\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                {"error": "('note_id') parameter missing"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                {"error": "('note_id') parameter missing"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                {"error": "Delete Failed, You are not the Note's author"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                {"error": "Delete Failed, You are not the Note's author"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n            {"Success": "Selected Note has been Removed successfully"},\n            status=status.HTTP_204_NO_CONTENT,\n        )
    - Response(\n            {"Success": "Selected Note has been Removed successfully"},\n            status=status.HTTP_204_NO_CONTENT,\n        )
    - extend_schema(\n        methods=["PUT", "PATCH"],\n        request=serializers.TagSerializer,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - Response(\n                    {"error": "Empty Tag List Not Allowed"},\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    {"error": "Empty Tag List Not Allowed"},\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                        {\n                            "error": f"'{tag}' is not a valid tag in list",\n                        },\n                        status=status.HTTP_400_BAD_REQUEST,\n                    )
    - Response(\n                        {\n                            "error": f"'{tag}' is not a valid tag in list",\n                        },\n                        status=status.HTTP_400_BAD_REQUEST,\n                    )
    - Response(\n                {"success": "Tag(s) Removed"},\n                status=status.HTTP_204_NO_CONTENT,\n            )
    - Response(\n                {"success": "Tag(s) Removed"},\n                status=status.HTTP_204_NO_CONTENT,\n            )
    - Response(\n            delete_tags.errors, status=status.HTTP_400_BAD_REQUEST,\n        )
    - Response(\n            delete_tags.errors, status=status.HTTP_400_BAD_REQUEST,\n        )
    - extend_schema(\n        responses={\n            status.HTTP_200_OK: serializers.FindingSerializer(many=True),\n        },\n    )
    - Response(serializer.data, status=status.HTTP_200_OK)
    - Response(serializer.data, status=status.HTTP_200_OK)
    - extend_schema(\n        request=OpenApiTypes.NONE,\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - Response(status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=OpenApiTypes.NONE,\n        parameters=[\n            OpenApiParameter(\n                "new_fid", OpenApiTypes.INT, OpenApiParameter.PATH,\n            ),\n        ],\n        responses={status.HTTP_204_NO_CONTENT: ""},\n    )
    - Response(status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(serializer.data, status=status.HTTP_200_OK)
    - Response(serializer.data, status=status.HTTP_200_OK)
    - Response(\n                "Metadata name is required", status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                "Metadata name is required", status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(data=request.data, status=status.HTTP_200_OK)
    - Response(data=request.data, status=status.HTTP_200_OK)
    - Response(\n                "Update failed because the new name already exists",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                "Update failed because the new name already exists",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                    "Create failed probably because the name of the metadata already exists",\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    "Create failed probably because the name of the metadata already exists",\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(data=metadata_data.data, status=status.HTTP_200_OK)
    - Response(data=metadata_data.data, status=status.HTTP_200_OK)
    - Response(\n            metadata_data.errors, status=status.HTTP_400_BAD_REQUEST,\n        )
    - Response(\n            metadata_data.errors, status=status.HTTP_400_BAD_REQUEST,\n        )
    - Response(\n                "A metadata name must be provided",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                "A metadata name must be provided",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response("Metadata deleted", status=status.HTTP_200_OK)
    - Response("Metadata deleted", status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer(many=True),\n            status.HTTP_404_NOT_FOUND: OpenApiResponse(\n                description="Returned if finding does not exist",\n            ),\n        },\n    )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer(many=True),\n            status.HTTP_404_NOT_FOUND: OpenApiResponse(\n                description="Returned if finding does not exist",\n            ),\n        },\n    )
    - extend_schema(\n        methods=["DELETE"],\n        parameters=[\n            OpenApiParameter(\n                "name",\n                OpenApiTypes.INT,\n                OpenApiParameter.QUERY,\n ...
    - extend_schema(\n        methods=["DELETE"],\n        parameters=[\n            OpenApiParameter(\n                "name",\n                OpenApiTypes.INT,\n                OpenApiParameter.QUERY,\n ...
    - extend_schema(\n        methods=["DELETE"],\n        parameters=[\n            OpenApiParameter(\n                "name",\n                OpenApiTypes.INT,\n                OpenApiParameter.QUERY,\n ...
    - extend_schema(\n        methods=["PUT"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            statu...
    - extend_schema(\n        methods=["PUT"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            statu...
    - extend_schema(\n        methods=["PUT"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            statu...
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            stat...
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            stat...
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingMetaSerializer,\n        responses={\n            status.HTTP_200_OK: serializers.FindingMetaSerializer,\n            stat...
    - Response(\n            {"error", "unsupported method"}, status=status.HTTP_400_BAD_REQUEST,\n        )
    - Response(\n            {"error", "unsupported method"}, status=status.HTTP_400_BAD_REQUEST,\n        )
    - extend_schema(\n        methods=["post", "patch"],\n        request=serializers.MetaMainSerializer,\n        responses={status.HTTP_200_OK: serializers.MetaMainSerializer},\n        filters=False,\n    )
    - Response(status=status.HTTP_201_CREATED, data=serialized_data.data)
    - Response(status=status.HTTP_201_CREATED, data=serialized_data.data)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                    "There must be at least one owner",\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    "There must be at least one owner",\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.TestToNotesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewNoteOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.NoteSerializer},\n    )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response("Only one instance of this note_type allowed on a test.", status=status.HTTP_400_BAD_REQUEST)
    - Response("Only one instance of this note_type allowed on a test.", status=status.HTTP_400_BAD_REQUEST)
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.TestToFilesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewFileOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.FileSerializer},\n    )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RawFileSerializer,\n        },\n    )
    - Response(\n                {"error": "File ID not associated with Test"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - Response(\n                {"error": "File ID not associated with Test"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - Response(\n                "Users may not delete themselves",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                "Users may not delete themselves",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n    request=OpenApiTypes.NONE,\n    parameters=[\n        OpenApiParameter(\n            "engagement_id", OpenApiTypes.INT, OpenApiParameter.PATH,\n        ),\n    ],\n    responses={status.HTTP_200_OK: serializers.QuestionnaireAnsweredSurveySerializer},\n    )
    - extend_schema(\n        request=AcceptedRiskSerializer(many=True),\n        responses={status.HTTP_201_CREATED: RiskAcceptanceSerializer(many=True)},\n    )
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_201_CREATED, data=result.data)
    - Response(status=status.HTTP_201_CREATED, data=result.data)
    - extend_schema(\n        request=AcceptedRiskSerializer(many=True),\n        responses={status.HTTP_201_CREATED: RiskAcceptanceSerializer(many=True)},\n    )
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(status=201, data=result.data)
  rest_framework.exceptions.ValidationError aliased as RestFrameworkValidationError:
    - try:\n            return super().run_validators(initial_data)\n        except RestFrameworkValidationError as exc:\n            if "finding, endpoint must make a unique set" in str(exc):\n            ...
  rest_framework.fields.MultipleChoiceField:
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
    - MultipleChoiceField(\n        choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION,\n    )
  rest_framework.parsers.MultiPartParser:
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - parser_classes = [MultiPartParser]
    - parser_classes = [MultiPartParser]
    - parser_classes = [MultiPartParser]
    - parser_classes = [MultiPartParser]
  rest_framework.views.exception_handler:
    - exception_handler(exc, context)

re:
  re:
    - re.findall(r'(?:"[^"]*"|[^",]+)', s)
    - re.match(r"^[A-Za-z][A-Za-z0-9\.\-\+]+$", endpoint.host)
    - re.split(r"/|\?", url)
    - re.compile(r"(\d{4})-(\d\d?)-(\d\d?)$")
    - re.search(r"\*\*Library Filename\*\* : ", finding.description)
    - re.search(r"\*\*Library Description\*\*", finding.description)
    - re.compile(settings.LOGIN_URL.lstrip("/"))
    - re.compile(expr)
    - re.match(r"^[A-Za-z][A-Za-z0-9\.\-\+]+$", self.protocol)
    - re.match(r"^[A-Za-z0-9\.\-_~%\!\$&\'\(\)\*\+,;=:]+$", self.userinfo)
    - re.match(r"^[A-Za-z0-9_\-\+][A-Za-z0-9_\.\-\+]+$", self.host)
    - re.sub(r"\n\s*\n", "\n", res)
    - re.findall(r"([\(|\[]?(https?):((//)|(\\\\))+([\w\d:#@%/;$~_?\+-=\\\.&](#!)?)*[\)|\]]?)", self.references)
    - re.sub(r"\n\s*\n", "\n", res)
    - re.search(settings.AZUREAD_TENANT_OAUTH2_GROUPS_FILTER, group_name)
    - re.search(r"^[a-zA-Z0-9]{8,}-[a-zA-Z0-9]{4,}-[a-zA-Z0-9]{4,}-[a-zA-Z0-9]{4,}-[a-zA-Z0-9]{12,}$", group)
    - re.compile(r"[\w@.+_-]")
    - re.split(r"/|\?", url)
    - re.compile(r"(^[A-Z]+-[A-Z\d-]+)$")
    - re.compile(r"Finding [0-9][0-9][0-9]:*")
    - re.search(r" (/[^/ ]*)+/?", text)
