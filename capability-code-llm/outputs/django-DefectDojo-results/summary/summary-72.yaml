
django:
  django.db.models:
    - models.DateTimeField(editable=True,\n                                       null=True,\n                                       verbose_name=_("Jira last update"),\n                                       help_text=_("The date the linked Jira issue was last modified."))
    - class Notifications(models.Model):\n    product_type_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)\n    product_added = MultiSelectField(choices=NOTI...
    - models.ForeignKey(Dojo_User, default=None, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, default=None, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Product, default=None, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Product, default=None, null=True, editable=False, on_delete=models.CASCADE)
    - models.BooleanField(default=False)
    - models.UniqueConstraint(fields=["user", "product"], name="notifications_user_product")
    - models.Index(fields=["user", "product"])
    - class Notification_Webhooks(models.Model):\n    class Status(models.TextChoices):\n        __STATUS_ACTIVE = "active"\n        __STATUS_INACTIVE = "inactive"\n        STATUS_ACTIVE = f"{__STATUS_ACTIV...
    - class Status(models.TextChoices):\n        __STATUS_ACTIVE = "active"\n        __STATUS_INACTIVE = "inactive"\n        STATUS_ACTIVE = f"{__STATUS_ACTIVE}", _("Active")\n        STATUS_ACTIVE_TMP = f"...
    - models.CharField(max_length=100, default="", blank=False, unique=True,\n                                    help_text=_("Name of the incoming webhook"))
    - models.URLField(max_length=200, default="", blank=False,\n                                    help_text=_("The full URL of the incoming webhook"))
    - models.CharField(max_length=100, default="", blank=True, null=True,\n                                   help_text=_("Name of the header required for interacting with Webhook endpoint"))
    - models.CharField(max_length=100, default="", blank=True, null=True,\n                                   help_text=_("Content of the header required for interacting with Webhook endpoint"))
    - models.CharField(max_length=20, choices=Status, default="active", blank=False,\n                              help_text=_("Status of the incoming webhook"), editable=False)
    - models.DateTimeField(help_text=_("If endpoint is active, when error happened first time"), blank=True, null=True, editable=False)
    - models.DateTimeField(help_text=_("If endpoint is active, when error happened last time"), blank=True, null=True, editable=False)
    - models.CharField(max_length=1000, default="", blank=True, null=True, help_text=_("Description of the latest error"), editable=False)
    - models.ForeignKey(Dojo_User, editable=True, null=True, blank=True, on_delete=models.CASCADE,\n                              help_text=_("Owner/receiver of notification, if empty processed as system notification"))
    - models.ForeignKey(Dojo_User, editable=True, null=True, blank=True, on_delete=models.CASCADE,\n                              help_text=_("Owner/receiver of notification, if empty processed as system notification"))
    - class Tool_Product_Settings(models.Model):\n    name = models.CharField(max_length=200, null=False)\n    description = models.CharField(max_length=2000, null=True, blank=True)\n    url = models.CharFi...
    - models.CharField(max_length=200, null=False)
    - models.CharField(max_length=2000, null=True, blank=True)
    - models.CharField(max_length=2000, null=True, blank=True)
    - models.ForeignKey(Product, default=1, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Product, default=1, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Tool_Configuration, null=False,\n                                           related_name="tool_configuration", on_delete=models.CASCADE)
    - models.ForeignKey(Tool_Configuration, null=False,\n                                           related_name="tool_configuration", on_delete=models.CASCADE)
    - models.CharField(max_length=200, null=True, blank=True)
    - models.ManyToManyField(Notes, blank=True, editable=False)
    - class Tool_Product_History(models.Model):\n    product = models.ForeignKey(Tool_Product_Settings, editable=False, on_delete=models.CASCADE)\n    last_scan = models.DateTimeField(null=False, editable=F...
    - models.ForeignKey(Tool_Product_Settings, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Tool_Product_Settings, editable=False, on_delete=models.CASCADE)
    - models.DateTimeField(null=False, editable=False, default=now)
    - models.BooleanField(default=True, verbose_name=_("Succesfully"))
    - models.CharField(max_length=2000, null=True,\n                                             blank=True)
    - class Alerts(models.Model):\n    title = models.CharField(max_length=250, default="", null=False)\n    description = models.CharField(max_length=2000, null=True, blank=True)\n    url = models.URLField...
    - models.CharField(max_length=250, default="", null=False)
    - models.CharField(max_length=2000, null=True, blank=True)
    - models.URLField(max_length=2000, null=True, blank=True)
    - models.CharField(max_length=100, default="Generic")
    - models.CharField(max_length=25, default="icon-user-check")
    - models.ForeignKey(Dojo_User, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, null=True, editable=False, on_delete=models.CASCADE)
    - models.DateTimeField(auto_now_add=True, null=False)
    - class Cred_User(models.Model):\n    name = models.CharField(max_length=200, null=False)\n    username = models.CharField(max_length=200, null=False)\n    password = models.CharField(max_length=600, nu...
    - models.CharField(max_length=200, null=False)
    - models.CharField(max_length=200, null=False)
    - models.CharField(max_length=600, null=False)
    - models.CharField(max_length=200, null=False)
    - models.CharField(max_length=15,\n                                      choices=(\n                                          ("Form", "Form Authentication"),\n                                          ("SSO", "SSO Redirect")),\n                                      default="Form")
    - models.CharField(max_length=15,\n                                           choices=(\n                                               ("Basic", "Basic"),\n                                               ("NTLM", "NTLM")),\n                                           null=True, blank=True)
    - models.CharField(max_length=2000, null=True, blank=True)
    - models.URLField(max_length=2000, null=False)
    - models.ForeignKey(Development_Environment, null=False, on_delete=models.RESTRICT)
    - models.ForeignKey(Development_Environment, null=False, on_delete=models.RESTRICT)
    - models.CharField(max_length=200, null=True, blank=True)
    - models.CharField(max_length=200, null=True, blank=True)
    - models.ManyToManyField(Notes, blank=True, editable=False)
    - models.BooleanField(default=True, verbose_name=_("Login is valid"))
    - class Cred_Mapping(models.Model):\n    cred_id = models.ForeignKey(Cred_User, null=False,\n                                related_name="cred_user",\n                                verbose_name=_("Cr...
    - models.ForeignKey(Cred_User, null=False,\n                                related_name="cred_user",\n                                verbose_name=_("Credential"), on_delete=models.CASCADE)
    - models.ForeignKey(Cred_User, null=False,\n                                related_name="cred_user",\n                                verbose_name=_("Credential"), on_delete=models.CASCADE)
    - models.ForeignKey(Product, null=True, blank=True,\n                                related_name="product", on_delete=models.CASCADE)
    - models.ForeignKey(Product, null=True, blank=True,\n                                related_name="product", on_delete=models.CASCADE)
    - models.ForeignKey(Finding, null=True, blank=True,\n                                related_name="finding", on_delete=models.CASCADE)
    - models.ForeignKey(Finding, null=True, blank=True,\n                                related_name="finding", on_delete=models.CASCADE)
    - models.ForeignKey(Engagement, null=True, blank=True,\n                                   related_name="engagement", on_delete=models.CASCADE)
    - models.ForeignKey(Engagement, null=True, blank=True,\n                                   related_name="engagement", on_delete=models.CASCADE)
    - models.ForeignKey(Test, null=True, blank=True, related_name="test", on_delete=models.CASCADE)
    - models.ForeignKey(Test, null=True, blank=True, related_name="test", on_delete=models.CASCADE)
    - models.BooleanField(default=False,\n                                            verbose_name=_("Authentication Provider"))
    - models.URLField(max_length=2000, null=True, blank=True)
    - class Language_Type(models.Model):\n    language = models.CharField(max_length=100, null=False)\n    color = models.CharField(max_length=7, null=True, blank=True, verbose_name=_("HTML color"))\n\n    def __str__(self):\n        return self.language
    - models.CharField(max_length=100, null=False)
    - models.CharField(max_length=7, null=True, blank=True, verbose_name=_("HTML color"))
    - class Languages(models.Model):\n    language = models.ForeignKey(Language_Type, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    user = models.Foreign...
    - models.ForeignKey(Language_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Language_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, editable=True, blank=True, null=True, on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, editable=True, blank=True, null=True, on_delete=models.RESTRICT)
    - models.IntegerField(blank=True, null=True, verbose_name=_("Number of files"))
    - models.IntegerField(blank=True, null=True, verbose_name=_("Number of blank lines"))
    - models.IntegerField(blank=True, null=True, verbose_name=_("Number of comment lines"))
    - models.IntegerField(blank=True, null=True, verbose_name=_("Number of code lines"))
    - models.DateTimeField(auto_now_add=True, null=False)
    - class App_Analysis(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200, null=False)\n    user = models.ForeignKey(Dojo_User, ...
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.CharField(max_length=200, null=False)
    - models.ForeignKey(Dojo_User, editable=True, on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, editable=True, on_delete=models.RESTRICT)
    - models.IntegerField(blank=True, null=True, verbose_name=_("Confidence level"))
    - models.CharField(max_length=200, null=True, blank=True, verbose_name=_("Version Number"))
    - models.CharField(max_length=200, null=True, blank=True)
    - models.URLField(max_length=400, null=True, blank=True)
    - models.URLField(max_length=400, null=True, blank=True)
    - models.DateTimeField(auto_now_add=True, null=False)
    - class Objects_Review(models.Model):\n    name = models.CharField(max_length=100, null=True, blank=True)\n    created = models.DateTimeField(auto_now_add=True, null=False)\n\n    def __str__(self):\n        return self.name
    - models.CharField(max_length=100, null=True, blank=True)
    - models.DateTimeField(auto_now_add=True, null=False)
    - class Objects_Product(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100, null=True, blank=True)\n    path = models.CharFiel...
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.CharField(max_length=100, null=True, blank=True)
    - models.CharField(max_length=600, verbose_name=_("Full file path"),\n                            null=True, blank=True)
    - models.CharField(max_length=400, verbose_name=_("Folder"),\n                              null=True, blank=True)
    - models.CharField(max_length=400, verbose_name=_("Artifact"),\n                                null=True, blank=True)
    - models.ForeignKey(Objects_Review, on_delete=models.CASCADE)
    - models.ForeignKey(Objects_Review, on_delete=models.CASCADE)
    - models.DateTimeField(auto_now_add=True, null=False)
    - class Testing_Guide_Category(models.Model):\n    name = models.CharField(max_length=300)\n    created = models.DateTimeField(auto_now_add=True, null=False)\n    updated = models.DateTimeField(auto_now...
    - models.CharField(max_length=300)
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - class Testing_Guide(models.Model):\n    testing_guide_category = models.ForeignKey(Testing_Guide_Category, on_delete=models.CASCADE)\n    identifier = models.CharField(max_length=20, blank=True, null=...
    - models.ForeignKey(Testing_Guide_Category, on_delete=models.CASCADE)
    - models.ForeignKey(Testing_Guide_Category, on_delete=models.CASCADE)
    - models.CharField(max_length=20, blank=True, null=True, help_text=_("Test Unique Identifier"))
    - models.CharField(max_length=400, help_text=_("Name of the test"))
    - models.CharField(max_length=800, help_text=_("Summary of the test"))
    - models.CharField(max_length=800, help_text=_("Objective of the test"))
    - models.TextField(default=None, help_text=_("How to test the objective"))
    - models.CharField(max_length=800, help_text=_("What the results look like for a test"))
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - class Benchmark_Type(models.Model):\n    name = models.CharField(max_length=300)\n    version = models.CharField(max_length=15)\n    source = (("PCI", "PCI"),\n              ("OWASP ASVS", "OWASP ASVS...
    - models.CharField(max_length=300)
    - models.CharField(max_length=15)
    - models.CharField(max_length=20, blank=False,\n                                        null=True, choices=source,\n                                        default="OWASP ASVS")
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - models.BooleanField(default=True)
    - class Benchmark_Category(models.Model):\n    type = models.ForeignKey(Benchmark_Type, verbose_name=_("Benchmark Type"), on_delete=models.CASCADE)\n    name = models.CharField(max_length=300)\n    obje...
    - models.ForeignKey(Benchmark_Type, verbose_name=_("Benchmark Type"), on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Type, verbose_name=_("Benchmark Type"), on_delete=models.CASCADE)
    - models.CharField(max_length=300)
    - models.TextField()
    - models.TextField(blank=True, null=True)
    - models.BooleanField(default=True)
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - class Benchmark_Requirement(models.Model):\n    category = models.ForeignKey(Benchmark_Category, on_delete=models.CASCADE)\n    objective_number = models.CharField(max_length=15, null=True, blank=True...
    - models.ForeignKey(Benchmark_Category, on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Category, on_delete=models.CASCADE)
    - models.CharField(max_length=15, null=True, blank=True)
    - models.TextField()
    - models.TextField(blank=True, null=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=True)
    - models.ManyToManyField(CWE, blank=True)
    - models.ManyToManyField(Testing_Guide, blank=True)
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - class Benchmark_Product(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    control = models.ForeignKey(Benchmark_Requirement, on_delete=models.CASCADE)\n    pass_f...
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Requirement, on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Requirement, on_delete=models.CASCADE)
    - models.BooleanField(default=False, verbose_name=_("Pass"),\n                                    help_text=_("Does the product meet the requirement?"))
    - models.BooleanField(default=True,\n                                  help_text=_("Applicable for this specific product."))
    - models.ManyToManyField(Notes, blank=True, editable=False)
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - class Benchmark_Product_Summary(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    benchmark_type = models.ForeignKey(Benchmark_Type, on_delete=models.CASCADE)\n  ...
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Benchmark_Type, on_delete=models.CASCADE)
    - models.CharField(max_length=15,\n                                     null=False, choices=asvs_level,\n                                     default="Level 1")
    - models.CharField(max_length=15, blank=True,\n                                     null=True, choices=asvs_level,\n                                     default="None")
    - models.IntegerField(null=False, default=0, help_text=_("Total number of active benchmarks for this application."))
    - models.IntegerField(null=False, default=0, help_text=_("ASVS Level 1 Score"))
    - models.IntegerField(null=False, default=0, help_text=_("Total number of active benchmarks for this application."))
    - models.IntegerField(null=False, default=0, help_text=_("ASVS Level 2 Score"))
    - models.IntegerField(null=False, default=0, help_text=_("Total number of active benchmarks for this application."))
    - models.IntegerField(null=False, default=0, help_text=_("ASVS Level 3 Score"))
    - models.BooleanField(default=False, help_text=_("Publish score to Product."))
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True)
    - models.PositiveIntegerField(default=1,\n                                            help_text=_("The render order"))
    - models.BooleanField(\n            default=False,\n            help_text=_("If selected, user doesn't have to answer this question"))
    - models.TextField(blank=False, help_text=_("The question text"), default="")
    - models.Manager()
    - models.PositiveIntegerField(default=1)
    - models.TextField(default="")
    - models.BooleanField(default=False,\n                                      help_text=_("Select one or more"))
    - models.ManyToManyField(Choice)
    - class Engagement_Survey(models.Model):\n    name = models.CharField(max_length=200, null=False, blank=False,\n                            editable=True, default="")\n    description = models.TextField...
    - models.CharField(max_length=200, null=False, blank=False,\n                            editable=True, default="")
    - models.TextField(editable=True, default="")
    - models.ManyToManyField(Question)
    - models.BooleanField(default=True)
    - class Answered_Survey(models.Model):\n    # tie this to a specific engagement\n    engagement = models.ForeignKey(Engagement, related_name="engagement+",\n                                   null=True,...
