
dojo:
  dojo.announcement.views:
    - re_path(r"^product/type/add$", views.add_product_type,\n        name="add_product_type")
    - re_path(r"^product/type/(?P<ptid>\d+)/add_member$", views.add_product_type_member,\n        name="add_product_type_member")
    - re_path(r"^product/type/member/(?P<memberid>\d+)/edit$", views.edit_product_type_member,\n        name="edit_product_type_member")
    - re_path(r"^product/type/member/(?P<memberid>\d+)/delete$", views.delete_product_type_member,\n        name="delete_product_type_member")
    - re_path(r"^product/type/(?P<ptid>\d+)/add_group$", views.add_product_type_group,\n        name="add_product_type_group")
    - re_path(r"^product/type/group/(?P<groupid>\d+)/edit$", views.edit_product_type_group,\n        name="edit_product_type_group")
    - re_path(r"^product/type/group/(?P<groupid>\d+)/delete$", views.delete_product_type_group,\n        name="delete_product_type_group")
    - re_path(r"^product/type/(?P<ptid>\d+)/report$",\n        views.product_type_report, name="product_type_report")
    - re_path(r"^product/(?P<pid>\d+)/report$",\n        views.product_report, name="product_report")
    - re_path(r"^product/(?P<pid>\d+)/endpoint/report$",\n        views.product_endpoint_report, name="product_endpoint_report")
    - re_path(r"^engagement/(?P<eid>\d+)/report$", views.engagement_report,\n        name="engagement_report")
    - re_path(r"^test/(?P<tid>\d+)/report$", views.test_report,\n        name="test_report")
    - re_path(r"^endpoint/(?P<eid>\d+)/report$", views.endpoint_report,\n        name="endpoint_report")
    - re_path(r"^endpoint/host/(?P<eid>\d+)/report$", views.endpoint_host_report,\n        name="endpoint_host_report")
    - re_path(r"^product/report$",\n        views.product_findings_report, name="product_findings_report")
    - re_path(r"^reports/cover$",\n        views.report_cover_page, name="report_cover_page")
    - views.ReportBuilder.as_view()
    - re_path(r"^reports/findings$",\n        views.report_findings, name="report_findings")
    - re_path(r"^reports/endpoints$",\n        views.report_endpoints, name="report_endpoints")
    - views.CustomReport.as_view()
    - views.QuickReportView.as_view()
    - views.CSVExportView.as_view()
    - views.ExcelExportView.as_view()
    - re_path(r"^simple_search$", views.simple_search,\n        name="simple_search")
    - re_path(r"^questionnaire$",\n        views.questionnaire,\n        name="questionnaire")
    - re_path(r"^questionnaire/create$",\n        views.create_questionnaire,\n        name="create_questionnaire")
    - re_path(r"^questionnaire/(?P<sid>\d+)/edit$",\n        views.edit_questionnaire,\n        name="edit_questionnaire")
    - re_path(r"^questionnaire/(?P<sid>\d+)/delete",\n        views.delete_questionnaire,\n        name="delete_questionnaire")
    - re_path(r"^questionnaire/(?P<sid>\d+)/edit/questions$",\n        views.edit_questionnaire_questions,\n        name="edit_questionnaire_questions")
    - re_path(r"^questions$",\n        views.questions,\n        name="questions")
    - re_path(r"^questions/add$",\n        views.create_question,\n        name="create_question")
    - re_path(r"^questions/(?P<qid>\d+)/edit$",\n        views.edit_question,\n        name="edit_question")
    - re_path(r"^choices/add$",\n        views.add_choices,\n        name="add_choices")
    - re_path(r"^engagement/(?P<eid>\d+)/add_questionnaire$",\n        views.add_questionnaire,\n        name="add_questionnaire")
    - re_path(r"^engagement/(?P<eid>\d+)/questionnaire/(?P<sid>\d+)/answer",\n        views.answer_questionnaire,\n        name="answer_questionnaire")
    - re_path(r"^engagement/(?P<eid>\d+)/questionnaire/(?P<sid>\d+)/delete",\n        views.delete_engagement_survey,\n        name="delete_engagement_survey")
    - re_path(r"^engagement/(?P<eid>\d+)/questionnaire/(?P<sid>\d+)$",\n        views.view_questionnaire,\n        name="view_questionnaire")
    - re_path(r"^engagement/(?P<eid>\d+)/questionnaire/(?P<sid>\d+)/assign",\n        views.assign_questionnaire,\n        name="assign_questionnaire")
    - re_path(r"^empty_questionnaire$",\n        views.add_empty_questionnaire,\n        name="add_empty_questionnaire")
    - re_path(r"^empty_questionnaire/(?P<esid>\d+)$",\n        views.view_empty_survey,\n        name="view_empty_survey")
    - re_path(r"^empty_questionnaire/(?P<esid>\d+)/delete$",\n        views.delete_empty_questionnaire,\n        name="delete_empty_questionnaire")
    - re_path(r"^general_questionnaire/(?P<esid>\d+)/delete$",\n        views.delete_general_questionnaire,\n        name="delete_general_questionnaire")
    - re_path(r"^empty_questionnaire/(?P<esid>\d+)/answer$",\n        views.answer_empty_survey,\n        name="answer_empty_survey")
    - re_path(r"^empty_questionnaire/(?P<esid>\d+)/new_engagement$",\n        views.engagement_empty_survey,\n        name="engagement_empty_survey")
    - views.ExistingEngagementEmptySurveyView.as_view()
    - views.SystemSettingsView.as_view()
    - re_path(r"^calendar/tests$", views.test_calendar, name="test_calendar")
    - views.ViewTest.as_view()
    - re_path(r"^test/(?P<tid>\d+)/ics$", views.test_ics,\n        name="test_ics")
    - re_path(r"^test/(?P<tid>\d+)/edit$", views.edit_test,\n        name="edit_test")
    - re_path(r"^test/(?P<tid>\d+)/delete$", views.delete_test,\n        name="delete_test")
    - re_path(r"^test/(?P<tid>\d+)/copy$", views.copy_test,\n        name="copy_test")
    - views.AddFindingView.as_view()
    - re_path(r"^test/(?P<tid>\d+)/add_findings/(?P<fid>\d+)$",\n        views.add_temp_finding, name="add_temp_finding")
    - re_path(r"^test/(?P<tid>\d+)/search$", views.search, name="search")
    - views.ReImportScanResultsView.as_view()
    - re_path(r"^test_type$", views.test_type, name="test_type")
    - re_path(r"^test_type/add$", views.add_test_type,\n        name="add_test_type")
    - re_path(r"^test_type/(?P<ptid>\d+)/edit$",\n        views.edit_test_type, name="edit_test_type")
    - re_path(r"^{}history/(?P<cid>\d+)/(?P<oid>\d+)$".format(get_system_setting("url_prefix")), views.action_history, name="action_history")
    - re_path(r"^manage_files/(?P<oid>\d+)/(?P<obj_type>\w+)$", views.manage_files, name="manage_files")
    - re_path(r"^access_file/(?P<fid>\d+)/(?P<oid>\d+)/(?P<obj_type>\w+)$", views.access_file, name="access_file")
    - re_path(r"^{}/(?P<path>.*)$".format(settings.MEDIA_URL.strip("/")), views.protected_serve, {"document_root": settings.MEDIA_ROOT})
    - re_path(r"^login$", views.login_view, name="login")
    - re_path(r"^logout$", views.logout_view, name="logout")
    - re_path(r"^alerts$", views.alerts, name="alerts")
    - re_path(r"^alerts/json$", views.alerts_json, name="alerts_json")
    - re_path(r"^alerts/count$", views.alertcount, name="alertcount")
    - re_path(r"^delete_alerts$", views.delete_alerts, name="delete_alerts")
    - re_path(r"^profile$", views.view_profile, name="view_profile")
    - re_path(r"^change_password$", views.change_password, name="change_password")
    - re_path(r"^user$", views.user, name="users")
    - re_path(r"^user/add$", views.add_user, name="add_user")
    - re_path(r"^user/(?P<uid>\d+)$", views.view_user, name="view_user")
    - re_path(r"^user/(?P<uid>\d+)/edit$", views.edit_user, name="edit_user")
    - re_path(r"^user/(?P<uid>\d+)/delete", views.delete_user, name="delete_user")
    - re_path(r"^user/(?P<uid>\d+)/add_product_type_member$", views.add_product_type_member, name="add_product_type_member_user")
    - re_path(r"^user/(?P<uid>\d+)/add_product_member$", views.add_product_member, name="add_product_member_user")
    - re_path(r"^user/(?P<uid>\d+)/add_group_member$", views.add_group_member, name="add_group_member_user")
    - re_path(r"^user/(?P<uid>\d+)/edit_permissions$", views.edit_permissions, name="edit_user_permissions")
    - views.DojoPasswordResetView.as_view(\n            template_name="login/password_reset.html",\n        )
    - views.DojoForgotUsernameView.as_view(\n            template_name="login/forgot_username.html",\n            success_url=reverse_lazy("forgot_username_done"),\n        )
    - re_path(r"^api/key-v2$", views.api_v2_key, name="api_v2_key")
  dojo.models.Dojo_Group:
    - model = Dojo_Group
    - Dojo_Group.objects.none()
    - model = Dojo_Group
    - model = Dojo_Group
    - model = Dojo_Group
    - Dojo_Group.objects.none()
    - Dojo_Group.objects.exclude(id__in=current_groups)
    - Dojo_Group.objects.none()
    - Dojo_Group.objects.none()
    - Dojo_Group.objects.none()
    - Dojo_Group.objects.all()
    - Dojo_Group.objects.annotate(user=Exists(authorized_roles))
    - receiver(post_save, sender=Dojo_Group)
    - receiver(post_delete, sender=Dojo_Group)
    - def get_initial_context(self, request: HttpRequest, groups: QuerySet[Dojo_Group]):\n        filtered_groups = GroupFilter(request.GET, queryset=groups)\n        return {\n            "name": "All Grou...
    - get_object_or_404(Dojo_Group, id=group_id)
    - def get_initial_context(self, group: Dojo_Group):\n        return {\n            "group": group,\n            "products": get_product_groups_for_group(group),\n            "product_types": get_product...
    - def set_configuration_permissions(self, group: Dojo_Group, context: dict):\n        # Create authorization group if it doesn't exist and add product members\n        if not group.auth_group:\n        ...
    - get_object_or_404(Dojo_Group, id=group_id)
    - def get_global_role(self, group: Dojo_Group):\n        # Try to pull the global role from the group object\n        return group.global_role if hasattr(group, "global_role") else None
    - def get_group_form(self, request: HttpRequest, group: Dojo_Group):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial...
    - def get_initial_context(self, request: HttpRequest, group: Dojo_Group, global_role: Global_Role):\n        return {\n            "form": self.get_group_form(request, group),\n            "global_role_...
    - def process_forms(self, request: HttpRequest, group: Dojo_Group, context: dict):\n        # Validate the forms\n        if context["form"].is_valid() and context["global_role_form"].is_valid():\n     ...
    - get_object_or_404(Dojo_Group, id=group_id)
    - def get_group_form(self, request: HttpRequest, group: Dojo_Group):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial...
    - def get_initial_context(self, request: HttpRequest, group: Dojo_Group):\n        # Add the related objects to the delete page\n        rels = ["Previewing the relationships has been disabled.", ""]\n ...
    - def process_forms(self, request: HttpRequest, group: Dojo_Group, context: dict):\n        # Validate the forms\n        if context["form"].is_valid():\n            try:\n                group.delete()...
    - user_is_authorized(Dojo_Group, Permissions.Group_Manage_Members, "gid")
    - get_object_or_404(Dojo_Group, id=gid)
    - get_object_or_404(Dojo_Group, id=gid)
    - get_object_or_404(Dojo_Group, id=gid)
    - get_object_or_404(Dojo_Group, id=gid)
    - Dojo_Group.objects.filter(name=group_name)
    - Dojo_Group(name=group_name, description="Migrated staff users")
    - assign_user_to_groups(user, group_names, Dojo_Group.AZURE)
    - Dojo_Group.objects.get_or_create(name=group_name, social_provider=social_provider)
    - assign_user_to_groups(user, request.META[settings.AUTH_REMOTEUSER_GROUPS_HEADER].split(","), Dojo_Group.REMOTE)
  dojo.utils.async_delete:
    - async_delete()
    - async_delete()
    - async_delete()
    - async_delete()
    - async_delete()
    - async_delete()
    - async_delete()
    - async_delete()
  dojo.filters.ApiProductFilter:
    - filterset_class = ApiProductFilter
  dojo.forms.StubFindingForm:
    - StubFindingForm(request.POST)
  dojo.finding.views.BaseListFindings:
    - BaseListFindings(\n        filter_name=filter_name,\n        product_id=pid,\n        engagement_id=eid,\n        test_id=tid)
  dojo.api_v2.views.ProductGroupViewSet:
    - v2_api.register(r"product_groups", ProductGroupViewSet, basename="product_group")
  dojo.filters.ComponentFilter:
    - filter_class = ComponentFilterWithoutObjectLookups if filter_string_matching else ComponentFilter
  dojo.forms.EngForm:
    - EngForm(request.POST, instance=engagement, cicd=is_ci_cd, product=engagement.product, user=request.user)
    - EngForm(initial={"product": engagement.product}, instance=engagement, cicd=is_ci_cd, product=engagement.product, user=request.user)
    - EngForm(request.POST, cicd=cicd, product=product, user=request.user)
    - EngForm(initial={"lead": request.user, "target_start": timezone.now().date(),\n                                "target_end": timezone.now().date() + timedelta(days=7), "product": product}, cicd=cicd,\n                       product=product, user=request.user)
  dojo.forms.GITHUBFindingForm:
    - GITHUBFindingForm(*args, **kwargs)
    - GITHUBFindingForm(\n                    request.POST,\n                    prefix="githubform",\n                    enabled=GITHUB_PKey.objects.get(\n                        product=test.engagement.product,\n                    ).push_all_issues,\n                )
    - GITHUBFindingForm(*args, **kwargs)
  dojo.api_v2.prefetch.prefetcher._Prefetcher:
    - _Prefetcher()
  dojo.reports.views.prefetch_related_findings_for_report:
    - prefetch_related_findings_for_report(\n                Finding.objects.filter(\n                    test__engagement__product__prod_type=product_type,\n                ),\n            )
    - prefetch_related_findings_for_report(\n                Finding.objects.filter(test__engagement__product=product),\n            )
    - prefetch_related_findings_for_report(\n                Finding.objects.filter(test__engagement=engagement),\n            )
    - prefetch_related_findings_for_report(\n                Finding.objects.filter(test=test),\n            )
    - prefetch_related_findings_for_report(\n                Finding.objects.filter(endpoints__in=endpoints),\n            )
    - prefetch_related_findings_for_report(obj)
  dojo.authorization.authorization.user_has_permission_or_403:
    - user_has_permission_or_403(request.user, product, Permissions.Product_View)
    - user_has_permission_or_403(request.user, form.product, Permissions.Endpoint_Add)
    - user_has_permission_or_403(request.user, product, Permissions.Endpoint_Delete)
    - user_has_permission_or_403(request.user, product, Permissions.Finding_Edit)
    - user_has_permission_or_403(request.user, eng, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, eng, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, eng, Permissions.Note_Add)
    - user_has_permission_or_403(user, engagement_or_product, Permissions.Import_Scan_Result)
    - user_has_permission_or_403(request.user, product, Permissions.Product_View)
    - user_has_permission_or_403(request.user, engagement, Permissions.Engagement_View)
    - user_has_permission_or_403(user, finding, Permissions.Finding_View)
    - user_has_permission_or_403(user, finding, Permissions.Finding_View)
    - user_has_permission_or_403(user, finding, Permissions.Note_Add)
    - user_has_permission_or_403(request.user, finding, Permissions.Finding_Edit)
    - user_has_permission_or_403(request.user, finding, Permissions.Finding_Edit)
    - user_has_permission_or_403(request.user, finding, Permissions.Finding_Delete)
    - user_has_permission_or_403(\n                        request.user, product, Permissions.Finding_Delete,\n                    )
    - user_has_permission_or_403(\n                        request.user, product, Permissions.Finding_Edit,\n                    )
    - user_has_permission_or_403(request.user, group, Permissions.Group_View)
    - user_has_permission_or_403(request.user, group, Permissions.Group_Edit)
    - user_has_permission_or_403(request.user, group, Permissions.Group_Edit)
    - user_has_permission_or_403(request.user, group, Permissions.Group_Delete)
    - user_has_permission_or_403(request.user, group, Permissions.Group_Delete)
    - user_has_permission_or_403(request.user, pt, Permissions.Product_Type_View)
    - user_has_permission_or_403(request.user, object, Permissions.Note_Delete)
    - user_has_permission_or_403(request.user, object, Permissions.Note_Edit)
    - user_has_permission_or_403(request.user, object, Permissions.Note_View_History)
    - user_has_permission_or_403(request.user, product_type, Permissions.Product_Type_Add_Product)
    - user_has_permission_or_403(request.user, product, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, product, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_Type_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Endpoint_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, product, Permissions.Engagement_Add)
    - user_has_permission_or_403(request.user, survey.engagement, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, engagement, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, survey.engagement, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, test, Permissions.Test_View)
    - user_has_permission_or_403(request.user, test, Permissions.Note_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Test_View)
    - user_has_permission_or_403(request.user, test, Permissions.Note_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Import_Scan_Result)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Endpoint_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
  dojo.models.ENGAGEMENT_STATUS_CHOICES:
    - MultipleChoiceFilter(choices=ENGAGEMENT_STATUS_CHOICES, label="Status")
    - MultipleChoiceFilter(\n        choices=ENGAGEMENT_STATUS_CHOICES,\n        label="Status")
    - MultipleChoiceFilter(field_name="status", choices=ENGAGEMENT_STATUS_CHOICES,\n                                              label="Status")
    - MultipleChoiceFilter(choices=ENGAGEMENT_STATUS_CHOICES, label="Status")
