
django:
  django.utils.translation.gettext_lazy aliased as _:
    - _("Announcement removed for everyone.")
    - _("Announcement updated successfully.")
    - _("Announcement removed.")
    - _("Failed to remove announcement.")
    - _(\n            'Expected a list of items but got type "{input_type}".',\n        )
    - _(\n            "Invalid json list. A tag list submitted in string"\n            " form must be valid json.",\n        )
    - _("All list items must be of string type.")
    - _(\n            'Expected a list of items but got type "{input_type}".',\n        )
    - _(\n            "Invalid json list. A tag list submitted in string"\n            " form must be valid json.",\n        )
    - _(\n            "All list items must be of dict type with keys 'request' and 'response'",\n        )
    - _("All values in the dict must be of string type.")
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, _ = importer.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, _, _, _, _, test_import = self.get_reimporter(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, test_import = self.get_reimporter(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, test_import = self.get_reimporter(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, test_import = self.get_reimporter(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, test_import = self.get_reimporter(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - context["test"], _, _, _, _, _, _ = self.get_importer(\n                    **context,\n                ).process_scan(\n                    context.pop("scan", None),\n                )
    - _('The endpoint "%(name)s" was deleted by %(user)s')
    - _('The endpoint "%(name)s" was deleted')
    - _("Deletion of %(name)s")
    - _('Engagement created for "%(product)s": %(name)s')
    - _("Closure of %s")
    - _('The engagement "%s" was closed')
    - _("Reopening of %s")
    - _('The engagement "%s" was reopened')
    - _('The engagement "%(name)s" was deleted by %(user)s')
    - _('The engagement "%(name)s" was deleted')
    - _("Deletion of %(name)s")
    - _("Copying of %s")
    - context["test"], _, finding_count, closed_finding_count, _, _, _ = importer_client.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, finding_count, closed_finding_count, _, _, _ = importer_client.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, finding_count, closed_finding_count, _, _, _ = importer_client.process_scan(\n                context.pop("scan", None),\n            )
    - context["test"], _, finding_count, closed_finding_count, _, _, _ = importer_client.process_scan(\n                context.pop("scan", None),\n            )
    - _("Any")
    - _("Open")
    - _("Verified")
    - _("Out Of Scope")
    - _("False Positive")
    - _("Inactive")
    - _("Risk Accepted")
    - _("Closed")
    - _("Under Review")
    - _("Any")
    - _("False")
    - _("True")
    - _("Yes")
    - _("No")
    - _("Any")
    - _("False")
    - _("True")
    - _("Any date")
    - options = {\n        None: (_("Any date"), lambda qs, _: qs.all()),\n        1: (_("Today"), lambda qs, name: qs.filter(**{\n            f"{name}__year": now().year,\n            f"{name}__month": now...
    - _("Today")
    - _("Past 7 days")
    - _("Past 30 days")
    - _("Past 90 days")
    - _("Current month")
    - _("Current year")
    - _("Past year")
    - _("Any date")
    - options = {\n        None: (_("Any date"), lambda qs, _: qs.all()),\n        1: (_("Today"), lambda qs, name: qs.filter(**{\n            f"{name}__year": now().year,\n            f"{name}__month": now...
    - _("Today")
    - _("Next 7 days")
    - _("Next 30 days")
    - _("Next 90 days")
    - _("Past 7 days")
    - _("Past 30 days")
    - _("Past 90 days")
    - _("Current month")
    - _("Past year")
    - _("Current year")
    - _("Next year")
    - _("Either")
    - options = {\n        None: (_("Either"), lambda qs, _: qs.all()),\n        1: (_("Yes"), lambda qs, name: qs.filter(**{\n            f"{name}": True,\n        })),\n        2: (_("No"), lambda qs, name: qs.filter(**{\n            f"{name}": False,\n        })),\n    }
    - _("Yes")
    - _("No")
    - _("Either")
    - _("Yes")
    - _("No")
    - _("Expired")
    - _("Past 30 days")
    - _("Past 7 days")
    - _("Past 90 days")
    - _("Current month")
    - _("Current year")
    - _("Past 6 Months")
    - _("Past year")
    - _("Any date")
    - _("Planned remediation version")
    - filter_overrides = {\n            JSONField: {\n                "filter_class": CharFilter,\n                "extra": lambda _: {\n                    "lookup_expr": "icontains",\n                },\n            },\n        }
    - _("Any")
    - _("Text Question")
    - _("Choice Question")
    - burp_rr, _ = BurpRawRequestResponse.objects.get_or_create(finding=finding)
    - _("Closing of %s")
    - _("Reopening of %s")
    - _("Copying of %s")
    - _("Select valid choice: Low,Medium,High")
    - _("Uploading a Report File is required for %s")
    - _("Report file is too large. Maximum supported size is %d MB")
    - _("Uploading a report file is required for re-uploading findings.")
    - _("Report file is too large. Maximum supported size is %d MB")
    - _ = kwargs.pop("finding")
    - author, _ = User.objects.get_or_create(username="JIRA")
    - _("Deletion of JIRA: %s")
    - _("All objects have been filtered away. Displaying all objects")
    - _("All objects have been filtered away. Displaying all objects")
    - _("Critical Product Metrics")
    - _("Metrics")
    - _("%(product_type)s Metrics")
    - _("Product Type Metrics by Findings")
    - _("Product Type Metrics by Affected Endpoints")
    - _("%(team_name)s Metrics")
    - _("Simple Metrics")
    - _("Please choose month and year and the Product Type.")
    - _("Bi-Weekly Metrics")
    - _("Please choose month and year and the Product Tag.")
    - _("Bi-Weekly Metrics")
    - _("Engineer Metrics")
    - _("Privacy")
    - _("Finance")
    - _("Education")
    - _("Medical")
    - _("Corporate")
    - _("Other")
    - _("The name of the regulation.")
    - _("A shortened representation of the name.")
    - _("The subject of the regulation.")
    - _("The territory over which the regulation applies.")
    - _("Information about the regulation's purpose.")
    - _("An external URL for more information.")
    - _("Phone number must be entered in the format: '+999999999'. "\n                                         "Up to 15 digits allowed.")
    - _("Phone number must be entered in the format: '+999999999'. "\n                                              "Up to 15 digits allowed.")
    - _("Phone number must be entered in the format: '+999999999'. "\n                                             "Up to 15 digits allowed.")
    - _("Email address associated with your slack account")
    - _("Slack Email Address")
    - _("Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.")
    - _("Forces this user to reset their password on next login.")
    - _("AzureAD")
    - _("Remote")
    - _("Group imported from a social provider.")
    - _("Social Authentication Provider")
    - _("Deduplicate findings")
    - _("With this setting turned on, DefectDojo deduplicates findings by "\n                  "comparing endpoints, cwe fields, and titles. "\n                  "If two findings share a URL and have the sa...
    - _("Requires next setting: maximum number of duplicates to retain.")
    - _("Max Duplicates")
    - _("When enabled, if a single "\n                                              "issue reaches the maximum "\n                                              "number of duplicates, the "\n                ...
    - _("Enable JIRA integration")
    - _("Enable JIRA web hook")
    - _("Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.")
    - _("Disable web hook secret")
    - _("Allows incoming requests without a secret (discouraged legacy behaviour)")
    - _("JIRA Webhook URL")
    - _("Secret needed in URL for incoming JIRA Webhook")
    - _("JIRA issue labels space seperated")
    - _("Add vulnerability Id as a JIRA label")
    - _("Enable GITHUB integration")
    - _("Enable Slack notifications")
    - _("Optional. Needed if you want to send global notifications.")
    - _("Token required for interacting "\n                                             "with Slack. Get one at "\n                                             "https://api.slack.com/tokens")
    - _("Optional. Will take your bot name otherwise.")
    - _("Enable Microsoft Teams notifications")
    - _("The full URL of the "\n                                              "incoming webhook")
    - _("Enable Webhook notifications")
    - _("How many seconds will DefectDojo waits for response from webhook endpoint")
    - _("Enforce Verified Status - Globally")
    - _(\n            "When enabled, features such as product grading, jira "\n            "integration, metrics, and reports will only interact "\n            "with verified findings. This setting will override "\n            "individually scoped verified toggles.",\n        )
    - _("Enforce Verified Status - Jira")
    - _("When enabled, findings must have a verified status to be pushed to jira.")
    - _("Enforce Verified Status - Product Grading")
    - _(\n            "When enabled, findings must have a verified status to be considered as part of a product's grading.",\n        )
    - _("Enforce Verified Status - Metrics")
    - _(\n            "When enabled, findings must have a verified status to be counted in metric calculations, "\n            "be included in reports, and filters.",\n        )
    - _(\n            "(EXPERIMENTAL) DefectDojo will automatically mark the finding as a "\n            "false positive if an equal finding (according to its dedupe algorithm) "\n            "has been prev...
    - _(\n            "(EXPERIMENTAL) FP History will also retroactively mark/unmark all "\n            "existing equal findings in the same product as a false positives. "\n            "Only works if the False Positive History feature is also enabled.",\n        )
    - _("URL prefix if DefectDojo is installed in it's own virtual subdirectory.")
    - _("Enable Product Grading")
    - _("Displays a grade letter next to a product to show the overall health.")
    - _("Grade A")
    - _("Percentage score for an "\n                                                    "'A' >=")
    - _("Grade B")
    - _("Percentage score for a "\n                                                    "'B' >=")
    - _("Grade C")
    - _("Percentage score for a "\n                                                    "'C' >=")
    - _("Grade D")
    - _("Percentage score for a "\n                                                    "'D' >=")
    - _("Grade F")
    - _("Percentage score for an "\n                                                    "'F' <=")
    - _("Enable Product Tag Inheritance")
    - _("Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings")
    - _("Enable Benchmarks")
    - _("Enables Benchmarks such as the OWASP ASVS "\n                  "(Application Security Verification Standard)")
    - _("Enable Remediation Advice")
    - _("Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.")
    - _("Enable Similar Findings")
    - _("Enable the query of similar findings on the view finding page. This feature can involve potentially large queries and negatively impact performance")
    - _("Enable Engagement Auto-Close")
    - _("Closes an engagement after 3 days (default) past due date including last update.")
    - _("Engagement Auto-Close Days")
    - _("Closes an engagement after the specified number of days past due date including last update.")
    - _("Enable Finding SLA's")
    - _("Enables Finding SLA's for time to remediate.")
    - _("Enable Notify SLA's Breach for active Findings")
    - _("Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.")
    - _("Enable Notify SLA's Breach for active, verified Findings")
    - _("Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.")
    - _("Enable Notify SLA's Breach only for Findings linked to JIRA")
    - _("Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues")
    - _("Enable an exponential backoff strategy for SLA breach notifications.")
    - _("Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day")
    - _("Allow Anonymous Survey Responses")
    - _("Enable anyone with a link to the survey to answer a survey")
    - _("Custom Disclaimer for Notifications")
    - _("Include this custom disclaimer on all notifications")
    - _("Custom Disclaimer for Reports")
    - _("Include this custom disclaimer on generated reports")
    - _("Force to add disclaimer reports")
    - _("Disclaimer will be added to all reports even if user didn't selected 'Include disclaimer'.")
    - _("Custom Disclaimer for Notes")
    - _("Include this custom disclaimer next to input form for notes")
    - _("Default expiry period for risk acceptance form.")
    - _("Risk acceptance expiration heads up days")
    - _("Notify X days before risk acceptance expires. Leave empty to disable.")
    - _("Enable credentials")
    - _("With this setting turned off, credentials will be disabled in the user interface.")
    - _("Enable questionnaires")
    - _("With this setting turned off, questionnaires will be disabled in the user interface.")
    - _("Enable checklists")
    - _("With this setting turned off, checklists will be disabled in the user interface.")
    - _("Enable Endpoint Metadata Import")
    - _("With this setting turned off, endpoint metadata import will be disabled in the user interface.")
    - _("Enable user profile for writing")
    - _("When turned on users can edit their profiles")
    - _("Enable Product Tracking Files")
    - _("With this setting turned off, the product tracking files will be disabled in the user interface.")
    - _("Enable Finding Groups")
    - _("With this setting turned off, the Finding Groups will be disabled.")
    - _("Enable UI Table Based Filtering/Sorting")
    - _("With this setting enabled, table headings will contain sort buttons for the current page of data in addition to sorting buttons that consider data from all pages.")
    - _("Enable Calendar")
    - _("With this setting turned off, the Calendar will be disabled in the user interface.")
    - _("New users will be assigned to this group.")
    - _("New users will be assigned to their default group with this role.")
    - _("New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.")
    - _("Minimum password length")
    - _("Requires user to set passwords greater than minimum length.")
    - _("Maximum password length")
    - _("Requires user to set passwords less than maximum length.")
    - _("Password must contain one digit")
    - _("Requires user passwords to contain at least one digit (0-9).")
    - _("Password must contain one special character")
    - _("Requires user passwords to contain at least one special character (()[]{}|\\`~!@#$%^&*_-+=;:'\",<>./?).")
    - _("Password must contain one lowercase letter")
    - _("Requires user passwords to contain at least one lowercase letter (a-z).")
    - _("Password must contain one uppercase letter")
    - _("Requires user passwords to contain at least one uppercase letter (A-Z).")
    - _("Password must not be common")
    - _("Requires user passwords to not be part of list of common passwords.")
    - _("API expose error details")
    - _("When turned on, the API will expose error details in the response.")
    - _("Filter String Matching Optimization")
    - _(\n            "When turned on, all filter operations in the UI will require string matches rather than ID. "\n            "This is a performance enhancement to avoid fetching objects unnecessarily.",\n        )
    - _("This role determines the permissions of the user to manage the group.")
    - _("Group role")
    - _("The global role will be applied to all product types and products.")
    - _("Global role")
    - _, current_full_filename = current_url.rsplit("/", 1)
    - _, extension = current_full_filename.split(".", 1)
    - _("Unsupported extension. Supported extensions are as follows: %s")
    - _("File uploads are prohibited due to the list of acceptable file extensions being empty")
    - _("Set to True for test types that are created at import time")
    - _("Custom SLA Name")
    - _("A unique name for the set of SLAs.")
    - _("Critical Finding SLA Days")
    - _("The number of days to remediate a critical finding.")
    - _("Enforce Critical Finding SLA Days")
    - _("When enabled, critical findings will be assigned an SLA expiration date based on the critical finding SLA days within this SLA configuration.")
    - _("High Finding SLA Days")
    - _("The number of days to remediate a high finding.")
    - _("Enforce High Finding SLA Days")
