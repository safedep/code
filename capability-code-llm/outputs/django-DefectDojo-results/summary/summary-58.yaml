
django:
  django.shortcuts.render:
    - render(request, "dojo/new_test_type.html", {\n        "name": "Add Test Type",\n        "metric": False,\n        "user": request.user,\n        "form": form,\n    })
    - render(request, "dojo/edit_test_type.html", {\n        "name": "Edit Test Type",\n        "metric": False,\n        "user": request.user,\n        "form": form,\n        "pt": tt})
    - render(request, "dojo/new_tool_config.html",\n                  {"tform": tform})
    - render(request,\n                  "dojo/edit_tool_config.html",\n                  {\n                      "tform": tform,\n                  })
    - render(request,\n                  "dojo/tool_config.html",\n                  {"confs": confs,\n                   })
    - render(request, "dojo/new_tool_product.html", {\n        "tform": tform,\n        "product_tab": product_tab,\n        "pid": pid,\n    })
    - render(request, "dojo/view_tool_product_all.html", {\n        "prod": prod,\n        "tools": tools,\n        "product_tab": product_tab,\n    })
    - render(request, "dojo/edit_tool_product.html", {\n        "tform": tform,\n        "product_tab": product_tab,\n    })
    - render(request, "dojo/delete_tool_product.html", {\n        "tform": tform,\n        "product_tab": product_tab,\n    })
    - render(request, "dojo/new_tool_type.html", {"tform": tform})
    - render(request, "dojo/edit_tool_type.html", {"tform": tform})
    - render(request, "dojo/tool_type.html", {"confs": confs})
    - render(request, "dojo/api_v2_key.html",\n                  {"name": _("API v2 Key"),\n                   "metric": False,\n                   "user": request.user,\n                   "key": api_key,\n                   "form": form,\n                   })
    - render(request,\n                  "dojo/alerts.html",\n                  {"alerts": paged_alerts})
    - render(request, "dojo/delete_alerts.html", {\n        "alerts": alerts,\n        "delete_preview": get_setting("DELETE_PREVIEW"),\n    })
    - render(request, "dojo/profile.html", {\n        "user": user,\n        "form": form,\n        "contact_form": contact_form,\n        "global_role_form": global_role_form,\n        "group_members": group_members})
    - render(request, "dojo/change_pwd.html", {"form": form})
    - render(request, "dojo/users.html", {\n        "users": paged_users,\n        "filtered": users,\n        "name": page_name,\n    })
    - render(request, "dojo/add_user.html", {\n        "name": page_name,\n        "form": form,\n        "contact_form": contact_form,\n        "global_role_form": global_role_form,\n        "to_add": True})
    - render(request, "dojo/view_user.html", {\n        "user": user,\n        "product_members": product_members,\n        "product_type_members": product_type_members,\n        "group_members": group_members,\n        "configuration_permission_form": configuration_permission_form})
    - render(request, "dojo/add_user.html", {\n        "name": page_name,\n        "form": form,\n        "contact_form": contact_form,\n        "global_role_form": global_role_form,\n        "to_edit": user})
    - render(request, "dojo/delete_user.html",\n                  {"to_delete": user,\n                   "form": form,\n                   "rels": rels,\n                   })
    - render(request, "dojo/new_product_type_member_user.html", {\n        "user": user,\n        "form": memberform,\n    })
    - render(request, "dojo/new_product_member_user.html", {\n        "user": user,\n        "form": memberform,\n    })
    - render(request, "dojo/new_group_member_user.html", {\n        "user": user,\n        "form": memberform,\n    })
    - render(request, "500.html", {}, status=500)
    - render(request, "400.html", {}, status=400)
    - render(request, "dojo/action_history.html",\n                  {"history": paged_history,\n                   "product_tab": product_tab,\n                   "filtered": history,\n                   "...
    - render(\n        request, "dojo/manage_files.html", {\n            "files_formset": files_formset,\n            "obj": obj,\n            "obj_type": obj_type,\n        })
  django.db.models.Max:
    - Max("engagement__target_start")
  django.conf.settings:
    - dojo_user = Dojo_User.objects.get(id=instance.id)\n        announcement = announcements.first()\n        cloud_announcement = (\n            "Cloud and On-Premise Subscriptions Now Available!"\n      ...
    - instance_is_superuser = self.instance.is_superuser if self.instance is not None else False\n        data_is_superuser = data.get("is_superuser", False)\n        if not self.context["request"].user.is_...
    - "{site_url}/{file_access_url}".format(\n                        site_url=settings.SITE_URL,\n                        file_access_url=file.get_accessible_url(\n                            engagement, engagement.id,\n                        ),\n                    )
    - new_files.append(\n                {\n                    "id": file.id,\n                    "file": f"{settings.SITE_URL}/{file.get_accessible_url(test, test.id)}",\n                    "title": file.title,\n                },\n            )
    - var = settings.MAX_REQRESP_FROM_API
    - msg = f"Report file is too large. Maximum supported size is {settings.SCAN_FILE_MAX_SIZE} MB"
    - msg = f"Report file is too large. Maximum supported size is {settings.SCAN_FILE_MAX_SIZE} MB"
    - msg = f"File is too large. Maximum supported size is {settings.SCAN_FILE_MAX_SIZE} MB"
    - "{site_url}/{file_access_url}".format(\n                        site_url=settings.SITE_URL,\n                        file_access_url=file.get_accessible_url(\n                            finding, finding.id,\n                        ),\n                    )
    - file_path = f"{settings.MEDIA_ROOT}/{file_object.name}"
    - finding.is_mitigated = finding_close.validated_data[\n                    "is_mitigated"\n                ]\n                if settings.EDITABLE_MITIGATED_DATA:\n                    finding.mitigated...
    - e_status.mitigated_by = request.user\n                    if settings.EDITABLE_MITIGATED_DATA:\n                        e_status.mitigated_time = (\n                            finding_close.validated...
    - var = settings.MAX_REQRESP_FROM_API
    - result = {\n        "product_type": product_type,\n        "product": product,\n        "engagement": engagement,\n        "report_name": report_name,\n        "report_info": report_info,\n        "te...
    - app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
    - dictConfig(settings.LOGGING)
    - errors = []\n    for scanner in settings.HASHCODE_FIELDS_PER_SCANNER:\n        for field in settings.HASHCODE_FIELDS_PER_SCANNER.get(scanner):\n            if field not in settings.HASHCODE_ALLOWED_FI...
    - settings.HASHCODE_FIELDS_PER_SCANNER.get(scanner)
    - if field not in settings.HASHCODE_ALLOWED_FIELDS:\n                errors.append(\n                    Error(\n                        f"Configuration error in HASHCODE_FIELDS_PER_SCANNER: Element {fi...
    - Error(\n                        f"Configuration error in HASHCODE_FIELDS_PER_SCANNER: Element {field} is not in the allowed list HASHCODE_ALLOWED_FIELDS for {scanner}.",\n                        hint=...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - return {\n        "SHOW_LOGIN_FORM": settings.SHOW_LOGIN_FORM,\n        "FORGOT_PASSWORD": settings.FORGOT_PASSWORD,\n        "FORGOT_USERNAME": settings.FORGOT_USERNAME,\n        "CLASSIC_AUTH_ENABLE...
    - if not settings.DISABLE_ALERT_COUNTER:\n        from dojo.models import Alerts\n\n        if hasattr(request, "user") and request.user.is_authenticated:\n            return {"alert_count": Alerts.objects.filter(user_id=request.user).count()}\n    return {}
    - migrations.swappable_dependency(settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(default=None, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_reviewed_by', to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mitigated_by', to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='reporter', to=settings.AUTH_USER_MODEL)
    - models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - migrations.swappable_dependency(settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_notes_set', to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='editor_notes_set', to=settings.AUTH_USER_MODEL)
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)
    - if not settings.CELERY_PASS_MODEL_BY_ID:\n                return func(*args, **kwargs)\n\n            model_or_id = get_parameter_froms_args_kwargs(args, kwargs, parameter)\n\n            if model_or_...
    - if not settings.CELERY_PASS_MODEL_BY_ID:\n                return func(*args, **kwargs)\n\n            logger.debug("args:" + str(args))\n            logger.debug("kwargs:" + str(kwargs))\n\n          ...
    - getattr(settings, "RATE_LIMITER_BLOCK", block)
    - getattr(settings, "RATE_LIMITER_RATE", rate)
    - getattr(settings, "RATE_LIMITER_ACCOUNT_LOCKOUT", False)
    - if settings.ENABLE_AUDITLOG:\n            le = LogEntry.objects.get(\n                action=LogEntry.Action.DELETE,\n                content_type=ContentType.objects.get(app_label="dojo", model="endp...
    - messages.add_message(\n                    request,\n                    messages.ERROR,\n                    f"Report file is too large. Maximum supported size is {settings.SCAN_FILE_MAX_SIZE} MB",\n                    extra_tags="alert-danger")
    - if settings.ENABLE_AUDITLOG:\n            le = LogEntry.objects.get(\n                action=LogEntry.Action.DELETE,\n                content_type=ContentType.objects.get(app_label="dojo", model="enga...
    - open(settings.MEDIA_ROOT + "/" + risk_acceptance.path.name, mode="rb")
    - version = CharFilter(lookup_expr="icontains", label="Version")\n    if settings.TRACK_IMPORT_HISTORY:\n        test_import__version = CharFilter(field_name="test_import__version", lookup_expr="icontai...
    - return settings.EDITABLE_MITIGATED_DATA and user.is_superuser
    - if original is None or cluster_outside is None or len(cluster_outside) == 0:\n        return\n\n    if settings.DUPLICATE_CLUSTER_CASCADE_DELETE:\n        cluster_outside.order_by("-id").delete()\n   ...
    - get_page_items(\n            request,\n            similar_findings_filter.qs,\n            settings.SIMILAR_FINDINGS_MAX_RESULTS,\n            prefix="similar",\n        )
    - msg = _("Report file is too large. Maximum supported size is %d MB") % settings.SCAN_FILE_MAX_SIZE
    - msg = _("Report file is too large. Maximum supported size is %d MB") % settings.SCAN_FILE_MAX_SIZE
    - valid_extensions = settings.FILE_UPLOAD_TYPES
    - forms.CharField(widget=forms.PasswordInput,\n        required=settings.REQUIRE_PASSWORD_ON_USER,\n        validators=[validate_password],\n        help_text="")
    - template_root = settings.JIRA_TEMPLATE_ROOT
    - base_dir.removeprefix(settings.TEMPLATE_DIR_PREFIX)
    - auth_group = Group(name=get_auth_group_name(group))\n        auth_group.save()\n        group.auth_group = auth_group\n        group.save()\n        user = get_current_user()\n        if user and not ...
    - """\n        Determines whether to process the scan iteratively, or in chunks,\n        based upon the ASYNC_FINDING_IMPORT setting\n        """\n        if settings.ASYNC_FINDING_IMPORT:\n           ...
    - """Creates a record of the import or reimport operation that has occurred."""\n        # Quick fail check to determine if we even wanted this\n        if settings.TRACK_IMPORT_HISTORY is False:\n     ...
    - def chunk_findings(\n        self,\n        finding_list: list[Finding],\n        chunk_size: int = settings.ASYNC_FINDING_IMPORT_CHUNK_SIZE,\n    ) -> list[list[Finding]]:\n        """\n        Split...
    - def chunk_endpoints(\n        self,\n        endpoint_list: list[Endpoint],\n        chunk_size: int = settings.ASYNC_FINDING_IMPORT_CHUNK_SIZE,\n    ) -> list[list[Endpoint]]:\n        """\n        S...
    - """\n        Determines whether to asynchronously process endpoints on a finding or not. if so,\n        chunk up the findings to be dispersed into individual celery workers. Otherwise,\n        only ...
    - """\n        Reactivates all endpoint status objects. Whether this function will asynchronous or not is dependent\n        on the ASYNC_FINDING_IMPORT setting. If it is set to true, endpoint statuses ...
    - """\n        Mitigates all endpoint status objects. Whether this function will asynchronous or not is dependent\n        on the ASYNC_FINDING_IMPORT setting. If it is set to true, endpoint statuses wi...
    - JIRA(\n        server=jira_server,\n        basic_auth=(jira_username, jira_password),\n        max_retries=0,\n        options={\n            "verify": settings.JIRA_SSL_VERIFY,\n            "headers": settings.ADDITIONAL_HEADERS,\n        })
    - JIRA(\n        server=jira_server,\n        basic_auth=(jira_username, jira_password),\n        max_retries=0,\n        options={\n            "verify": settings.JIRA_SSL_VERIFY,\n            "headers": settings.ADDITIONAL_HEADERS,\n        })
    - hasattr(settings, "JIRA_CONNECT_METHOD")
    - settings.JIRA_CONNECT_METHOD.rpartition(".")
    - jira_attachment(\n                        find, jira, new_issue,\n                        settings.MEDIA_ROOT + "/" + pic)
    - jira_attachment(\n                        find, jira, issue,\n                        settings.MEDIA_ROOT + "/" + pic)
