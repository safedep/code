
django:
  django.db.models.Q:
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(endpoint__product__prod_type__member=True)
    - Q(endpoint__product__member=True)
    - Q(endpoint__product__prod_type__authorized_group=True)
    - Q(endpoint__product__authorized_group=True)
    - Q(port__isnull=True)
    - Q(port__exact=SCHEME_PORT_MAP[kwargs["protocol"].lower()])
    - Q(port__isnull=True)
    - Q(port__exact=SCHEME_PORT_MAP[kwargs["protocol"].lower()])
    - Q(endpoint=None)
    - Q(finding=None)
    - Q(finding__active=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(lead__isnull=True)
    - Q(lead__in=leads)
    - Q(engagement=None)
    - Q(finding__active=True)
    - Q(finding__active=True)
    - Q(finding__verified=True)
    - Q(finding__is_mitigated=True)
    - Q(finding__duplicate=True)
    - Q(test_import__type=Test_Import.REIMPORT_TYPE)
    - Q(**{filter: values})
    - Q(sla_expiration_date__isnull=True)
    - Q(sla_expiration_date__gt=timezone.now().date())
    - Q(\n                active=True,\n                false_p=False,\n                duplicate=False,\n                out_of_scope=False,\n                risk_accepted=False,\n                is_mitigated=False,\n                mitigated=None,\n            )
    - Q(sla_expiration_date__lt=timezone.now().date())
    - Q(jira_issue=None)
    - Q(finding_group__jira_issue=None)
    - Q(jira_issue=None)
    - Q(finding_group__jira_issue=None)
    - Q(active=True)
    - Q(active=True, verified=True)
    - Q(active=False, out_of_scope=True)
    - Q(active=False, duplicate=False, false_p=True)
    - Q(active=False, duplicate=False, is_mitigated=False, false_p=False, out_of_scope=False)
    - Q(risk_accepted=True)
    - Q(risk_accepted=False)
    - Q(risk_acceptance__isnull=False)
    - Q(risk_acceptance__expiration_date_handled__isnull=False)
    - Q(is_mitigated=True)
    - Q(under_review=True)
    - Q(test__engagement__product__prod_type__member=True)
    - Q(test__engagement__product__member=True)
    - Q(test__engagement__product__prod_type__authorized_group=True)
    - Q(test__engagement__product__authorized_group=True)
    - Q(test__engagement__product__prod_type__member=True)
    - Q(test__engagement__product__member=True)
    - Q(test__engagement__product__prod_type__authorized_group=True)
    - Q(test__engagement__product__authorized_group=True)
    - Q(finding__test__engagement__product__prod_type__member=True)
    - Q(finding__test__engagement__product__member=True)
    - Q(finding__test__engagement__product__prod_type__authorized_group=True)
    - Q(finding__test__engagement__product__authorized_group=True)
    - Q(status_finding__mitigated=False)
    - Q(status_finding__mitigated=True)
    - Q(is_superuser=True)
    - Q(id__in=current_members)
    - Q(is_superuser=True)
    - Q(id__in=current_members)
    - Q(is_superuser=True)
    - Q(id__in=current_members)
    - Q(engagement__isnull=True)
    - Q(engagement__in=engagements)
    - Q(service__isnull=True)
    - Q(service__exact="")
    - Q(test=self.test)
    - Q(hash_code__isnull=False)
    - Q(hash_code=unsaved_finding.hash_code)
    - Q(unique_id_from_tool__isnull=False)
    - Q(unique_id_from_tool=unsaved_finding.unique_id_from_tool)
    - Q(false_positive=True)
    - Q(out_of_scope=True)
    - Q(risk_accepted=True)
    - Q(engagement__product__prod_type__member=True)
    - Q(engagement__product__member=True)
    - Q(engagement__product__prod_type__authorized_group=True)
    - Q(engagement__product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(engagement__product__prod_type__member=True)
    - Q(engagement__product__member=True)
    - Q(engagement__product__prod_type__authorized_group=True)
    - Q(engagement__product__authorized_group=True)
    - Q(finding_group__test__engagement__product__prod_type__member=True)
    - Q(finding_group__test__engagement__product__member=True)
    - Q(finding_group__test__engagement__product__prod_type__authorized_group=True)
    - Q(finding_group__test__engagement__product__authorized_group=True)
    - Q(finding__test__engagement__product__prod_type__member=True)
    - Q(finding__test__engagement__product__member=True)
    - Q(finding__test__engagement__product__prod_type__authorized_group=True)
    - Q(finding__test__engagement__product__authorized_group=True)
    - Q(**{total_expression: ("Critical", "High", "Medium", "Low", "Info")})
    - Q(**{expression: "Critical"})
    - Q(**{expression: "High"})
    - Q(**{expression: "Medium"})
    - Q(**{expression: "Low"})
    - Q(**{expression: "Info"})
    - Q(**{metrics_type.closed_lookup: True})
    - Q(date=d)
    - Q(mitigated=d)
    - Q(severity="Critical")
    - Q(severity="High")
    - Q(mitigated=True)
    - Q(false_positive=True)
    - Q(out_of_scope=True)
    - Q(risk_accepted=True)
    - Q(finding__out_of_scope=True)
    - Q(finding__mitigated__isnull=False)
    - Q(finding__false_p=True)
    - Q(finding__duplicate=True)
    - Q(finding__active=False)
    - Q(test_import_finding_action__action=IMPORT_CREATED_FINDING)
    - Q(test_import_finding_action__action=IMPORT_CLOSED_FINDING)
    - Q(test_import_finding_action__action=IMPORT_REACTIVATED_FINDING)
    - Q(test_import_finding_action__action=IMPORT_UNTOUCHED_FINDING)
    - Q(product_id=self.product)
    - Q(product__isnull=True)
    - Q(notifications__product_id=self.product)
    - Q(notifications__product__isnull=True)
    - Q(applicable_notifications_count__gt=0)
    - Q(is_superuser=True)
    - Q(prod_type__member=True)
    - Q(member=True)
    - Q(prod_type__authorized_group=True)
    - Q(authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(endpoint__product__prod_type__member=True)
    - Q(endpoint__product__member=True)
    - Q(endpoint__product__prod_type__authorized_group=True)
    - Q(endpoint__product__authorized_group=True)
    - Q(finding__test__engagement__product__prod_type__member=True)
    - Q(finding__test__engagement__product__member=True)
    - Q(finding__test__engagement__product__prod_type__authorized_group=True)
    - Q(finding__test__engagement__product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(engagement__test__finding__active=True)
    - Q(engagement__active=True)
    - Q(engagement__active=False)
    - Q(\n                                                                                    engagement__test__finding__active=True)
    - Q(\n                                                    engagement__test__finding__active=True,\n                                                    engagement__test__finding__verified=True)
    - Q(active=True)
    - Q(duplicate=True)
    - Q(finding__verified=True)
    - Q(status="In Progress")
    - Q(test__finding__active=True)
    - Q(test__finding__active=True)
    - Q(test__finding__verified=True)
    - Q(test__finding__is_mitigated=True)
    - Q(test__finding__duplicate=True)
    - Q(test__finding__risk_accepted=True)
    - Q(member=True)
    - Q(authorized_group=True)
    - Q(prod_type__engagement__test__finding__active=True)
    - Q(prod_type__engagement__test__finding__active=True,\n                                prod_type__engagement__test__finding__verified=True)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q()
    - Q()
    - Q()
    - Q()
    - Q(tags__name__contains=tag)
    - Q(tags__name__in=tags)
    - Q(tags__name__contains=not_tag)
    - Q(tags__name__in=not_tags)
    - Q(host__icontains=keywords_query)
    - Q(path__icontains=keywords_query)
    - Q(protocol__icontains=keywords_query)
    - Q(query__icontains=keywords_query)
    - Q(fragment__icontains=keywords_query)
    - Q(vulnerability_id__in=vulnerability_ids)
    - Q(status_endpoint__mitigated=True)
    - Q(status_endpoint__false_positive=True)
    - Q(status_endpoint__out_of_scope=True)
    - Q(status_endpoint__risk_accepted=True)
    - Q(engagement__product__prod_type__member=True)
    - Q(engagement__product__member=True)
    - Q(engagement__product__prod_type__authorized_group=True)
    - Q(engagement__product__authorized_group=True)
    - Q(test__engagement__product__prod_type__member=True)
    - Q(test__engagement__product__member=True)
    - Q(test__engagement__product__prod_type__authorized_group=True)
    - Q(test__engagement__product__authorized_group=True)
    - Q(status_finding__mitigated=False)
    - Q(status_finding__mitigated=True)
    - Q(lead__isnull=True)
    - Q(lead__in=leads)
    - Q(product__prod_type__member=True)
    - Q(product__member=True)
    - Q(product__prod_type__authorized_group=True)
    - Q(product__authorized_group=True)
    - Q(group__in=[ptg.group for ptg in product_type_groups])
    - Q(group__in=[gr.group for gr in global_roles])
    - Q(id__in=[ptm.user.id for ptm in product_type_members])
    - Q(id__in=[gm.user.id for gm in group_members])
    - Q(global_role__role__in=roles)
    - Q(is_superuser=True)
    - Q(group__in=[pg.group for pg in product_groups])
    - Q(group__in=[ptg.group for ptg in product_type_groups])
    - Q(group__in=[gr.group for gr in global_roles])
    - Q(id__in=[pm.user.id for pm in product_members])
    - Q(id__in=[ptm.user.id for ptm in product_type_members])
    - Q(id__in=[gm.user.id for gm in group_members])
    - Q(global_role__role__in=roles)
    - Q(is_superuser=True)
    - Q(group__in=[pg.group for pg in product_groups])
    - Q(group__in=[ptg.group for ptg in product_type_groups])
    - Q(id__in=[pm.user.id for pm in product_members])
    - Q(id__in=[ptm.user.id for ptm in product_type_members])
    - Q(id__in=[gm.user.id for gm in group_members])
    - Q(global_role__role__in=roles)
    - Q(is_superuser=True)
    - Q(id__in=removed_alerts)
    - Q(**custom_filter)
    - Q(hash_code__isnull=False)
    - Q(hash_code=finding.hash_code)
    - Q(unique_id_from_tool__isnull=False)
    - Q(unique_id_from_tool=finding.unique_id_from_tool)
    - Q(id__in=eng_findings_cwe)
    - Q(id__in=eng_findings_title)
    - Q(hash_code__isnull=False)
    - Q(hash_code=new_finding.hash_code)
    - Q(unique_id_from_tool__isnull=False)
    - Q(unique_id_from_tool=new_finding.unique_id_from_tool)
    - Q(test__test_type=new_finding.test.test_type)
    - Q(hash_code__isnull=False)
    - Q(hash_code=new_finding.hash_code)
    - Q(unique_id_from_tool__isnull=False)
    - Q(unique_id_from_tool=new_finding.unique_id_from_tool)
    - Q(test__test_type=new_finding.test.test_type)
    - Q(**{f"{field_name}__icontains": term})
    - Q(severity="Info")
    - Q(active=True, verified=True, is_mitigated=False, duplicate=False)
    - Q(active=True, is_mitigated=False, duplicate=False)
  django.db.models.QuerySet:
    - isinstance(endpoints, QuerySet)
    - isinstance(tests,\n                  QuerySet)
    - isinstance(\n        findings, QuerySet,\n    )
    - isinstance(\n        findings, QuerySet,\n    )
    - def filter_findings_by_object(self, findings: QuerySet[Finding]):\n        if product_id := self.get_product_id():\n            return findings.filter(test__engagement__product__id=product_id)\n      ...
    - def filter_findings_by_filter_name(self, findings: QuerySet[Finding]):\n        filter_name = self.get_filter_name()\n        if filter_name == "Open":\n            return findings.filter(finding_help...
    - def filter_findings_by_form(self, request: HttpRequest, findings: QuerySet[Finding]):\n        # Set up the args for the form\n        args = [request.GET, findings]\n        # Set the initial form ar...
    - def get_initial_context(self, request: HttpRequest, groups: QuerySet[Dojo_Group]):\n        filtered_groups = GroupFilter(request.GET, queryset=groups)\n        return {\n            "name": "All Grou...
    - def finding_queries(\n    prod_type: QuerySet[Product_Type],\n    request: HttpRequest,\n) -> dict[str, Any]:\n    # Get the initial list of findings the user is authorized to see\n    all_authorized_...
    - all_authorized_findings: QuerySet[Finding] = get_authorized_findings(\n        Permissions.Finding_View,\n        user=request.user,\n    ).select_related(\n        "reporter",\n        "test",\n     ...
    - filtered_findings: QuerySet[Finding] = queryset_check(findings_filter)
    - def endpoint_queries(\n    prod_type: QuerySet[Product_Type],\n    request: HttpRequest,\n) -> dict[str, Any]:\n    endpoints_query = Endpoint_Status.objects.filter(\n        mitigated=False,\n       ...
    - isinstance(endpoints, QuerySet)
    - TypeVar("MetricsQuerySet", QuerySet[Finding], QuerySet[Endpoint_Status])
    - TypeVar("MetricsQuerySet", QuerySet[Finding], QuerySet[Endpoint_Status])
    - def get_date_range(\n    qs: QuerySet,\n) -> tuple[datetime, datetime]:\n    """\n    Given a queryset of objects, returns a tuple of (earliest date, latest date) from among those objects, based on th...
    - def aggregate_counts_by_period(\n    qs: MetricsQuerySet,\n    period: MetricsPeriod,\n    metrics_type: MetricsType,\n    *,\n    include_closed: bool,\n) -> QuerySet:\n    """\n    Annotates the giv...
    - def findings_by_product(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Groups the given Findings queryset around related product (name/ID)\n\n    :param findings: A queryset...
    - def findings_by_product(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Groups the given Findings queryset around related product (name/ID)\n\n    :param findings: A queryset...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_accepted_in_period_details(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Gathers details for the given queryset, corresponding to metrics information for 'accepted'...
    - def get_accepted_in_period_details(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Gathers details for the given queryset, corresponding to metrics information for 'accepted'...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def findings_queryset(\n    qs: MetricsQuerySet,\n) -> QuerySet[Finding]:\n    """\n    Given a MetricsQuerySet, returns a QuerySet representing all its findings.\n\n    :param qs: MetricsQuerySet (A ...
    - def _get_webhook_endpoints(\n        self,\n        user: Dojo_User | None = None,\n    ) -> QuerySet[Notification_Webhooks]:\n        endpoints = Notification_Webhooks.objects.filter(owner=user)\n   ...
    - def _get_user_to_send_notifications_to(\n        self,\n    ) -> QuerySet[Dojo_User]:\n        """Determine the users we should send notifications to based on product and product type permissions."""\...
    - isinstance(prods,\n                  QuerySet)
    - isinstance(prefetch_prod_types, QuerySet)
    - def _accept_risks(accepted_risks: list[AcceptedRisk], base_findings: QuerySet, owner: User):\n    accepted = []\n    for risk in accepted_risks:\n        vulnerability_ids = Vulnerability_Id.objects \...
    - isinstance(findings, QuerySet)
    - isinstance(query, QuerySet)
  django.apps.apps:
    - clean_hosts_run(apps=apps, change=(request.method == "POST"))
    - clean_hosts_run(apps=apps, change=(request.method == "POST"))
    - apps.get_model(f"dojo.{model_name}", require_ready=True)
    - clean_hosts_run(apps=apps, change=bool(options.get("dry_run")))
    - clean_hosts_run(apps=apps, change=bool(options.get("dry_run")))
    - remove_broken_endpoint_statuses(apps=apps)
    - remove_broken_endpoint_statuses(apps=apps)
    - """\nCreated on Feb 18, 2015\n\n@author: jay7958\n"""\nfrom django.apps import apps\nfrom django.contrib import admin\nfrom django.urls import re_path\n\nfrom dojo.survey import views\n\nif not apps.r...
    - apps.get_models()
  django.http.QueryDict:
    - QueryDict(query)
    - def convert_querydict_to_dict(\n        self,\n        query_dict_data: QueryDict,\n    ) -> dict:\n        """\n        Creates a copy of a query dict, and then converts it\n        to a dict\n      ...
    - QueryDict(query)
    - QueryDict(mutable=True)
    - QueryDict(mutable=True)
  django.forms.widgets.Select:
    - Select(choices=month_choices)
    - Select(choices=year_choices)
    - forms.widgets.Select()
    - forms.widgets.Select()
    - forms.widgets.Select()
    - forms.widgets.Select()
  django.core.validators.URLValidator:
    - URLValidator(schemes=["ssh", "http", "https"])
    - URLValidator(schemes=["ssh", "http", "https"])
  django.contrib.auth.backends.RemoteUserBackend aliased as OriginalRemoteUserBackend:
    - class RemoteUserBackend(OriginalRemoteUserBackend):\n    def configure_user(self, request, user, created=True):\n        changed = False\n\n        if settings.AUTH_REMOTEUSER_EMAIL_HEADER and \\n    ...
  django.utils.html.conditional_escape:
    - esc = conditional_escape
    - esc = conditional_escape
    - conditional_escape
  django.core.mail.get_connection:
    - get_connection()
    - get_connection()
  django.db.models.deletion.RestrictedError:
    - isinstance(exc, RestrictedError)
    - try:\n                de.delete()\n                messages.add_message(\n                    request,\n                    messages.SUCCESS,\n                    "Environment deleted successfully.",\...
    - try:\n                group.delete()\n                messages.add_message(\n                    request,\n                    messages.SUCCESS,\n                    "Group and relationships successfu...
