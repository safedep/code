
django:
  django.db.models:
    - models.IntegerField(default=0, null=True, blank=True,\n                              verbose_name=_("CWE"),\n                              help_text=_("The CWE number associated with this flaw."))
    - models.CharField(max_length=50,\n                           null=True,\n                           blank=False,\n                           verbose_name=_("Vulnerability Id"),\n                       ...
    - models.FloatField(default=None, null=True, blank=True,\n                              verbose_name=_("EPSS Score"),\n                              help_text=_("EPSS score for the CVE. Describes how li...
    - models.FloatField(default=None, null=True, blank=True,\n                              verbose_name=_("EPSS percentile"),\n                              help_text=_("EPSS percentile for the CVE. Descri...
    - models.TextField(validators=[cvssv3_regex],\n                              max_length=117,\n                              null=True,\n                              verbose_name=_("CVSS v3"),\n        ...
    - models.FloatField(null=True,\n                                        blank=True,\n                                        verbose_name=_("CVSSv3 score"),\n                                        help...
    - models.TextField(null=True,\n                           blank=True,\n                           editable=False,\n                           verbose_name=_("URL"),\n                           help_text=_("External reference that provides more information about this flaw."))
    - models.CharField(max_length=200,\n                                verbose_name=_("Severity"),\n                                help_text=_("The severity level of this flaw (Critical, High, Medium, Low, Info)."))
    - models.TextField(verbose_name=_("Description"),\n                                help_text=_("Longer more descriptive information about the flaw."))
    - models.TextField(verbose_name=_("Mitigation"),\n                                null=True,\n                                blank=True,\n                                help_text=_("Text describing how to best fix the flaw."))
    - models.TextField(verbose_name=_("Impact"),\n                                null=True,\n                                blank=True,\n                                help_text=_("Text describing the impact this flaw has on systems, products, enterprise, etc."))
    - models.TextField(null=True,\n                                          blank=True,\n                                          verbose_name=_("Steps to Reproduce"),\n                                   ...
    - models.TextField(null=True,\n                                              blank=True,\n                                              verbose_name=_("Severity Justification"),\n                       ...
    - models.ManyToManyField(Endpoint,\n                                       blank=True,\n                                       verbose_name=_("Endpoints"),\n                                       help_t...
    - models.TextField(null=True,\n                                  blank=True,\n                                  db_column="refs",\n                                  verbose_name=_("References"),\n                                  help_text=_("The external documentation available for this flaw."))
    - models.ForeignKey(Test,\n                             editable=False,\n                             on_delete=models.CASCADE,\n                             verbose_name=_("Test"),\n                             help_text=_("The test that is associated with this flaw."))
    - models.ForeignKey(Test,\n                             editable=False,\n                             on_delete=models.CASCADE,\n                             verbose_name=_("Test"),\n                             help_text=_("The test that is associated with this flaw."))
    - models.BooleanField(default=True,\n                                 verbose_name=_("Active"),\n                                 help_text=_("Denotes if this flaw is active or not."))
    - models.BooleanField(default=False,\n                                   verbose_name=_("Verified"),\n                                   help_text=_("Denotes if this flaw has been manually verified by the tester."))
    - models.BooleanField(default=False,\n                                  verbose_name=_("False Positive"),\n                                  help_text=_("Denotes if this flaw has been deemed a false positive by the tester."))
    - models.BooleanField(default=False,\n                                    verbose_name=_("Duplicate"),\n                                    help_text=_("Denotes if this flaw is a duplicate of other flaws reported."))
    - models.ForeignKey("self",\n                                          editable=False,\n                                          null=True,\n                                          related_name="orig...
    - models.ForeignKey("self",\n                                          editable=False,\n                                          null=True,\n                                          related_name="orig...
    - models.BooleanField(default=False,\n                                       verbose_name=_("Out Of Scope"),\n                                       help_text=_("Denotes if this flaw falls outside the scope of the test and/or engagement."))
    - models.BooleanField(default=False,\n                                       verbose_name=_("Risk Accepted"),\n                                       help_text=_("Denotes if this finding has been marked as an accepted risk."))
    - models.BooleanField(default=False,\n                                       verbose_name=_("Under Review"),\n                                       help_text=_("Denotes is this flaw is currently being reviewed."))
    - models.DateTimeField(editable=False,\n                                            null=True,\n                                            blank=True,\n                                            auto_...
    - models.ForeignKey(Dojo_User,\n                                            null=True,\n                                            blank=True,\n                                            related_name=...
    - models.ForeignKey(Dojo_User,\n                                            null=True,\n                                            blank=True,\n                                            related_name=...
    - models.ManyToManyField(Dojo_User,\n                                       blank=True,\n                                       verbose_name=_("Reviewers"),\n                                       help_text=_("Documents who reviewed the flaw."))
    - models.BooleanField(default=False,\n                                              verbose_name=_("Under Defect Review"),\n                                              help_text=_("Denotes if this finding is under defect review."))
    - models.ForeignKey(Dojo_User,\n                                                   null=True,\n                                                   blank=True,\n                                           ...
    - models.ForeignKey(Dojo_User,\n                                                   null=True,\n                                                   blank=True,\n                                           ...
    - models.BooleanField(default=False,\n                                       verbose_name=_("Is Mitigated"),\n                                       help_text=_("Denotes if this flaw has been fixed."))
    - models.IntegerField(default=0,\n                                    editable=False,\n                                    verbose_name=_("Thread ID"))
    - models.DateTimeField(editable=False,\n                                     null=True,\n                                     blank=True,\n                                     verbose_name=_("Mitigated"...
    - models.ForeignKey(Dojo_User,\n                                     null=True,\n                                     editable=False,\n                                     related_name="mitigated_by",\n...
    - models.ForeignKey(Dojo_User,\n                                     null=True,\n                                     editable=False,\n                                     related_name="mitigated_by",\n...
    - models.ForeignKey(Dojo_User,\n                                 editable=False,\n                                 default=1,\n                                 related_name="reporter",\n                ...
    - models.ForeignKey(Dojo_User,\n                                 editable=False,\n                                 default=1,\n                                 related_name="reporter",\n                ...
    - models.ManyToManyField(Notes,\n                                   blank=True,\n                                   editable=False,\n                                   verbose_name=_("Notes"),\n        ...
    - models.CharField(max_length=4,\n                                          verbose_name=_("Numerical Severity"),\n                                          help_text=_("The numerical representation of the severity (S0, S1, S2, S3, S4)."))
    - models.DateTimeField(null=True,\n                                         editable=False,\n                                         verbose_name=_("Last Reviewed"),\n                                         help_text=_("Provides the date the flaw was last 'touched' by a tester."))
    - models.ForeignKey(Dojo_User,\n                                         null=True,\n                                         editable=False,\n                                         related_name="last...
    - models.ForeignKey(Dojo_User,\n                                         null=True,\n                                         editable=False,\n                                         related_name="last...
    - models.ManyToManyField(FileUpload,\n                                   blank=True,\n                                   editable=False,\n                                   verbose_name=_("Files"),\n                                   help_text=_("Files(s) related to the flaw."))
    - models.TextField(null=True,\n                             blank=True,\n                             editable=False,\n                             verbose_name=_("Parameter"),\n                             help_text=_("Parameter used to trigger the issue (DAST)."))
    - models.TextField(null=True,\n                               blank=True,\n                               editable=False,\n                               verbose_name=_("Payload"),\n                    ...
    - models.CharField(null=True,\n                                 blank=True,\n                                 editable=False,\n                                 max_length=64,\n                          ...
    - models.IntegerField(null=True,\n                               blank=True,\n                               verbose_name=_("Line number"),\n                               help_text=_("Source line number of the attack vector."))
    - models.CharField(null=True,\n                                 blank=True,\n                                 max_length=4000,\n                                 verbose_name=_("File path"),\n                                 help_text=_("Identified file(s) containing the flaw."))
    - models.CharField(null=True,\n                                      blank=True,\n                                      max_length=500,\n                                      verbose_name=_("Component n...
    - models.CharField(null=True,\n                                         blank=True,\n                                         max_length=100,\n                                         verbose_name=_("Co...
    - models.ManyToManyField(Test_Type,\n                                      editable=False,\n                                      verbose_name=_("Found by"),\n                                      help_text=_("The name of the scanner that identified the flaw."))
    - models.BooleanField(default=False,\n                                         verbose_name=_("Static finding (SAST)"),\n                                         help_text=_("Flaw has been detected from a Static Application Security Testing tool (SAST)."))
    - models.BooleanField(default=True,\n                                          verbose_name=_("Dynamic finding (DAST)"),\n                                          help_text=_("Flaw has been detected from a Dynamic Application Security Testing tool (DAST)."))
    - models.DateTimeField(auto_now_add=True,\n                                   null=True,\n                                   verbose_name=_("Created"),\n                                   help_text=_("The date the finding was created inside DefectDojo."))
    - models.IntegerField(null=True,\n                                             blank=True,\n                                             default=None,\n                                             edita...
    - models.ForeignKey(Sonarqube_Issue,\n                                        null=True,\n                                        blank=True,\n                                        help_text=_("The So...
    - models.ForeignKey(Sonarqube_Issue,\n                                        null=True,\n                                        blank=True,\n                                        help_text=_("The So...
    - models.CharField(null=True,\n                                           blank=True,\n                                           max_length=500,\n                                           verbose_name...
    - models.CharField(null=True,\n                                         blank=True,\n                                         max_length=500,\n                                         verbose_name=_("Vu...
    - models.CharField(null=True,\n                                          blank=True,\n                                          max_length=500,\n                                          verbose_name=_(...
    - models.CharField(null=True,\n                                        blank=True,\n                                        max_length=500,\n                                        verbose_name=_("SAST ...
    - models.IntegerField(null=True,\n                                           blank=True,\n                                           verbose_name=_("SAST Source Line number"),\n                                           help_text=_("Source line number of the attack vector."))
    - models.CharField(null=True,\n                                             blank=True,\n                                             max_length=4000,\n                                             verbo...
    - models.IntegerField(null=True,\n                                        blank=True,\n                                        verbose_name=_("Number of occurences"),\n                                  ...
    - models.DateField(null=True,\n                                         blank=True,\n                                         verbose_name=_("Publish date"),\n                                         help_text=_("Date when this vulnerability was made publicly available."))
    - models.CharField(null=True,\n                               blank=True,\n                               max_length=200,\n                               verbose_name=_("Service"),\n                    ...
    - models.DateField(null=True,\n                                                editable=True,\n                                                verbose_name=_("Planned Remediation Date"),\n                                                help_text=_("The date the flaw is expected to be remediated."))
    - models.CharField(null=True,\n                                        blank=True,\n                                        max_length=99,\n                                        verbose_name=_("Planne...
    - models.CharField(null=True,\n                                blank=True,\n                                max_length=99,\n                                verbose_name=_("Effort for fixing"),\n        ...
    - models.Index(fields=["test", "active", "verified"])
    - models.Index(fields=["test", "is_mitigated"])
    - models.Index(fields=["test", "duplicate"])
    - models.Index(fields=["test", "out_of_scope"])
    - models.Index(fields=["test", "false_p"])
    - models.Index(fields=["test", "unique_id_from_tool", "duplicate"])
    - models.Index(fields=["test", "hash_code", "duplicate"])
    - models.Index(fields=["test", "component_name"])
    - models.Index(fields=["cve"])
    - models.Index(fields=["epss_score"])
    - models.Index(fields=["epss_percentile"])
    - models.Index(fields=["cwe"])
    - models.Index(fields=["out_of_scope"])
    - models.Index(fields=["false_p"])
    - models.Index(fields=["verified"])
    - models.Index(fields=["mitigated"])
    - models.Index(fields=["active"])
    - models.Index(fields=["numerical_severity"])
    - models.Index(fields=["date"])
    - models.Index(fields=["title"])
    - models.Index(fields=["hash_code"])
    - models.Index(fields=["unique_id_from_tool"])
    - models.Index(fields=["line"])
    - models.Index(fields=["component_name"])
    - models.Index(fields=["duplicate"])
    - models.Index(fields=["is_mitigated"])
    - models.Index(fields=["duplicate_finding", "id"])
    - class Vulnerability_Id(models.Model):\n    finding = models.ForeignKey(Finding, editable=False, on_delete=models.CASCADE)\n    vulnerability_id = models.TextField(max_length=50, blank=False, null=Fals...
    - models.ForeignKey(Finding, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Finding, editable=False, on_delete=models.CASCADE)
    - models.TextField(max_length=50, blank=False, null=False)
    - class Stub_Finding(models.Model):\n    title = models.TextField(max_length=1000, blank=False, null=False)\n    date = models.DateField(default=get_current_date, blank=False, null=False)\n    severity ...
    - models.TextField(max_length=1000, blank=False, null=False)
    - models.DateField(default=get_current_date, blank=False, null=False)
    - models.CharField(max_length=200, blank=True, null=True)
    - models.TextField(blank=True, null=True)
    - models.ForeignKey(Test, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Test, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, editable=False, default=1, on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, editable=False, default=1, on_delete=models.RESTRICT)
    - models.CharField(max_length=255, blank=False, null=False)
    - models.ForeignKey(Test, on_delete=models.CASCADE)
    - models.ForeignKey(Test, on_delete=models.CASCADE)
    - models.ManyToManyField(Finding)
    - models.ForeignKey(Dojo_User, on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, on_delete=models.RESTRICT)
    - class Finding_Template(models.Model):\n    title = models.TextField(max_length=1000)\n    cwe = models.IntegerField(default=None, null=True, blank=True)\n    cve = models.CharField(max_length=50,\n   ...
    - models.TextField(max_length=1000)
    - models.IntegerField(default=None, null=True, blank=True)
    - models.CharField(max_length=50,\n                           null=True,\n                           blank=False,\n                           verbose_name="Vulnerability Id",\n                          ...
    - models.TextField(validators=[cvssv3_regex], max_length=117, null=True)
    - models.CharField(max_length=200, null=True, blank=True)
    - models.TextField(null=True, blank=True)
    - models.TextField(null=True, blank=True)
    - models.TextField(null=True, blank=True)
