
django:
  django.urls.reverse:
    - reverse("view_product_type", args=(ptid, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("view_product_type", args=(member.product_type.id, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("view_product_type", args=(member.product_type.id, ))
    - reverse("view_product_type", args=(member.product_type.id, ))
    - reverse("view_user", args=(member.user.id, ))
    - reverse("product_type")
    - reverse("view_product_type", args=(member.product_type.id, ))
    - reverse("view_product_type", args=(ptid,))
    - reverse("view_group", args=(group.group.id,))
    - reverse("view_product_type", args=(group.product_type.id,))
    - reverse("view_group", args=(group.group.id, ))
    - reverse("view_product_type", args=(group.product_type.id, ))
    - reverse("regulations")
    - reverse("regulations")
    - reverse("regulations")
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("view_risk_acceptance", args=(risk_acceptance.engagement.id, risk_acceptance.id))
    - reverse("sla_config")
    - reverse("sla_config")
    - reverse("sla_config")
    - reverse("sla_config")
    - reverse("view_engagement", args=(engagement.id, ))
    - reverse("view_engagement", args=(engagement.id, ))
    - reverse("view_engagement", args=(engagement.id,))
    - reverse("answer_questionnaire", args=(eid, survey.id))
    - reverse("view_engagement", args=(eid,))
    - reverse("edit_questionnaire", args=(survey.id,))
    - reverse("edit_questionnaire_questions", args=(survey.id,))
    - reverse("questionnaire")
    - reverse("edit_questionnaire_questions", args=(survey.id,))
    - reverse("questionnaire")
    - reverse("questionnaire")
    - reverse("questionnaire")
    - reverse("questions")
    - reverse("questions")
    - reverse("questions")
    - reverse("dashboard")
    - reverse("questionnaire")
    - reverse("survey")
    - reverse("questionnaire")
    - reverse("dashboard")
    - reverse("edit_engagement", args=(engagement.id, ))
    - reverse("view_engagement", args=(engagement.id,))
    - reverse("view_engagement", args=(engagement.id,))
    - reverse("view_engagement", args=(eng.id,))
    - reverse("view_engagement", args=(eng.id,))
    - reverse("download_finding_pic", args=[token.token])
    - reverse("view_risk_acceptance", args=(finding.test.engagement.id, ra.id))
    - reverse("defect_finding_review", args=(finding.id, ))
    - reverse("view_finding", args=(finding.duplicate_finding.id,))
    - reverse("view_engagement", args=(instance.engagement.id, ))
    - reverse("view_test", args=(test.id,))
    - reverse("view_test", args=(test_id,))
    - reverse("view_engagement", args=(test.engagement.id,))
    - reverse("view_engagement", args=(eng.id,))
    - reverse("view_test", args=(test_copy.id,))
    - reverse("view_engagement", args=(engagement.id, ))
    - reverse("view_test", args=(test.id,))
    - reverse("view_finding", args=(finding.id,))
    - reverse("view_test", args=(test.id,))
    - reverse("add_findings", args=(test.id,))
    - reverse("view_test", args=(test.id,))
    - reverse("view_test", args=(context.get("test").id, ))
    - reverse(\n            "re_import_scan_results",\n            args=(context.get("test").id, ),\n        )
    - reverse("test_type")
    - reverse("test_type")
    - reverse("tool_config")
    - reverse("tool_config")
    - reverse("all_tool_product", args=(pid, ))
    - reverse("all_tool_product", args=(pid, ))
    - reverse("all_tool_product", args=(pid, ))
    - reverse("tool_type")
    - reverse("tool_type")
    - reverse("social:begin", args=[social_auth])
    - reverse("social:begin", args=[social_auth])
    - reverse("login")
    - reverse("view_profile")
    - reverse("view_user", args=(user.id,))
    - reverse("edit_user", args=(user.id,))
    - reverse("users")
    - reverse("view_user", args=(uid, ))
    - reverse("view_user", args=(uid, ))
    - reverse("view_user", args=(uid,))
    - reverse("view_user", args=(uid,))
    - reverse("home")
    - reverse("view_finding", args=(n.finding.id,))
    - reverse(obj_vars[0], args=(oid, ))
  django.http.FileResponse:
    - FileResponse(\n            file_handle,\n            content_type=f"{mimetypes.guess_type(file_path)}",\n            status=status.HTTP_200_OK,\n        )
    - def generate_file_response(file_object: FileUpload) -> FileResponse:\n    """\n    Serve an uploaded file in a uniformed way.\n\n    This function assumes all permissions have previously validated/ver...
    - def generate_file_response_from_file_path(\n    file_path: str, file_name: str | None = None, file_size: int | None = None,\n) -> FileResponse:\n    """Serve an local file in a uniformed way."""\n    ...
    - FileResponse(\n        open(file_path, "rb"),\n        filename=full_file_name,\n        content_type=f"{mimetypes.guess_type(file_path)}",\n    )
  django.db.models.functions.Coalesce:
    - Coalesce("mitigated", Now())
  django.contrib.auth.signals.user_logged_in:
    - receiver(user_logged_in)
  django.shortcuts.render:
    - render(\n        request, "dojo/announcement.html", {"form": form, "remove": remove},\n    )
    - render(request, "dojo/dismiss_announcement.html")
    - render(request, "dojo/dismiss_announcement.html")
    - render(\n        request,\n        "dojo/components.html",\n        {\n            "filter": comp_filter,\n            "result": result,\n            "component_words": sorted(set(component_words)),\n...
    - render(request, "dojo/new_cred.html", {"tform": tform})
    - render(request, "dojo/view_cred_prod.html", {"product_tab": product_tab, "creds": creds, "prod": prod})
    - render(request, "dojo/edit_cred.html", {\n        "tform": tform,\n    })
    - render(request, "dojo/view_cred_details.html", {\n        "cred": cred,\n        "form": form,\n        "notes": notes,\n        "cred_products": cred_products,\n        "person": request.user.username,\n    })
    - render(request, "dojo/view_cred.html", {\n        "confs": confs,\n    })
    - render(\n        request, "dojo/view_cred_all_details.html", {\n            "cred": cred,\n            "form": form,\n            "notes": notes,\n            "cred_type": cred_type,\n            "edi...
    - render(\n        request, "dojo/view_cred_all_details.html", {\n            "cred": cred,\n            "form": form,\n            "notes": notes,\n            "cred_type": cred_type,\n            "edi...
    - render(\n        request, "dojo/view_cred_all_details.html", {\n            "cred": cred,\n            "form": form,\n            "notes": notes,\n            "cred_type": cred_type,\n            "edi...
    - render(\n        request, "dojo/view_cred_all_details.html", {\n            "cred": cred,\n            "form": form,\n            "notes": notes,\n            "cred_type": cred_type,\n            "edi...
    - render(request, "dojo/edit_cred_all.html", {\n        "tform": tform,\n        "product_tab": product_tab,\n        "cred_type": "Product",\n    })
    - render(request, "dojo/edit_cred_all.html", {\n        "tform": tform,\n        "cred_type": "Engagement",\n    })
    - render(request, "dojo/new_cred_product.html", {\n        "tform": tform,\n        "pid": pid,\n        "product_tab": product_tab,\n    })
    - render(\n        request, "dojo/new_cred_mapping.html", {\n            "tform": tform,\n            "eid": eid,\n            "formlink": reverse("new_cred_product_engagement", args=(eid, )),\n        })
    - render(\n        request, "dojo/new_cred_mapping.html", {\n            "tform": tform,\n            "eid": tid,\n            "formlink": reverse("new_cred_engagement_test", args=(tid, )),\n        })
    - render(\n        request, "dojo/new_cred_mapping.html", {\n            "tform": tform,\n            "eid": fid,\n            "formlink": reverse("new_cred_finding", args=(fid, )),\n        })
    - render(request, "dojo/delete_cred_all.html", {\n        "tform": tform,\n        "product_tab": product_tab,\n    })
    - render(request, "dojo/dev_env.html", {\n        "name": "Environment",\n        "metric": False,\n        "user": request.user,\n        "devs": dev_page,\n        "dts": devs,\n        "name_words": name_words})
    - render(request, "dojo/new_dev_env.html", {\n        "name": "Add Environment",\n        "metric": False,\n        "user": request.user,\n        "form": form,\n    })
    - render(request, "dojo/edit_dev_env.html", {\n        "name": "Edit Environment",\n        "metric": False,\n        "user": request.user,\n        "form1": form1,\n        "de": de})
    - render(\n        request, "dojo/endpoints.html", {\n            "product_tab": product_tab,\n            "endpoints": paged_endpoints,\n            "filtered": endpoints,\n            "name": view_name,\n            "host_view": host_view,\n        })
    - render(request,\n                  "dojo/view_endpoint.html",\n                  {"endpoint": endpoint,\n                   "product_tab": product_tab,\n                   "endpoints": endpoints,\n   ...
    - render(request,\n                  "dojo/edit_endpoint.html",\n                  {"endpoint": endpoint,\n                   "product_tab": product_tab,\n                   "form": form,\n                   })
    - render(request, "dojo/delete_endpoint.html",\n                  {"endpoint": endpoint,\n                   "product_tab": product_tab,\n                   "form": form,\n                   "rels": rels,\n                   })
    - render(request, template, {\n        "product_tab": product_tab,\n        "name": "Add Endpoint",\n        "form": form})
    - render(request,\n                  "dojo/add_endpoint.html",\n                  {"name": "Add Endpoint",\n                   "form": form,\n                   })
    - render(request,\n                  "dojo/add_endpoint_meta_data.html",\n                  {"form": form,\n                   "product_tab": product_tab,\n                   "endpoint": endpoint,\n                   })
    - render(request,\n                  "dojo/edit_endpoint_meta_data.html",\n                  {"endpoint": endpoint,\n                   "product_tab": product_tab,\n                   })
    - render(\n        request, "dojo/migrate_endpoints.html", {\n            "product_tab": None,\n            "name": view_name,\n            "html_log": html_log,\n        })
    - render(request, "dojo/endpoint_meta_importer.html", {\n        "product_tab": product_tab,\n        "form": form,\n    })
    - render(\n        request, "dojo/calendar.html", {\n            "caltype": "engagements",\n            "leads": request.GET.getlist("lead", ""),\n            "engagements": engagements,\n            "users": get_authorized_users(Permissions.Engagement_View),\n        })
    - render(\n        request, "dojo/engagement.html", {\n            "engagements": engs,\n            "engagement_test_counts": get_test_counts(filtered_engagements.qs),\n            "filter_form": filte...
    - render(\n        request, "dojo/engagements_all.html", {\n            "products": prods,\n            "filter_form": filtered.form,\n            "name_words": sorted(set(name_words)),\n            "en...
    - render(request, "dojo/new_eng.html", {\n        "product_tab": product_tab,\n        "title": title,\n        "form": form,\n        "edit": True,\n        "jira_epic_form": jira_epic_form,\n        "jira_project_form": jira_project_form,\n        "engagement": engagement,\n    })
    - render(request, "dojo/delete_engagement.html", {\n        "product_tab": product_tab,\n        "engagement": engagement,\n        "form": form,\n        "rels": rels,\n    })
    - render(request, "dojo/copy_object.html", {\n        "source": engagement,\n        "source_label": "Engagement",\n        "destination_label": "Product",\n        "product_tab": product_tab,\n        "form": form,\n    })
    - render(\n            request, self.get_template(), {\n                "eng": eng,\n                "product_tab": product_tab,\n                "system_settings": system_settings,\n                "te...
    - render(\n            request, self.get_template(), {\n                "eng": eng,\n                "product_tab": product_tab,\n                "system_settings": system_settings,\n                "te...
    - render(request, "dojo/add_tests.html", {\n        "product_tab": product_tab,\n        "form": form,\n        "cred_form": cred_form,\n        "eid": eid,\n        "eng": eng,\n    })
    - render(request, self.get_template(), context)
    - render(request, "dojo/checklist.html", {\n        "form": form,\n        "product_tab": product_tab,\n        "eid": eng.id,\n        "findings": findings,\n    })
    - render(request, "dojo/add_risk_acceptance.html", {\n                  "eng": eng,\n                  "product_tab": product_tab,\n                  "form": form,\n                  })
    - render(\n        request, "dojo/view_risk_acceptance.html", {\n            "risk_acceptance": risk_acceptance,\n            "engagement": eng,\n            "product_tab": product_tab,\n            "ac...
    - render(request, "dojo/up_threat.html", {\n        "form": form,\n        "product_tab": product_tab,\n        "eng": eng,\n    })
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(\n        request,\n        "dojo/close_finding.html",\n        {\n            "finding": finding,\n            "product_tab": product_tab,\n            "active_tab": "findings",\n            "...
    - render(\n        request,\n        "dojo/defect_finding_review.html",\n        {\n            "finding": finding,\n            "product_tab": product_tab,\n            "user": request.user,\n            "form": form,\n        },\n    )
    - render(\n        request,\n        "dojo/copy_object.html",\n        {\n            "source": finding,\n            "source_label": "Finding",\n            "destination_label": "Test",\n            "product_tab": product_tab,\n            "form": form,\n        },\n    )
    - render(\n        request,\n        "dojo/remediation_date.html",\n        {"finding": finding, "product_tab": product_tab, "user": user, "form": form},\n    )
    - render(\n        request,\n        "dojo/review_finding.html",\n        {"finding": finding, "product_tab": product_tab, "user": user, "form": form, "enable_table_filtering": get_system_setting("enable_ui_table_based_searching")},\n    )
    - render(\n        request,\n        "dojo/clear_finding_review.html",\n        {"finding": finding, "product_tab": product_tab, "user": user, "form": form},\n    )
    - render(\n        request,\n        "dojo/templates.html",\n        {\n            "templates": paged_templates,\n            "product_tab": product_tab,\n            "filtered": templates,\n          ...
    - render(\n        request,\n        "dojo/apply_finding_template.html",\n        {\n            "finding": finding,\n            "product_tab": product_tab,\n            "template": template,\n        ...
    - render(\n                request,\n                "dojo/apply_finding_template.html",\n                {\n                    "finding": finding,\n                    "product_tab": product_tab,\n   ...
    - render(\n        request,\n        "dojo/promote_to_finding.html",\n        {\n            "form": form,\n            "product_tab": product_tab,\n            "test": test,\n            "stub_finding": finding,\n            "form_error": form_error,\n            "jform": jform,\n        },\n    )
    - render(\n        request,\n        "dojo/templates.html",\n        {\n            "templates": paged_templates,\n            "filtered": templates,\n            "title_words": title_words,\n        },\n    )
    - render(\n        request, "dojo/add_template.html", {"form": form, "name": "Add Template"},\n    )
    - render(\n        request,\n        "dojo/add_template.html",\n        {\n            "form": form,\n            "count": count,\n            "name": "Edit Template",\n            "template": template,\n        },\n    )
    - render(\n        request,\n        "dojo/merge_findings.html",\n        {\n            "form": form,\n            "name": "Merge Findings",\n            "finding": finding,\n            "product_tab":...
    - render(request, "dojo/new_github.html",\n                {"gform": gform})
    - render(request,\n                  "dojo/github.html",\n                  {"confs": confs,\n                   })
    - render(request, "dojo/delete_github.html",\n                  {"inst": github_instance,\n                   "form": form,\n                   "rels": rels,\n                   "deletable_objects": rels,\n                   })
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), context)
    - render(request, "dojo/new_group_member.html", {\n        "group": group,\n        "form": groupform,\n    })
    - render(request, "dojo/edit_group_member.html", {\n        "memberid": mid,\n        "form": memberform,\n    })
    - render(request, "dojo/delete_group_member.html", {\n        "memberid": mid,\n        "form": memberform,\n    })
    - render(request, "dojo/new_product_group_group.html", {\n        "group": group,\n        "form": group_form,\n    })
    - render(request, "dojo/new_product_type_group_group.html", {\n        "group": group,\n        "form": group_form,\n    })
    - render(request, "dojo/dashboard.html", {\n        "engagement_count": engagement_count,\n        "finding_count": finding_count,\n        "mitigated_count": mitigated_count,\n        "accepted_count":...
    - render(request, "dojo/support.html", {})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_fallback_template(), {"jform": fallback_form})
    - render(request, self.get_fallback_template(), {"jform": fallback_form})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), {"jform": jform})
    - render(request, self.get_template(), context)
    - render(request, self.get_template(), {\n            "inst": jira_instance,\n            "form": form,\n            "rels": rels,\n            "deletable_objects": rels,\n        })
    - render(request, self.get_template(), {\n            "inst": jira_instance,\n            "form": form,\n            "rels": rels,\n            "deletable_objects": rels,\n        })
