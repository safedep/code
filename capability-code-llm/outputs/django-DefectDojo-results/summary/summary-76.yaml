
django:
  django.forms:
    - forms.Textarea(attrs={})
    - forms.HiddenInput()
    - class DojoMetaDataForm(forms.ModelForm):\n    value = forms.CharField(widget=forms.Textarea(attrs={}),\n                            required=True)\n\n    def full_clean(self):\n        super().full_cl...
    - forms.CharField(widget=forms.Textarea(attrs={}),\n                            required=True)
    - forms.Textarea(attrs={})
    - class ImportScanForm(forms.Form):\n    active_verified_choices = [("not_specified", "Not specified (default)"),\n                               ("force_to_true", "Force to True"),\n                   ...
    - forms.DateTimeField(\n        required=False,\n        label="Scan Completion Date",\n        help_text="Scan completion date will be used on all findings.",\n        widget=forms.TextInput(attrs={"class": "datepicker"}))
    - forms.TextInput(attrs={"class": "datepicker"})
    - forms.ChoiceField(help_text="Minimum severity level to be imported",\n                                         required=True,\n                                         choices=SEVERITY_CHOICES)
    - forms.ChoiceField(required=True, choices=active_verified_choices,\n                               help_text="Force findings to be active/inactive, or default to the original tool")
    - forms.ChoiceField(required=True, choices=active_verified_choices,\n                               help_text="Force findings to be verified/not verified, or default to the original tool")
    - forms.ChoiceField(required=True, choices=get_choices_sorted)
    - forms.ModelChoiceField(\n        queryset=Development_Environment.objects.all().order_by("name"))
    - forms.ModelMultipleChoiceField(Endpoint.objects, required=False, label="Systems / Endpoints")
    - forms.CharField(max_length=5000, required=False, label="Endpoints to add",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n   ...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - forms.CharField(max_length=100, required=False, help_text="Version that was scanned.")
    - forms.CharField(max_length=100, required=False, help_text="Branch or Tag that was scanned.")
    - forms.CharField(max_length=100, required=False, help_text="Commit that was scanned.")
    - forms.CharField(max_length=100, required=False, help_text="ID of the build that was scanned.")
    - forms.ModelChoiceField(Product_API_Scan_Configuration.objects, required=False, label="API Scan Configuration")
    - forms.CharField(max_length=200, required=False,\n        help_text="A service is a self-contained piece of functionality within a Product. "\n                  "This is an optional field which is used in deduplication and closing of old findings when set.")
    - forms.URLField(max_length=600, required=False, help_text="Resource link to source code")
    - forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".xml, .csv, .nessus, .json, .jsonl, .html, .js, .zip, .xlsx, .txt, .sarif"}),\n        label="Choose report file",\n        allow_empty_file=True,\n        required=False)
    - forms.widgets.FileInput(\n        attrs={"accept": ".xml, .csv, .nessus, .json, .jsonl, .html, .js, .zip, .xlsx, .txt, .sarif"})
    - forms.BooleanField(help_text="Old findings no longer present in the new report get closed as mitigated when importing. "\n                                                        "If service has been s...
    - forms.BooleanField(help_text="Old findings no longer present in the new report get closed as mitigated when importing. "\n                                                        "If service has been s...
    - forms.BooleanField(\n        help_text="If set to True, the tags will be applied to the findings",\n        label="Apply Tags to Findings",\n        required=False,\n        initial=False,\n    )
    - forms.BooleanField(\n        help_text="If set to True, the tags will be applied to the endpoints",\n        label="Apply Tags to Endpoints",\n        required=False,\n        initial=False,\n    )
    - forms.ChoiceField(required=False, choices=Finding_Group.GROUP_BY_OPTIONS, help_text="Choose an option to automatically group new findings by the chosen option.")
    - forms.BooleanField(help_text="If unchecked, finding groups will only be created when there is more than one grouped finding", required=False, initial=True)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - forms.ValidationError(msg)
    - class ReImportScanForm(forms.Form):\n    active_verified_choices = [("not_specified", "Not specified (default)"),\n                               ("force_to_true", "Force to True"),\n                 ...
    - forms.DateTimeField(\n        required=False,\n        label="Scan Completion Date",\n        help_text="Scan completion date will be used on all findings.",\n        widget=forms.TextInput(attrs={"class": "datepicker"}))
    - forms.TextInput(attrs={"class": "datepicker"})
    - forms.ChoiceField(help_text="Minimum severity level to be imported",\n                                         required=True,\n                                         choices=SEVERITY_CHOICES[0:4])
    - forms.ChoiceField(required=True, choices=active_verified_choices,\n                               help_text="Force findings to be active/inactive, or default to the original tool")
    - forms.ChoiceField(required=True, choices=active_verified_choices,\n                             help_text="Force findings to be verified/not verified, or default to the original tool")
    - forms.BooleanField(help_text=help_do_not_reactivate, required=False)
    - forms.ModelMultipleChoiceField(Endpoint.objects, required=False, label="Systems / Endpoints")
    - forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".xml, .csv, .nessus, .json, .jsonl, .html, .js, .zip, .xlsx, .txt, .sarif"}),\n        label="Choose report file",\n        allow_empty_file=True,\n        required=False)
    - forms.widgets.FileInput(\n        attrs={"accept": ".xml, .csv, .nessus, .json, .jsonl, .html, .js, .zip, .xlsx, .txt, .sarif"})
    - forms.BooleanField(help_text="Select if old findings no longer present in the report get closed as mitigated when importing.",\n                                            required=False, initial=True)
    - forms.CharField(max_length=100, required=False, help_text="Version that will be set on existing Test object. Leave empty to leave existing value in place.")
    - forms.CharField(max_length=100, required=False, help_text="Branch or Tag that was scanned.")
    - forms.CharField(max_length=100, required=False, help_text="Commit that was scanned.")
    - forms.CharField(max_length=100, required=False, help_text="ID of the build that was scanned.")
    - forms.ModelChoiceField(Product_API_Scan_Configuration.objects, required=False, label="API Scan Configuration")
    - forms.CharField(max_length=200, required=False, help_text="A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.")
    - forms.URLField(max_length=600, required=False, help_text="Resource link to source code")
    - forms.BooleanField(\n        help_text="If set to True, the tags will be applied to the findings",\n        label="Apply Tags to Findings",\n        required=False,\n        initial=False,\n    )
    - forms.BooleanField(\n        help_text="If set to True, the tags will be applied to the endpoints",\n        label="Apply Tags to Endpoints",\n        required=False,\n        initial=False,\n    )
    - forms.ChoiceField(required=False, choices=Finding_Group.GROUP_BY_OPTIONS, help_text="Choose an option to automatically group new findings by the chosen option")
    - forms.BooleanField(help_text="If unchecked, finding groups will only be created when there is more than one grouped finding", required=False, initial=True)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - class ImportEndpointMetaForm(forms.Form):\n    file = forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".csv"}),\n        label="Choose meta file",\n        required=True)  # ...
    - forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".csv"}),\n        label="Choose meta file",\n        required=True)
    - forms.widgets.FileInput(\n        attrs={"accept": ".csv"})
    - forms.BooleanField(\n        label="Create nonexisting Endpoint",\n        initial=True,\n        required=False,\n        help_text="Create endpoints that do not already exist")
    - forms.BooleanField(\n        label="Add Tags",\n        initial=True,\n        required=False,\n        help_text="Add meta from file as tags in the format key:value")
    - forms.BooleanField(\n        label="Add Meta",\n        initial=False,\n        required=False,\n        help_text="Add data from file as Metadata. Metadata is used for displaying custom fields")
    - class DoneForm(forms.Form):\n    done = forms.BooleanField()
    - forms.BooleanField()
    - class UploadThreatForm(forms.Form):\n    file = forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".jpg,.png,.pdf"}),\n        label="Select Threat Model")\n\n    def clean(sel...
    - forms.FileField(widget=forms.widgets.FileInput(\n        attrs={"accept": ".jpg,.png,.pdf"}),\n        label="Select Threat Model")
    - forms.widgets.FileInput(\n        attrs={"accept": ".jpg,.png,.pdf"})
    - class MergeFindings(forms.ModelForm):\n    FINDING_ACTION = (("", "Select an Action"), ("inactive", "Inactive"), ("delete", "Delete"))\n\n    append_description = forms.BooleanField(label="Append Desc...
    - forms.BooleanField(label="Append Description", initial=True, required=False,\n                                            help_text="Description in all findings will be appended into the merged finding.")
    - forms.BooleanField(label="Add Endpoints", initial=True, required=False,\n                                           help_text="Endpoints in all findings will be merged into the merged finding.")
    - forms.BooleanField(label="Dynamic Scanner Raw Requests", initial=True, required=False,\n                                           help_text="Dynamic scanner raw requests in all findings will be merged into the merged finding.")
    - forms.BooleanField(label="Add Tags", initial=True, required=False,\n                                           help_text="Tags in all findings will be merged into the merged finding.")
    - forms.BooleanField(label="Tag Merged Finding", initial=True, required=False,\n                                           help_text="Creates a tag titled 'merged' for the finding that will be merged. I...
    - forms.BooleanField(label="Append Reference", initial=True, required=False,\n                                            help_text="Reference in all findings will be appended into the merged finding.")
    - forms.ChoiceField(\n        required=True,\n        choices=FINDING_ACTION,\n        label="Finding Action",\n        help_text="The action to take on the merged finding. Set the findings to inactive or delete the findings.")
    - forms.ModelChoiceField(\n            queryset=findings, initial=0, required="False", label="Finding to Merge Into", help_text="Findings selected below will be merged into this finding.")
    - forms.ModelMultipleChoiceField(\n            queryset=findings, required=True, label="Findings to Merge",\n            widget=forms.widgets.SelectMultiple(attrs={"size": 10}),\n            help_text=("Select the findings to merge."))
    - forms.widgets.SelectMultiple(attrs={"size": 10})
    - class EditRiskAcceptanceForm(forms.ModelForm):\n    # unfortunately django forces us to repeat many things here. choices, default, required etc.\n    recommendation = forms.ChoiceField(choices=Risk_Ac...
    - forms.ChoiceField(choices=Risk_Acceptance.TREATMENT_CHOICES, initial=Risk_Acceptance.TREATMENT_ACCEPT, widget=forms.RadioSelect, label="Security Recommendation")
    - forms.ChoiceField(choices=Risk_Acceptance.TREATMENT_CHOICES, initial=Risk_Acceptance.TREATMENT_ACCEPT, widget=forms.RadioSelect, label="Security Recommendation")
    - forms.ChoiceField(choices=Risk_Acceptance.TREATMENT_CHOICES, initial=Risk_Acceptance.TREATMENT_ACCEPT, widget=forms.RadioSelect)
    - forms.ChoiceField(choices=Risk_Acceptance.TREATMENT_CHOICES, initial=Risk_Acceptance.TREATMENT_ACCEPT, widget=forms.RadioSelect)
    - forms.FileField(label="Proof", required=False, widget=forms.widgets.FileInput(attrs={"accept": ".jpg,.png,.pdf"}))
    - forms.widgets.FileInput(attrs={"accept": ".jpg,.png,.pdf"})
    - forms.DateTimeField(required=False, widget=forms.TextInput(attrs={"class": "datepicker"}))
    - forms.TextInput(attrs={"class": "datepicker"})
    - forms.ModelMultipleChoiceField(\n        queryset=Finding.objects.none(), required=True,\n        widget=forms.widgets.SelectMultiple(attrs={"size": 10}),\n        help_text=("Active, verified findings listed, please select to add findings."))
    - forms.widgets.SelectMultiple(attrs={"size": 10})
    - forms.CharField(required=False, max_length=2400,\n                            widget=forms.Textarea,\n                            label="Notes")
    - forms.CharField(required=False, max_length=2400,\n                            widget=forms.Textarea,\n                            label="Notes")
    - class BaseManageFileFormSet(forms.BaseModelFormSet):\n    def clean(self):\n        """Validate the IP/Mask combo is in CIDR format"""\n        if any(self.errors):\n            # Don't bother validat...
    - """Validate the IP/Mask combo is in CIDR format"""\n        if any(self.errors):\n            # Don't bother validating the formset unless each form is valid on its own\n            return\n        fo...
    - class ReplaceRiskAcceptanceProofForm(forms.ModelForm):\n    path = forms.FileField(label="Proof", required=True, widget=forms.widgets.FileInput(attrs={"accept": ".jpg,.png,.pdf"}))\n\n    class Meta:\n        model = Risk_Acceptance\n        fields = ["path"]
    - forms.FileField(label="Proof", required=True, widget=forms.widgets.FileInput(attrs={"accept": ".jpg,.png,.pdf"}))
    - forms.widgets.FileInput(attrs={"accept": ".jpg,.png,.pdf"})
    - class AddFindingsRiskAcceptanceForm(forms.ModelForm):\n\n    accepted_findings = forms.ModelMultipleChoiceField(\n        queryset=Finding.objects.none(),\n        required=True,\n        label="",\n ...
    - forms.ModelMultipleChoiceField(\n        queryset=Finding.objects.none(),\n        required=True,\n        label="",\n        widget=TableCheckboxWidget(attrs={"size": 25}),\n    )
    - class CheckForm(forms.ModelForm):\n    options = (("Pass", "Pass"), ("Fail", "Fail"), ("N/A", "N/A"))\n    session_management = forms.ChoiceField(choices=options)\n    encryption_crypto = forms.Choice...
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - forms.ChoiceField(choices=options)
    - class EngForm(forms.ModelForm):\n    name = forms.CharField(\n        max_length=300, required=False,\n        help_text="Add a descriptive name to identify this engagement. "\n                  + "Wi...
    - forms.CharField(\n        max_length=300, required=False,\n        help_text="Add a descriptive name to identify this engagement. "\n                  + "Without a name the target start date will be set.")
    - forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=False, help_text="Description of the engagement and details regarding the engagement.")
    - forms.Textarea(attrs={})
    - forms.ModelChoiceField(label="Product",\n                                       queryset=Product.objects.none(),\n                                       required=True)
    - forms.DateField(widget=forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.DateField(widget=forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.ModelChoiceField(\n        queryset=None,\n        required=True, label="Testing Lead")
    - forms.URLField(required=False, label="Test Strategy URL")
    - forms.ModelChoiceField(help_text="Settings and notes for performing this engagement.", required=False, queryset=Engagement_Presets.objects.filter(product=product))
    - class DeleteEngagementForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Engagement\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class TestForm(forms.ModelForm):\n    title = forms.CharField(max_length=255, required=False)\n    description = forms.CharField(widget=forms.Textarea(attrs={"rows": "3"}), required=False)\n    test_t...
    - forms.CharField(max_length=255, required=False)
    - forms.CharField(widget=forms.Textarea(attrs={"rows": "3"}), required=False)
    - forms.Textarea(attrs={"rows": "3"})
    - forms.ModelChoiceField(queryset=Test_Type.objects.all().order_by("name"))
    - forms.ModelChoiceField(\n        queryset=Development_Environment.objects.all().order_by("name"))
    - forms.DateTimeField(widget=forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.DateTimeField(widget=forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(\n        attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.ModelChoiceField(\n        queryset=None,\n        required=False, label="Testing Lead")
    - class DeleteTestForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Test\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class CopyTestForm(forms.Form):\n    engagement = forms.ModelChoiceField(\n        required=True,\n        queryset=Engagement.objects.none(),\n        error_messages={"required": "*"})\n\n    def __i...
    - forms.ModelChoiceField(\n        required=True,\n        queryset=Engagement.objects.none(),\n        error_messages={"required": "*"})
    - class AddFindingForm(forms.ModelForm):\n    title = forms.CharField(max_length=1000)\n    date = forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "date...
    - forms.CharField(max_length=1000)
    - forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.IntegerField(required=False)
    - forms.CharField(max_length=117, required=False, widget=forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
