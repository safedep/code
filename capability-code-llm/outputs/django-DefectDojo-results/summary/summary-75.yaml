
django:
  django.http.HttpRequest:
    - def post(self, request: HttpRequest):\n        # Run common checks\n        super().preprocess_request(request)\n        # Set up the initial context\n        context = self.get_initial_context(reques...
    - def get_initial_context(self, request: HttpRequest, nwh: Notification_Webhooks):\n        return {\n            "name": "Edit Notification Webhook",\n            "user": request.user,\n            "form": self.get_form(request, instance=nwh),\n            "nwh": nwh,\n        }
    - def process_form(self, request: HttpRequest, nwh: Notification_Webhooks, context: dict):\n        form = context["form"]\n        if "deactivate_webhook" in request.POST:  # TODO: add this to API as w...
    - def get(self, request: HttpRequest, nwhid: int):\n        # Run common checks\n        super().preprocess_request(request)\n        nwh = self.get_notification_webhook(nwhid)\n        # Set up the ini...
    - def post(self, request: HttpRequest, nwhid: int):\n        # Run common checks\n        super().preprocess_request(request)\n        nwh = self.get_notification_webhook(nwhid)\n        # Set up the in...
    - def get_form(\n        self,\n        request: HttpRequest,\n        **kwargs: dict,\n    ) -> NotificationsWebhookForm:\n        if request.method == "POST":\n            return DeleteNotificationsWebhookForm(request.POST, **kwargs)\n        return DeleteNotificationsWebhookForm(**kwargs)
    - def get_initial_context(self, request: HttpRequest, nwh: Notification_Webhooks):\n        return {\n            "form": self.get_form(request, instance=nwh),\n            "nwh": nwh,\n        }
    - def process_form(self, request: HttpRequest, nwh: Notification_Webhooks, context: dict):\n        form = context["form"]\n        if form.is_valid():\n            nwh.delete()\n            messages.ad...
    - def get(self, request: HttpRequest, nwhid: int):\n        # Run common checks\n        super().preprocess_request(request)\n        nwh = self.get_notification_webhook(nwhid)\n        # Set up the ini...
    - def post(self, request: HttpRequest, nwhid: int):\n        # Run common checks\n        super().preprocess_request(request)\n        nwh = self.get_notification_webhook(nwhid)\n        # Set up the in...
    - def get_initial_context(self, request: HttpRequest, test: Test):\n        # Get the finding form first since it is used in another place\n        finding_form = self.get_finding_form(request, test.eng...
    - def get_finding_form(self, request: HttpRequest, product: Product):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initia...
    - def get_jira_form(self, request: HttpRequest, test: Test, finding_form: AdHocFindingForm = None):\n        # Determine if jira should be used\n        if (jira_project := jira_helper.get_jira_project(...
    - def get_github_form(self, request: HttpRequest, test: Test):\n        # Determine if github should be used\n        if get_system_setting("enable_github"):\n            # Ensure there is a github conf...
    - def validate_status_change(self, request: HttpRequest, context: dict):\n        if ((context["form"]["active"].value() is False\n             or context["form"]["false_p"].value())\n             and c...
    - def process_finding_form(self, request: HttpRequest, test: Test, context: dict):\n        finding = None\n        if context["form"].is_valid():\n            finding = context["form"].save(commit=Fals...
    - def process_jira_form(self, request: HttpRequest, finding: Finding, context: dict):\n        # Capture case if the jira not being enabled\n        if context["jform"] is None:\n            return requ...
    - def process_github_form(self, request: HttpRequest, finding: Finding, context: dict):\n        if "githubform-push_to_github" not in request.POST:\n            return request, True\n\n        if conte...
    - def process_forms(self, request: HttpRequest, test: Test, context: dict):\n        form_success_list = []\n        # Set vars for the completed forms\n        # Validate finding mitigation\n        re...
    - def get(self, request: HttpRequest, product_id: int):\n        # Get the initial objects\n        product = self.get_product(product_id)\n        # Make sure the user is authorized\n        user_has_p...
    - def post(self, request: HttpRequest, product_id: int):\n        # Get the initial objects\n        product = self.get_product(product_id)\n        # Make sure the user is authorized\n        user_has_...
    - def get(self, request: HttpRequest) -> HttpResponse:\n        add_breadcrumb(title="Report Builder", top_level=True, request=request)\n        return render(request, self.get_template(), self.get_context(request))
    - def get_findings(self, request: HttpRequest):\n        findings = get_authorized_findings(Permissions.Finding_View)\n        filter_string_matching = get_system_setting("filter_string_matching", False...
    - def get_endpoints(self, request: HttpRequest):\n        endpoints = Endpoint.objects.filter(finding__active=True,\n                                            finding__false_p=False,\n                ...
    - def get_available_widgets(self, request: HttpRequest) -> list[Widget]:\n        return [\n            CoverPage(request=request),\n            TableOfContents(request=request),\n            WYSIWYGCon...
    - def get_context(self, request: HttpRequest) -> dict:\n        return {\n            "available_widgets": self.get_available_widgets(request),\n            "in_use_widgets": self.get_in_use_widgets(request)}
    - def post(self, request: HttpRequest) -> HttpResponse:\n        # saving the report\n        form = self.get_form(request)\n        if form.is_valid():\n            self._set_state(request)\n            return render(request, self.get_template(), self.get_context())\n        raise PermissionDenied
    - def _set_state(self, request: HttpRequest):\n        self.request = request\n        self.host = report_url_resolver(request)\n        self.selected_widgets = self.get_selected_widgets(request)\n     ...
    - def permission_check(\n        self,\n        request: HttpRequest,\n    ) -> None:\n        if not request.user.is_superuser:\n            raise PermissionDenied
    - def get_context(\n        self,\n        request: HttpRequest,\n    ) -> dict:\n        system_settings_obj = self.get_settings_object()\n        # Set the initial context\n        context = {\n      ...
    - def get_form(\n        self,\n        request: HttpRequest,\n        system_settings: System_Settings,\n    ) -> SystemSettingsForm:\n        # Set up the args for the form\n        args = [request.PO...
    - def validate_form(\n        self,\n        request: HttpRequest,\n        context: dict,\n    ) -> tuple[HttpRequest, bool]:\n        if context["form"].is_valid():\n            if (context["form"].cl...
    - def validate_form(\n        self,\n        request: HttpRequest,\n        context: dict,\n    ) -> tuple[HttpRequest, bool]:\n        if context["form"].is_valid():\n            if (context["form"].cl...
    - def get(\n        self,\n        request: HttpRequest,\n    ) -> HttpResponse:\n        # permission check\n        self.permission_check(request)\n        # Set up the initial context\n        contex...
    - def post(\n        self,\n        request: HttpRequest,\n    ) -> HttpResponse:\n        # permission check\n        self.permission_check(request)\n        # Set up the initial context\n        conte...
    - def get_test_import_data(self, request: HttpRequest, test: Test):\n        test_imports = Test_Import.objects.filter(test=test)\n        test_import_filter = TestImportFilter(request.GET, test_imports...
    - def get_stub_findings(self, request: HttpRequest, test: Test):\n        stub_findings = Stub_Finding.objects.filter(test=test)\n        paged_stub_findings = get_page_items(request, stub_findings, 25)\n\n        return {\n            "stub_findings": paged_stub_findings,\n        }
    - def get_findings(self, request: HttpRequest, test: Test):\n        findings = Finding.objects.filter(test=test).order_by("numerical_severity")\n        filter_string_matching = get_system_setting("fil...
    - def get_note_form(self, request: HttpRequest):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial form args\n        kwargs = {}\n\n        return NoteForm(*args, **kwargs)
    - def get_typed_note_form(self, request: HttpRequest, context: dict):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initia...
    - def get_form(self, request: HttpRequest, context: dict):\n        return (\n            self.get_typed_note_form(request, context)\n            if context.get("note_type_activation")\n            else self.get_note_form(request)\n        )
    - def get_initial_context(self, request: HttpRequest, test: Test):\n        # Set up the product tab\n        product_tab = Product_Tab(test.engagement.product, title=_("Test"), tab="engagements")\n    ...
    - def process_form(self, request: HttpRequest, test: Test, context: dict):\n        if context["form"].is_valid():\n            # Save the note\n            new_note = context["form"].save(commit=False)...
    - def get(self, request: HttpRequest, test_id: int):\n        # Get the initial objects\n        test = self.get_test(test_id)\n        # Make sure the user is authorized\n        user_has_permission_or...
    - def post(self, request: HttpRequest, test_id: int):\n        # Get the initial objects\n        test = self.get_test(test_id)\n        # Make sure the user is authorized\n        user_has_permission_o...
    - def get_initial_context(self, request: HttpRequest, test: Test):\n        # Get the finding form first since it is used in another place\n        finding_form = self.get_finding_form(request, test)\n ...
    - def get_finding_form(self, request: HttpRequest, test: Test):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial form...
    - def get_jira_form(self, request: HttpRequest, test: Test, finding_form: AddFindingForm = None):\n        # Determine if jira should be used\n        if (jira_project := jira_helper.get_jira_project(te...
    - def validate_status_change(self, request: HttpRequest, context: dict):\n        if ((context["form"]["active"].value() is False\n             or context["form"]["false_p"].value())\n             and c...
    - def process_finding_form(self, request: HttpRequest, test: Test, context: dict):\n        finding = None\n        if context["form"].is_valid():\n            finding = context["form"].save(commit=Fals...
    - def process_jira_form(self, request: HttpRequest, finding: Finding, context: dict):\n        # Capture case if the jira not being enabled\n        if context["jform"] is None:\n            return requ...
    - def process_forms(self, request: HttpRequest, test: Test, context: dict):\n        form_success_list = []\n        finding = None\n        # Set vars for the completed forms\n        # Validate findin...
    - def get(self, request: HttpRequest, test_id: int):\n        # Get the initial objects\n        test = self.get_test(test_id)\n        # Make sure the user is authorized\n        user_has_permission_or...
    - def post(self, request: HttpRequest, test_id: int):\n        # Get the initial objects\n        test = self.get_test(test_id)\n        # Make sure the user is authorized\n        user_has_permission_o...
    - def get_form(\n        self,\n        request: HttpRequest,\n        test: Test,\n        **kwargs: dict,\n    ) -> ReImportScanForm:\n        """Returns the default import form for importing findings...
    - def get_jira_form(\n        self,\n        request: HttpRequest,\n        test: Test,\n    ) -> tuple[JIRAImportScanForm | None, bool]:\n        """Returns a JiraImportScanForm if jira is enabled"""\n...
    - def handle_request(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> tuple[HttpRequest, dict]:\n        """\n        Process the common behaviors between request types, a...
    - def handle_request(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> tuple[HttpRequest, dict]:\n        """\n        Process the common behaviors between request types, a...
    - def process_form(\n        self,\n        request: HttpRequest,\n        form: ReImportScanForm,\n        context: dict,\n    ) -> str | None:\n        """Process the form and manipulate the input in ...
    - def process_jira_form(\n        self,\n        request: HttpRequest,\n        form: JIRAImportScanForm,\n        context: dict,\n    ) -> str | None:\n        """\n        Process the jira form by fir...
    - def get(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> HttpResponse:\n        """Process GET requests for the ReImport View"""\n        # process the request and path ...
    - def post(\n        self,\n        request: HttpRequest,\n        test_id: int,\n    ) -> HttpResponse:\n        """Process POST requests for the ReImport View"""\n        # process the request and pat...
  django.forms:
    - forms.DateInput(attrs={"class": "datepicker", "placeholder": "YYYY-MM-DD"}, format="%Y-%m-%d")
    - forms.MultipleChoiceField(choices=[(self.finding.hash_code, self.finding.hash_code[:24] + "...")], required=False, initial=[])
    - forms.CharField(max_length=5000,\n    required=False,\n    label="Vulnerability Ids",\n    help_text="Ids of vulnerabilities in security advisories associated with this finding. Can be Common Vulnerab...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - class MultipleSelectWithPop(forms.SelectMultiple):\n    def render(self, name, *args, **kwargs):\n        html = super().render(name, *args, **kwargs)\n        popup_plus = '<div class="input-group do...
    - class Product_TypeForm(forms.ModelForm):\n    description = forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=False)\n\n    class Meta:\n        model = Product_Type\n        fields = ["name", "description", "critical_product", "key_product"]
    - forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=False)
    - forms.Textarea(attrs={})
    - class Delete_Product_TypeForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Product_Type\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class Edit_Product_Type_MemberForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields["product_type"].disabled = True\n      ...
    - class Add_Product_Type_MemberForm(forms.ModelForm):\n    users = forms.ModelMultipleChoiceField(queryset=Dojo_User.objects.none(), required=True, label="Users")\n\n    def __init__(self, *args, **kwar...
    - forms.ModelMultipleChoiceField(queryset=Dojo_User.objects.none(), required=True, label="Users")
    - class Add_Product_Type_Member_UserForm(forms.ModelForm):\n    product_types = forms.ModelMultipleChoiceField(queryset=Product_Type.objects.none(), required=True, label="Product Types")\n\n    def __in...
    - forms.ModelMultipleChoiceField(queryset=Product_Type.objects.none(), required=True, label="Product Types")
    - class Test_TypeForm(forms.ModelForm):\n    class Meta:\n        model = Test_Type\n        exclude = ["dynamically_generated"]
    - class Development_EnvironmentForm(forms.ModelForm):\n    class Meta:\n        model = Development_Environment\n        fields = ["name"]
    - class Delete_Dev_EnvironmentForm(forms.ModelForm):\n    class Meta:\n        model = Development_Environment\n        fields = ["id"]
    - class ProductForm(forms.ModelForm):\n    name = forms.CharField(max_length=255, required=True)\n    description = forms.CharField(widget=forms.Textarea(attrs={}),\n                                  re...
    - forms.CharField(max_length=255, required=True)
    - forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=True)
    - forms.Textarea(attrs={})
    - forms.ModelChoiceField(label="Product Type",\n                                       queryset=Product_Type.objects.none(),\n                                       required=True)
    - forms.ModelChoiceField(label="SLA Configuration",\n                                        queryset=SLA_Configuration.objects.all(),\n                                        required=True,\n                                        initial="Default")
    - forms.ModelChoiceField(queryset=Dojo_User.objects.exclude(is_active=False).order_by("first_name", "last_name"), required=False)
    - forms.ModelChoiceField(queryset=Dojo_User.objects.exclude(is_active=False).order_by("first_name", "last_name"), required=False)
    - forms.ModelChoiceField(queryset=Dojo_User.objects.exclude(is_active=False).order_by("first_name", "last_name"), required=False)
    - class DeleteProductForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Product\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class EditFindingGroupForm(forms.ModelForm):\n    name = forms.CharField(max_length=255, required=True, label="Finding Group Name")\n    jira_issue = forms.CharField(max_length=255, required=False, la...
    - forms.CharField(max_length=255, required=True, label="Finding Group Name")
    - forms.CharField(max_length=255, required=False, label="Linked JIRA Issue",\n                                 help_text="Leave empty and check push to jira to create a new JIRA issue for this finding group.")
    - forms.BooleanField()
    - class DeleteFindingGroupForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Finding_Group\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class Edit_Product_MemberForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields["product"].disabled = True\n        self.fie...
    - class Add_Product_MemberForm(forms.ModelForm):\n    users = forms.ModelMultipleChoiceField(queryset=Dojo_User.objects.none(), required=True, label="Users")\n\n    def __init__(self, *args, **kwargs):\...
    - forms.ModelMultipleChoiceField(queryset=Dojo_User.objects.none(), required=True, label="Users")
    - class Add_Product_Member_UserForm(forms.ModelForm):\n    products = forms.ModelMultipleChoiceField(queryset=Product.objects.none(), required=True, label="Products")\n\n    def __init__(self, *args, **...
    - forms.ModelMultipleChoiceField(queryset=Product.objects.none(), required=True, label="Products")
    - class NoteTypeForm(forms.ModelForm):\n    description = forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=True)\n\n    class Meta:\n        model = Note_Type\n        fields = ["name", "description", "is_single", "is_mandatory"]
    - forms.CharField(widget=forms.Textarea(attrs={}),\n                                  required=True)
