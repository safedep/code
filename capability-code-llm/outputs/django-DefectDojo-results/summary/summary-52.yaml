
dojo:
  dojo.authorization.roles_permissions.Permissions:
    - user_has_permission_or_403(request.user, pt, Permissions.Product_Type_View)
    - get_authorized_products(Permissions.Product_View)
    - get_authorized_products(Permissions.Product_Type_View)
    - user_has_permission_or_403(request.user, object, Permissions.Note_Delete)
    - user_has_permission_or_403(request.user, object, Permissions.Note_Edit)
    - user_has_permission_or_403(request.user, object, Permissions.Note_View_History)
    - get_authorized_users_for_product_and_product_type(\n                users,\n                self.product,\n                Permissions.Product_View,\n            )
    - get_authorized_users_for_product_type(\n                users,\n                self.product_type,\n                Permissions.Product_Type_View,\n            )
    - user_is_authorized(Product, Permissions.Product_Tracking_Files_Add, "pid")
    - user_is_authorized(Product, Permissions.Product_Tracking_Files_View, "pid")
    - user_is_authorized(Product, Permissions.Product_Tracking_Files_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Tracking_Files_Delete, "pid")
    - get_authorized_products(Permissions.Product_View, user)
    - get_authorized_groups(Permissions.Group_View)
    - get_authorized_products(Permissions.Product_View)
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - get_authorized_members_for_product(prod, Permissions.Product_View)
    - get_authorized_global_members_for_product(prod, Permissions.Product_View)
    - get_authorized_members_for_product_type(prod.prod_type, Permissions.Product_Type_View)
    - get_authorized_groups_for_product(prod, Permissions.Product_View)
    - get_authorized_global_groups_for_product(prod, Permissions.Product_View)
    - get_authorized_groups_for_product_type(prod.prod_type, Permissions.Product_Type_View)
    - user_is_authorized(Product, Permissions.Component_View, "pid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_is_authorized(Product, Permissions.Engagement_View, "pid")
    - get_authorized_product_types(Permissions.Product_Type_Add_Product)
    - user_has_permission_or_403(request.user, product_type, Permissions.Product_Type_Add_Product)
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Delete, "pid")
    - user_is_authorized(Product, Permissions.Engagement_Add, "pid")
    - user_is_authorized(Product, Permissions.Technology_Add, "pid")
    - user_is_authorized(App_Analysis, Permissions.Technology_Edit, "tid")
    - user_is_authorized(App_Analysis, Permissions.Technology_Delete, "tid")
    - user_is_authorized(Product, Permissions.Engagement_Add, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_has_permission_or_403(request.user, product, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, product, Permissions.Finding_Add)
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_is_authorized(Product, Permissions.Product_Manage_Members, "pid")
    - user_has_permission(request.user, product,\n                                                                                    Permissions.Product_Member_Add_Owner)
    - user_is_authorized(Product_Member, Permissions.Product_Manage_Members, "memberid")
    - user_has_permission(request.user, member.product,\n                                                                Permissions.Product_Member_Add_Owner)
    - user_is_authorized(Product_Member, Permissions.Product_Member_Delete, "memberid")
    - user_is_authorized(Product, Permissions.Product_API_Scan_Configuration_Add, "pid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_is_authorized(Product_API_Scan_Configuration, Permissions.Product_API_Scan_Configuration_Edit, "pascid")
    - user_is_authorized(Product_API_Scan_Configuration, Permissions.Product_API_Scan_Configuration_Delete, "pascid")
    - user_is_authorized(Product_Group, Permissions.Product_Group_Edit, "groupid")
    - user_has_permission(request.user, group.product,\n                                                               Permissions.Product_Group_Add_Owner)
    - user_is_authorized(Product_Group, Permissions.Product_Group_Delete, "groupid")
    - user_is_authorized(Product, Permissions.Product_Group_Add, "pid")
    - user_has_permission(request.user, product,\n                                                                                    Permissions.Product_Group_Add_Owner)
    - get_authorized_groups(Permissions.Group_View)
    - get_authorized_product_types(Permissions.Product_Type_View)
    - user_has_global_permission(Permissions.Product_Type_Add)
    - user_is_authorized(Product_Type, Permissions.Product_Type_View, "ptid")
    - get_authorized_members_for_product_type(pt, Permissions.Product_Type_View)
    - get_authorized_global_members_for_product_type(pt, Permissions.Product_Type_View)
    - get_authorized_groups_for_product_type(pt, Permissions.Product_Type_View)
    - get_authorized_global_groups_for_product_type(pt, Permissions.Product_Type_View)
    - get_authorized_products(Permissions.Product_View)
    - user_is_authorized(Product_Type, Permissions.Product_Type_Delete, "ptid")
    - user_is_authorized(Product_Type, Permissions.Product_Type_Edit, "ptid")
    - get_authorized_members_for_product_type(pt, Permissions.Product_Type_Manage_Members)
    - user_is_authorized(Product_Type, Permissions.Product_Type_Manage_Members, "ptid")
    - user_has_permission(request.user, pt, Permissions.Product_Type_Member_Add_Owner)
    - user_is_authorized(Product_Type_Member, Permissions.Product_Type_Manage_Members, "memberid")
    - user_has_permission(request.user, member.product_type, Permissions.Product_Type_Member_Add_Owner)
    - user_is_authorized(Product_Type_Member, Permissions.Product_Type_Member_Delete, "memberid")
    - user_is_authorized(Product_Type, Permissions.Product_Type_Group_Add, "ptid")
    - user_has_permission(request.user, pt, Permissions.Product_Type_Group_Add_Owner)
    - user_is_authorized(Product_Type_Group, Permissions.Product_Type_Group_Edit, "groupid")
    - user_has_permission(request.user, group.product_type, Permissions.Product_Type_Group_Add_Owner)
    - user_is_authorized(Product_Type_Group, Permissions.Product_Type_Group_Delete, "groupid")
    - get_authorized_findings(Permissions.Finding_View)
    - user_is_authorized(Product_Type, Permissions.Product_Type_View, "ptid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - get_authorized_findings(Permissions.Finding_View)
    - user_is_authorized(Engagement, Permissions.Engagement_View, "eid")
    - user_is_authorized(Test, Permissions.Test_View, "tid")
    - user_is_authorized(Endpoint, Permissions.Endpoint_View, "eid")
    - user_is_authorized(Endpoint, Permissions.Endpoint_View, "eid")
    - user_is_authorized(Product, Permissions.Product_View, "pid")
    - user_has_permission_or_403(request.user, obj, Permissions.Product_Type_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Endpoint_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - get_authorized_engagements(Permissions.Engagement_View)
    - get_authorized_findings(Permissions.Finding_View)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_engagements(Permissions.Engagement_View)
    - get_authorized_products(Permissions.Product_View)
    - get_authorized_endpoints(Permissions.Endpoint_View)
    - get_authorized_app_analysis(Permissions.Product_View)
    - get_authorized_vulnerability_ids(Permissions.Finding_View)
    - user_is_authorized(Engagement, Permissions.Engagement_Edit, "eid")
    - user_has_permission(\n            request.user,\n            engagement,\n            Permissions.Engagement_Edit)
    - user_is_authorized(Engagement, Permissions.Engagement_Edit, "eid")
    - user_is_authorized(Engagement, Permissions.Engagement_View, "eid")
    - user_is_authorized(Engagement, Permissions.Engagement_Edit, "eid")
    - user_has_permission_or_403(request.user, product, Permissions.Engagement_Add)
    - user_has_permission_or_403(request.user, survey.engagement, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, engagement, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, survey.engagement, Permissions.Engagement_Edit)
    - user_has_permission(crum.get_current_user(), obj, Permissions[permission])
    - user_has_global_permission(crum.get_current_user(), Permissions[permission])
    - get_authorized_product_types(Permissions.Product_Type_Add_Product)
    - get_authorized_tests(Permissions.Test_View)
    - user_has_permission_or_403(request.user, test, Permissions.Test_View)
    - user_has_permission_or_403(request.user, test, Permissions.Note_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Test_View)
    - user_has_permission_or_403(request.user, test, Permissions.Note_Add)
    - user_is_authorized(Test, Permissions.Test_Edit, "tid")
    - user_is_authorized(Test, Permissions.Test_Delete, "tid")
    - user_is_authorized(Test, Permissions.Test_Edit, "tid")
    - get_authorized_engagements(Permissions.Engagement_Edit)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_users(Permissions.Test_View)
    - user_is_authorized(Test, Permissions.Test_View, "tid")
    - user_has_permission_or_403(request.user, test, Permissions.Finding_Add)
    - user_has_permission_or_403(request.user, test, Permissions.Finding_Add)
    - user_is_authorized(Test, Permissions.Finding_Add, "tid")
    - user_is_authorized(Test, Permissions.Test_View, "tid")
    - user_has_permission_or_403(request.user, test, Permissions.Import_Scan_Result)
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - user_is_authorized(Product, Permissions.Product_Edit, "pid")
    - get_authorized_product_members_for_user(user, Permissions.Product_View)
    - get_authorized_product_type_members_for_user(user, Permissions.Product_Type_View)
    - get_authorized_findings(Permissions.Finding_View, user=get_current_user())
    - user_has_permission_or_403(request.user, obj, Permissions.Product_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Endpoint_View)
    - user_has_permission(request.user, engagement, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_Edit)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Engagement_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Test_View)
    - user_has_permission_or_403(request.user, obj, Permissions.Finding_View)
  dojo.forms.EditEndpointForm:
    - EditEndpointForm(request.POST, instance=endpoint)
    - EditEndpointForm(instance=endpoint)
  dojo.filters.TestTypeFilter:
    - TestTypeFilter(request.GET, queryset=initial_queryset)
  dojo.forms.MergeFindings:
    - MergeFindings(\n            finding=finding,\n            findings=findings,\n            initial={"finding_to_merge_into": finding_to_update[0]},\n        )
    - MergeFindings(request.POST, finding=finding, findings=findings)
  dojo.utils.opened_in_period:
    - opened_in_period(start_date, end_date, test__engagement__product__prod_type=pt)
    - opened_in_period(start_date + relativedelta(months=-x), end_of_month + relativedelta(months=-x),\n                                     test__engagement__product__prod_type=pt)
    - opened_in_period(start_date, end_date,\n                test__engagement__product__tags__name=pt,\n                test__engagement__product__in=prods)
    - opened_in_period(start_date + relativedelta(months=-x), end_of_month + relativedelta(months=-x),\n                                     test__engagement__product__tags__name=pt, test__engagement__product__in=prods)
  dojo.development_environment.urls.urlpatterns aliased as dev_env_urls:
    - ur += dev_env_urls
  dojo.group.urls.urlpatterns aliased as group_urls:
    - ur += group_urls
  dojo.jira_link.urls.urlpatterns aliased as jira_urls:
    - ur += jira_urls
  dojo.system_settings.urls.urlpatterns aliased as system_settings_urls:
    - ur += system_settings_urls
  dojo.finding.helper.NOT_ACCEPTED_FINDINGS_QUERY:
    - Finding.objects.filter(duplicate=False, test__engagement=eng).filter(NOT_ACCEPTED_FINDINGS_QUERY)
    - qs.filter(NOT_ACCEPTED_FINDINGS_QUERY)
  dojo.utils.is_finding_groups_enabled:
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
    - is_finding_groups_enabled()
  dojo.filters.ProductFilterWithoutObjectLookups:
    - filter_class = ProductFilterWithoutObjectLookups if filter_string_matching else ProductFilter
    - filter_class = ProductFilterWithoutObjectLookups if filter_string_matching else ProductFilter
  dojo.forms.CustomReportOptionsForm:
    - CustomReportOptionsForm()
  dojo.models.Language_Type:
    - model = Language_Type
    - Language_Type.objects.get_or_create(language=name)
    - element = deserialized[name]\n\n                try:\n                    (\n                        language_type,\n                        _created,\n                    ) = Language_Type.objects.ge...
    - Language_Type.objects.filter(\n                        language=name,\n                    )
    - Language_Type.objects.none()
    - Language_Type.objects.all()
    - Language_Type.objects.get_or_create(language=name)
    - try:\n                    language_type, created = Language_Type.objects.get_or_create(language=name)\n                except Language_Type.MultipleObjectsReturned:\n                    logger.warning...
    - Language_Type.objects.get(\n                language__iexact=language)
    - try:\n            language_type = Language_Type.objects.get(\n                language__iexact=language)\n\n            if language_type:\n                lang = Languages(language=language_type, prod...
  dojo.authorization.authorization.get_roles_for_permission:
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
    - get_roles_for_permission(permission)
  dojo.tools.acunetix.parse_acunetix_xml.AcunetixXMLParser:
    - AcunetixXMLParser()
  dojo.tools.cyclonedx.helpers.Cyclonedxhelper:
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
    - Cyclonedxhelper()
  dojo.models.Product_Type_Group:
    - model = Product_Type_Group
    - Product_Type_Group.objects.filter(\n                product_type=data.get("product_type"), group=data.get("group"),\n            )
    - Product_Type_Group.objects.none()
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("endpoint__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("test__engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("finding__test__engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(product_type=self.initial["product_type"])
    - model = Product_Type_Group
    - Product_Type_Group.objects.filter(group=self.initial["group"])
    - model = Product_Type_Group
    - model = Product_Type_Group
    - Product_Type_Group.objects.filter(group=group)
    - Product_Type_Group.objects.filter(product_type=product_type, group=group)
    - Product_Type_Group()
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("finding_group__test__engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("finding__test__engagement__product__prod_type_id"),\n        group__users=user,\n        role__in=roles)
    - Product_Type_Group.objects.filter(\n        product_type=OuterRef("prod_type_id"),\n        group__users=user,\n        role__in=roles)
