version: 0.1

signatures:
  - id: test.signature.dialog.with.window
    description: "Test signature for matching resolves"
    vendor: "Test Vendor"
    product: "Test Product"
    service: "Test Service"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.awt.Dialog"
            args:
              - index: 0
                resolvesto: ["java.awt.Window"]
                values: ["\"Test Dialog\""]

  - id: crypto.md5
    description: "MD5 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "MD5 hash"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"md5\"", "\"MD5\"", "\"mD5\"", "\"Md5\""]

  - id: crypto.md2
    description: "MD2 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "MD2 hash"
    tags: [cryptography, hash, weak]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"md2\"", "\"MD2\"", "\"mD2\"", "\"Md2\""]

  - id: crypto.sha1
    description: "SHA-1 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA-1 hash"
    tags: [cryptography, hash, weak]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha-1\"", "\"SHA-1\"", "\"Sha-1\""]

  - id: crypto.sha224
    description: "SHA-224 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA-224 hash"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha-224\"", "\"SHA-224\"", "\"Sha-224\""]

  - id: crypto.sha256
    description: "SHA-256 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA-256 hash"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha-256\"", "\"SHA-256\"", "\"Sha-256\""]

  - id: crypto.sha384
    description: "SHA-384 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA-384 hash"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha-384\"", "\"SHA-384\"", "\"Sha384\""]

  - id: crypto.sha512
    description: "SHA-512 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA-512 hash"
    tags: [cryptography, hash]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha-512\"", "\"SHA-512\"", "\"Sha512\""]

  - id: crypto.sha3-224
    description: "SHA3-224 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA3-224 hash"
    tags: [cryptography, hash, sha3]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha3-224\"", "\"SHA3-224\"", "\"Sha3-224\""]

  - id: crypto.sha3-256
    description: "SHA3-256 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA3-256 hash"
    tags: [cryptography, hash, sha3]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha3-256\"", "\"SHA3-256\"", "\"Sha3-256\""]

  - id: crypto.sha3-384
    description: "SHA3-384 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA3-384 hash"
    tags: [cryptography, hash, sha3]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha3-384\"", "\"SHA3-384\"", "\"Sha3-384\""]

  - id: crypto.sha3-512
    description: "SHA3-512 hash"
    vendor: ""
    product: "Hash algorithm"
    service: "SHA3-512 hash"
    tags: [cryptography, hash, sha3]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "java.security.MessageDigest.getInstance"
            args:
              - index: 0
                values: ["\"sha3-512\"", "\"SHA3-512\"", "\"Sha3-512\""]

  - id: crypto.aes
    description: "AES encryption/decryption"
    vendor: ""
    product: "Symmetric encryption algorithm"
    service: "AES encryption"
    tags: [cryptography, encryption, symmetric]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"aes\"", "\"AES\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"aes\"", "\"AES\"", "\"Aes\""]

  - id: crypto.des
    description: "DES encryption/decryption"
    vendor: ""
    product: "Symmetric encryption algorithm"
    service: "DES encryption"
    tags: [cryptography, encryption, symmetric, weak]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"des\"", "\"DES\"", "\"Des\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"des\"", "\"DES\"", "\"Des\""]

  - id: crypto.3des
    description: "3DES (Triple DES) encryption/decryption"
    vendor: ""
    product: "Symmetric encryption algorithm"
    service: "3DES encryption"
    tags: [cryptography, encryption, symmetric]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"desede\"", "\"DESede\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"desede\"", "\"DESede\""]

  - id: crypto.blowfish
    description: "Blowfish encryption/decryption"
    vendor: ""
    product: "Symmetric encryption algorithm"
    service: "Blowfish encryption"
    tags: [cryptography, encryption, symmetric]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"blowfish\"", "\"Blowfish\"", "\"BLOWFISH\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"blowfish\"", "\"Blowfish\"", "\"BLOWFISH\""]

  - id: crypto.rc2
    description: "RC2 encryption/decryption"
    vendor: ""
    product: "Symmetric encryption algorithm"
    service: "RC2 encryption"
    tags: [cryptography, encryption, symmetric]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"rc2\"", "\"RC2\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"rc2\"", "\"RC2\""]

  - id: crypto.rc4
    description: "RC4 encryption/decryption"
    vendor: ""
    product: "Stream cipher algorithm"
    service: "RC4 encryption"
    tags: [cryptography, encryption, stream-cipher, weak]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"rc4\"", "\"RC4\""]
          - type: call
            value: "javax.crypto.spec.SecretKeySpec"
            args:
              - index: 1
                values: ["\"rc4\"", "\"RC4\""]

  - id: crypto.rsa
    description: "RSA encryption/decryption"
    vendor: ""
    product: "Asymmetric encryption algorithm"
    service: "RSA encryption"
    tags: [cryptography, encryption, asymmetric]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "javax.crypto.Cipher.getInstance"
            args:
              - index: 0
                values: ["\"RSA/ECB/PKCS1Padding\""]

  - id: gcp.storage
    description: "Google Cloud Storage"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP Storage"
    tags: [storage, iaas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.storage.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/storage.*"

  - id: gcp.bigquery
    description: "Google Cloud BigQuery"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "BigQuery"
    tags: [bigquery, data, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.bigquery.*"
          - type: call
            value: "google.cloud.bigquery_v2.*"
          - type: call
            value: "google.cloud.bigquery_storage.*"
          - type: call
            value: "google.cloud.bigquery_storage_v1.*"
          - type: call
            value: "google.cloud.bigquery_storage_v1beta2.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/bigquery.*"

  - id: gcp.firestore
    description: "Google Cloud Firestore"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP Firestore"
    tags: [firestore, database, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.firestore.*"
          - type: call
            value: "google.cloud.firestore_v1.*"
          - type: call
            value: "google.cloud.firestore_admin_v1.*"
          - type: call
            value: "google.cloud.firestore_bundle.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/firestore.*"

  - id: gcp.vision
    description: "Google Cloud Vision API"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP Vision"
    tags: [vision, image-analysis, ai, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.vision.*"
          - type: call
            value: "google.cloud.vision_v1.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/vision.*"

  - id: gcp.translate
    description: "Google Cloud Translation"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP Language translation"
    tags: [translate, nlp, language, ai, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.translate.*"
          - type: call
            value: "google.cloud.translate_v2.*"
          - type: call
            value: "google.cloud.translate_v3.*"
          - type: call
            value: "google.cloud.translate_v3beta1.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/translate.*"

  - id: gcp.secretmanager
    description: "Google Cloud Secret Manager"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP Secret Manager"
    tags: [secret-manager, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.secretmanager.*"
          - type: call
            value: "google.cloud.secretmanager_v1.*"
          - type: call
            value: "google.cloud.secretmanager.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/secret-manager.*"

  - id: gcp.pubsub
    description: "Google Cloud Pub/Sub"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP PubSub"
    tags: [pubsub, messaging, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.pubsub.*"
          - type: call
            value: "google.cloud.pubsub_v1.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/pubsub.*"

  - id: gcp.pubsub.publisher
    description: "Google Cloud Pub/Sub Publisher"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP PubSub"
    tags: [pubsub, messaging, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.pubsub.PublisherClient"
          - type: call
            value: "google.cloud.pubsub_v1.PublisherClient"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/pubsub.v1.PublisherClient"

  - id: gcp.pubsub_v1.subscriber
    description: "Google Cloud Pub/Sub Subscriber"
    vendor: "Google"
    product: "Google Cloud Platform"
    service: "GCP PubSub"
    tags: [pubsub, messaging, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "google.cloud.pubsub.SubscriberClient"
          - type: call
            value: "google.cloud.pubsub_v1.SubscriberClient"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@google-cloud/pubsub.v1.SubscriberClient"

  - id: langchain.agents
    description: "Agent is a class that uses an LLM to choose a sequence of actions to take"
    vendor: "Langchain"
    product: "Langchain"
    service: "Language Models"
    tags: [ai, text, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.agents.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.agent.*"

  - id: langchain.mcp
    description: "Model Context Protocol support in Langchain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain MCP Support"
    tags: [ai, mcp, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_mcp_adapters.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.mcp.*"

  - id: langchain.callbacks
    description: "Callback handlers allow listening to events in LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Language Models"
    tags: [ai, text, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.callbacks.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.model.chat.listener.*"

  - id: langchain.chains
    description: "Chains are easily reusable components linked together. While Chat Models use language models under the hood, the interface they expose is a bit different. Rather than expose a “text in, text out” API, they expose an interface where “chat messages” are the inputs and outputs."
    vendor: "Langchain"
    product: "Langchain"
    service: "Language Models"
    tags: [ai, text, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.chains.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.chain.*"

  - id: langchain.chat_models
    description: "Chat Models are a variation on language models, While Chat Models use language models under the hood, the interface they expose is a bit different. Rather than expose a “text in, text out” API, they expose an interface where “chat messages” are the inputs and outputs"
    vendor: "Langchain"
    product: "Langchain"
    service: "Chat Models"
    tags: [ai, chat, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.chat_models.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.model.chat.*"

  - id: langchain.embeddings
    description: "Embedding models are wrappers around embedding models from different APIs and services. Embedding models can be LLMs or not."
    vendor: "Langchain"
    product: "Langchain"
    service: "Embeddings"
    tags: [ai, embeddings, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.embeddings.*"
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.embedding.*"
          - type: call
            value: "dev.langchain4j.store.embedding.*"
          - type: call
            value: "dev.langchain4j.spi.model.embedding.*"
          - type: call
            value: "dev.langchain4j.spi.store.embedding.*"

  - id: langchain.evaluation
    description: "Evaluation chains for grading LLM and Chain outputs."
    vendor: "Langchain"
    product: "Langchain"
    service: "Evaluation"
    tags: [ai, evaluation, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.evaluation.*"

  - id: langchain.globals
    description: "Global values and configuration that apply to all of LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "LLM"
    tags: [ai, llm, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.globals.*"

  - id: langchain.hub
    description: "Interface with LangChain Hub"
    vendor: "Langchain"
    product: "Langchain"
    service: "Hub Interface"
    tags: [ai, hub, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.hub.*"

  - id: langchain.indexes
    description: "Index is used to avoid writing duplicated content into the vectostore and to avoid over-writing content if it’s unchanged"
    vendor: "Langchain"
    product: "Langchain"
    service: "Indexes"
    tags: [ai, indexes, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.indexes.*"

  - id: langchain.memory
    description: "Memory maintains Chain state, incorporating context from past runs"
    vendor: "Langchain"
    product: "Langchain"
    service: "Memory"
    tags: [ai, memory, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.memory.*"

  - id: langchain.model_laboratory
    description: "Experiment with different models"
    vendor: "Langchain"
    product: "Langchain"
    service: "Model Laboratory"
    tags: [ai, models, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.model_laboratory.*"

  - id: langchain.output_parsers
    description: "OutputParser classes parse the output of an LLM call"
    vendor: "Langchain"
    product: "Langchain"
    service: "Parsers"
    tags: [ai, parsers, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.output_parsers.*"

  - id: langchain.retrievers
    description: "Retriever class returns Documents given a text query"
    vendor: "Langchain"
    product: "Langchain"
    service: "Retrievers"
    tags: [ai, retrievers, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.retrievers.*"

  - id: langchain.runnables
    description: "LangChain Runnables and the LangChain Expression Language (LCEL) provide a declarative way to compose and orchestrate LLM-powered programs that natively support synchronous, asynchronous, batch, and streaming operations for scalable, production-grade applications"
    vendor: "Langchain"
    product: "Langchain"
    service: "Runnables"
    tags: [ai, runnables, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.runnables.*"

  - id: langchain.smith
    description: "This module provides utilities for connecting to LangSmith"
    vendor: "Langchain"
    product: "Langchain"
    service: "Smith Interface"
    tags: [ai, smith, interface, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.smith.*"

  - id: langchain.storage
    description: "Module provides implementations of various key-value stores that conform to a simple key-value interface"
    vendor: "Langchain"
    product: "Langchain"
    service: "Storage"
    tags: [ai, storage, langchain]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain.storage.*"

  - id: langchain.code_execution
    description: "Code execution with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain Code Execution"
    tags: [ai, code, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.code.*"

  - id: langchain.audio
    description: "Audio processing with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain Audio Processing"
    tags: [ai, audio, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.audio.*"

  - id: langchain.document
    description: "Document processing with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain Document Processing"
    tags: [ai, document, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.document.*"

  - id: langchain.image
    description: "Image processing with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain Image Processing"
    tags: [ai, image, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.image.*"

  - id: langchain.pdf
    description: "PDF processing with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain PDF Processing"
    tags: [ai, pdf, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.pdf.*"

  - id: langchain.video
    description: "Video processing with LangChain"
    vendor: "Langchain"
    product: "Langchain"
    service: "Langchain Video Processing"
    tags: [ai, video, langchain]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "dev.langchain4j.data.video.*"

  - id: langchain_core.agents
    description: "Schema definitions for representing agent actions, observations, and return values"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Agents"
    tags: [ai, text, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.agents.*"

  - id: langchain_core.beta
    description: "Some beta features that are not yet ready for production"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Beta"
    tags: [ai, text, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.beta.*"

  - id: langchain_core.document_loaders
    description: "Document loaders"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Document Loaders"
    tags: [ai, documents, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.document_loaders.*"

  - id: langchain_core.documents
    description: "Document module is a collection of classes that handle documents and their transformations."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Documents"
    tags: [ai, documents, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.documents.*"

  - id: langchain_core.embeddings
    description: "Interface for embedding models."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Embeddings"
    tags: [ai, embeddings, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.embeddings.*"

  - id: langchain_core.example_selectors
    description: "Example selector implements logic for selecting examples to include them in prompts. This allows us to select examples that are most relevant to the input."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Example Selectors"
    tags: [ai, example-selector, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.example_selectors.*"


  - id: langchain_core.exceptions
    description: "Custom exceptions for LangChain"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Exceptions"
    tags: [ai, exceptions, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.exceptions.*"

  - id: langchain_core.globals
    description: "Global values and configuration that apply to all of LangChain."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Globals Values"
    tags: [ai, global, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.globals.*"

  - id: langchain_core.graph_vectorstores
    description: "Langchain Core graph vector store interface"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Graph VectorStore"
    tags: [ai, graph, vector-store, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.graph_vectorstores.*"

  - id: langchain_core.indexing
    description: "Code to help indexing data into a vectorstore. This package contains helper logic to help deal with indexing data into a vectorstore while avoiding duplicated content and over-writing content if it’s unchanged."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Indexing"
    tags: [ai, indexing, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.indexing.*"

  - id: langchain_core.language_models
    description: "Language Model is a type of model that can generate text or complete text prompts."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Language Models"
    tags: [ai, language-models, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.language_models.*"

  - id: langchain_core.load
    description: "Load module helps with serialization and deserialization."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Load"
    tags: [ai, load, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.load.*"

  - id: langchain_core.memory
    description: "Memory maintains Chain state, incorporating context from past runs"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Memory"
    tags: [ai, memory, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.memory.*"

  - id: langchain_core.messages
    description: "Messages are objects used in prompts and chat conversations."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Messages"
    tags: [ai, Messages, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.messages.*"

  - id: langchain_core.output_parsers
    description: "OutputParser classes parse the output of an LLM call."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Parsers"
    tags: [ai, Parsers, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.output_parsers.*"

  - id: langchain_core.output
    description: "Output classes are used to represent the output of a language model call and the output of a chat."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Output"
    tags: [ai, output, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.output.*"

  - id: langchain_core.prompt_values
    description: "Prompt values for language model prompts. Prompt values are used to represent different pieces of prompts. They can be used to represent text, images, or chat message pieces."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Prompt Values"
    tags: [ai, prompt-values, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.prompt_values.*"

  - id: langchain_core.prompt
    description: "Prompt is the input to the model. Prompt is often constructed from multiple components and prompt values. Prompt classes and functions make constructing"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Prompt"
    tags: [ai, prompt, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.prompt.*"

  - id: langchain_core.rate_limiters
    description: "Interface for a rate limiter and an in-memory rate limiter."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Rate Limiters"
    tags: [ai, rate-limiting, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.rate_limiters.*"

  - id: langchain_core.retrievers
    description: "Retriever class returns Documents given a text query."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Retrievers"
    tags: [ai, retrievers, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.retrievers.*"

  - id: langchain_core.runnables
    description: "LangChain Runnable and the LangChain Expression Language (LCEL). The LangChain Expression Language (LCEL) offers a declarative method to build production-grade programs that harness the power of LLMs."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Runnables"
    tags: [ai, runnables, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.runnables.*"

  - id: langchain_core.stores
    description: "Store implements the key-value stores and storage helpers."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Store"
    tags: [ai, store, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.stores.*"

  - id: langchain_core.structured_query
    description: "Internal representation of a structured query language."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Structured Query"
    tags: [ai, structured-query, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.structured_query.*"

  - id: langchain_core.sys_info
    description: "sys_info prints information about the system and langchain packages for debugging purposes."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Sys Info"
    tags: [ai, sys-info, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.sys_info.*"

  - id: langchain_core.tools
    description: "Tools are classes that an Agent uses to interact with the world."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Sys Info"
    tags: [ai, sys-info, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.tools.*"

  - id: langchain_core.tracers
    description: "Tracers are classes for tracing runs."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Tracers"
    tags: [ai, tracers, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.tracers.*"

  - id: langchain_core.utils
    description: "Utility functions for LangChain."
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Utils"
    tags: [ai, utils, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.utils.*"

  - id: langchain_core.vectorstores
    description: "LangChain Core vector store"
    vendor: "Langchain"
    product: "Langchain Core Library"
    service: "Vector Stores"
    tags: [ai, vector-stores, langchain, langchain-core]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "langchain_core.vectorstores.*"

  - id: azure.vision
    description: "Azure Computer Vision"
    vendor: "Microsoft"
    product: "Azure"
    service: "Azure Vision"
    tags: [vision, image-analysis, ai, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.ai.vision.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure-rest/ai-vision-image-analysis.*"

  - id: azure.translator
    description: "Azure Text Translator"
    vendor: "Microsoft"
    product: "Azure"
    service: "Azure Translation"
    tags: [translate, nlp, language, ai, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.ai.translation.text.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure-rest/ai-translation-text.*"

  - id: azure.storage.blob
    description: "Azure Blob Storage"
    vendor: "Microsoft"
    product: "Azure"
    service: "Blob Storage"
    tags: [storage, blob, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.storage.blob.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/storage-blob.*"

  - id: azure.cosmos
    description: "Azure Cosmos DB"
    vendor: "Microsoft"
    product: "Azure"
    service: "Cosmos DB"
    tags: [cosmos, database, nosql, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.cosmos.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/cosmos.*"

  - id: azure.IAM
    description: "Azure IAM services"
    vendor: "Microsoft"
    product: "Azure"
    service: "IAM services"
    tags: [keyvault, secrets, credentials, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.identity.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/identity.*"

  - id: azure.servicebus
    description: "Azure Service Bus"
    vendor: "Microsoft"
    product: "Azure"
    service: "Azure Service Bus"
    tags: [servicebus, messaging, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.servicebus.*"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/service-bus.*"

  - id: azure.servicebus.sender
    description: "Azure Service Bus Sender Client"
    vendor: "Microsoft"
    product: "Azure"
    service: "Service Bus Sender client"
    tags: [servicebus, messaging, sender, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.servicebus.ServiceBusSender"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/service-bus.ServiceBusSender"

  - id: azure.servicebus.receiver
    description: "Azure Service Bus Receiver Client"
    vendor: "Microsoft"
    product: "Azure"
    service: "Service Bus Receiver client"
    tags: [servicebus, messaging, receiver, paas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "azure.servicebus.ServiceBusReceiver"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/service-bus.ServiceBusReceiver"

  - id: msoffice.graph
    description: "Microsoft Graph SDK Client"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "Graph SDK client"
    tags: [graph, microsoft, api, users, mail, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "msgraph.core.GraphClient"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@microsoft/microsoft-graph-client.Client"

  - id: msoffice.office365.outlook
    description: "Office 365 Outlook API Client"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "Outlook API client"
    tags: [office365, email, outlook, microsoft, saas]
    languages:
      python:
        match: any
        conditions:
          - type: import
            value: "O365.Account"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@microsoft/microsoft-graph-client.Client"

  - id: msoffice.teams.botbuilder
    description: "Microsoft Teams Bot Builder SDK"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "Teams Bot Builder SDK"
    tags: [teams, bot, chat, microsoft, saas]
    languages:
      python:
        match: any
        conditions:
          - type: import
            value: "botbuilder.core"
      javascript:
        match: any
        conditions:
          - type: call
            value: "botbuilder.core.TurnContext"

  - id: msoffice.powerbi.client
    description: "Power BI Embedded Client SDK"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "Power BI Embedded client"
    tags: [powerbi, visualization, dashboard, microsoft, saas]
    languages:
      javascript:
        match: any
        conditions:
          - type: import
            value: "powerbi-client"
          - type: call
            value: "powerbi.embed"

  - id: msoffice.auth.msal
    description: "Microsoft Authentication Library (MSAL)"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "MSAL client"
    tags: [msal, authentication, oauth, login, microsoft, saas]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "msal.PublicClientApplication"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@azure/msal-browser.PublicClientApplication"

  - id: msoffice.onedrive.sdk
    description: "OneDrive SDK Client"
    vendor: "Microsoft"
    product: "Microsoft Office"
    service: "OneDrive SDK client"
    tags: [onedrive, microsoft, sdk, storage, saas]
    languages:
      python:
        match: any
        conditions:
          - type: import
            value: "O365.Account"
      javascript:
        match: any
        conditions:
          - type: call
            value: "@microsoft/microsoft-graph-client.Client"

  - id: openai.client
    description: "OpenAI client"
    vendor: "OpenAI"
    product: "OpenAI"
    service: "AI client"
    tags: [ai, text, llm]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "openai.*"
      java:
        match: any
        conditions:
          - type: call
            value: "com.openai.client.*"

  - id: openai.sync
    description: "OpenAI AI Sync Responses"
    vendor: "OpenAI"
    product: "OpenAI API"
    service: "AI response"
    tags: [ai, text, llm]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "openai.OpenAI"

  - id: openai.async
    description: "OpenAI AI Async Responses"
    vendor: "OpenAI"
    product: "OpenAI API"
    service: "Async AI response"
    tags: [ai, text, llm, async]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "openai.AsyncOpenAI"

  - id: openai.azure
    description: "Azure OpenAI AI Responses"
    vendor: "Azure OpenAI"
    product: "Azure OpenAI API"
    service: "AI response"
    tags: [ai, text, llm, azure]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "openai.AzureOpenAI"
      java:
        match: any
        conditions:
          - type: call
            value: "com.azure.ai.openai.OpenAIClientBuilder"
          - type: call
            value: "com.azure.ai.openai.OpenAIAsyncClient"
          - type: call
            value: "com.azure.ai.openai.OpenAIClient"

  - id: anthropic.client
    description: "Anthropic client"
    vendor: "Anthropic"
    product: "Anthropic API"
    service: "AI client"
    tags: [ai, text, llm]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "anthropic.Anthropic"
      java:
        match: any
        conditions:
          - type: call
            value: "com.anthropic.client.okhttp.AnthropicOkHttpClient.fromEnv"
          - type: call
            value: "com.anthropic.client.okhttp.AnthropicOkHttpClient.builder"
          - type: call
            value: "com.anthropic.client.AnthropicClient.*"

  - id: anthropic.async
    description: "Anthropic async client"
    vendor: "Anthropic"
    product: "Anthropic API"
    service: "Async AI client"
    tags: [ai, text, llm]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "anthropic.AsyncAnthropic"
          - type: call
            value: "anthropic.AsyncAnthropicVertex"
      java:
        match: any
        conditions:
          - type: call
            value: "com.anthropic.client.okhttp.AnthropicOkHttpClientAsync.fromEnv"
          - type: call
            value: "com.anthropic.client.okhttp.AnthropicOkHttpClientAsync.builder"
          - type: call
            value: "com.anthropic.client.AnthropicClientAsync.*"

  - id: anthropic.bedrock
    description: "Anthropic Bedrock AI client for Integration with AWS Bedrock"
    vendor: "Anthropic"
    product: "Anthropic Bedrock Integration"
    service: "Anthropic AWS Bedrock AI client"
    tags: [ai, text, llm, bedrock]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "anthropic.AnthropicBedrock"
      java:
        match: any
        conditions:
          - type: call
            value: "com.anthropic.bedrock.*"

  - id: anthropic.vertexai
    description: "Anthropic client for Integration with Claude on Vertex AI"
    vendor: "Anthropic"
    product: "Anthropic VertexAI Integration"
    service: "Anthropic VertexAI client"
    tags: [ai, text, llm, vertexai]
    languages:
      python:
        match: any
        conditions:
          - type: call
            value: "anthropic.AnthropicVertex"
          - type: call
            value: "anthropic.AsyncAnthropicVertex"
      java:
        match: any
        conditions:
          - type: call
            value: "com.anthropic.vertex.*"

  - id: anthropic.batch
    description: "Anthropic batch processing"
    vendor: "Anthropic"
    product: "Anthropic API"
    service: "Anthropic batch responses"
    tags: [ai, text, llm, batch]
    languages:
      java:
        match: any
        conditions:
          - type: call
            value: "com.anthropic.models.messages.batches.*"
