// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/project"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetRelativePath sets the "relative_path" field.
func (_c *FileCreate) SetRelativePath(v string) *FileCreate {
	_c.mutation.SetRelativePath(v)
	return _c
}

// SetAbsolutePath sets the "absolute_path" field.
func (_c *FileCreate) SetAbsolutePath(v string) *FileCreate {
	_c.mutation.SetAbsolutePath(v)
	return _c
}

// SetLanguage sets the "language" field.
func (_c *FileCreate) SetLanguage(v file.Language) *FileCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetContentHash sets the "content_hash" field.
func (_c *FileCreate) SetContentHash(v string) *FileCreate {
	_c.mutation.SetContentHash(v)
	return _c
}

// SetSizeBytes sets the "size_bytes" field.
func (_c *FileCreate) SetSizeBytes(v int) *FileCreate {
	_c.mutation.SetSizeBytes(v)
	return _c
}

// SetLineCount sets the "line_count" field.
func (_c *FileCreate) SetLineCount(v int) *FileCreate {
	_c.mutation.SetLineCount(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *FileCreate) SetCreatedAt(v time.Time) *FileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FileCreate) SetUpdatedAt(v time.Time) *FileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_c *FileCreate) SetProjectID(id int) *FileCreate {
	_c.mutation.SetProjectID(id)
	return _c
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_c *FileCreate) SetNillableProjectID(id *int) *FileCreate {
	if id != nil {
		_c = _c.SetProjectID(*id)
	}
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *FileCreate) SetProject(v *Project) *FileCreate {
	return _c.SetProjectID(v.ID)
}

// AddAstNodeIDs adds the "ast_nodes" edge to the ASTNode entity by IDs.
func (_c *FileCreate) AddAstNodeIDs(ids ...int) *FileCreate {
	_c.mutation.AddAstNodeIDs(ids...)
	return _c
}

// AddAstNodes adds the "ast_nodes" edges to the ASTNode entity.
func (_c *FileCreate) AddAstNodes(v ...*ASTNode) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAstNodeIDs(ids...)
}

// AddSymbolIDs adds the "symbols" edge to the Symbol entity by IDs.
func (_c *FileCreate) AddSymbolIDs(ids ...int) *FileCreate {
	_c.mutation.AddSymbolIDs(ids...)
	return _c
}

// AddSymbols adds the "symbols" edges to the Symbol entity.
func (_c *FileCreate) AddSymbols(v ...*Symbol) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSymbolIDs(ids...)
}

// AddImportIDs adds the "imports" edge to the ImportStatement entity by IDs.
func (_c *FileCreate) AddImportIDs(ids ...int) *FileCreate {
	_c.mutation.AddImportIDs(ids...)
	return _c
}

// AddImports adds the "imports" edges to the ImportStatement entity.
func (_c *FileCreate) AddImports(v ...*ImportStatement) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddImportIDs(ids...)
}

// AddCallSiteIDs adds the "call_sites" edge to the CallRelationship entity by IDs.
func (_c *FileCreate) AddCallSiteIDs(ids ...int) *FileCreate {
	_c.mutation.AddCallSiteIDs(ids...)
	return _c
}

// AddCallSites adds the "call_sites" edges to the CallRelationship entity.
func (_c *FileCreate) AddCallSites(v ...*CallRelationship) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCallSiteIDs(ids...)
}

// AddInheritanceSiteIDs adds the "inheritance_sites" edge to the InheritanceRelationship entity by IDs.
func (_c *FileCreate) AddInheritanceSiteIDs(ids ...int) *FileCreate {
	_c.mutation.AddInheritanceSiteIDs(ids...)
	return _c
}

// AddInheritanceSites adds the "inheritance_sites" edges to the InheritanceRelationship entity.
func (_c *FileCreate) AddInheritanceSites(v ...*InheritanceRelationship) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInheritanceSiteIDs(ids...)
}

// AddSymbolReferenceIDs adds the "symbol_references" edge to the SymbolReference entity by IDs.
func (_c *FileCreate) AddSymbolReferenceIDs(ids ...int) *FileCreate {
	_c.mutation.AddSymbolReferenceIDs(ids...)
	return _c
}

// AddSymbolReferences adds the "symbol_references" edges to the SymbolReference entity.
func (_c *FileCreate) AddSymbolReferences(v ...*SymbolReference) *FileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSymbolReferenceIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_c *FileCreate) Mutation() *FileMutation {
	return _c.mutation
}

// Save creates the File in the database.
func (_c *FileCreate) Save(ctx context.Context) (*File, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileCreate) SaveX(ctx context.Context) *File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FileCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := file.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := file.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileCreate) check() error {
	if _, ok := _c.mutation.RelativePath(); !ok {
		return &ValidationError{Name: "relative_path", err: errors.New(`ent: missing required field "File.relative_path"`)}
	}
	if v, ok := _c.mutation.RelativePath(); ok {
		if err := file.RelativePathValidator(v); err != nil {
			return &ValidationError{Name: "relative_path", err: fmt.Errorf(`ent: validator failed for field "File.relative_path": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AbsolutePath(); !ok {
		return &ValidationError{Name: "absolute_path", err: errors.New(`ent: missing required field "File.absolute_path"`)}
	}
	if v, ok := _c.mutation.AbsolutePath(); ok {
		if err := file.AbsolutePathValidator(v); err != nil {
			return &ValidationError{Name: "absolute_path", err: fmt.Errorf(`ent: validator failed for field "File.absolute_path": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "File.language"`)}
	}
	if v, ok := _c.mutation.Language(); ok {
		if err := file.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "File.language": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ContentHash(); !ok {
		return &ValidationError{Name: "content_hash", err: errors.New(`ent: missing required field "File.content_hash"`)}
	}
	if v, ok := _c.mutation.ContentHash(); ok {
		if err := file.ContentHashValidator(v); err != nil {
			return &ValidationError{Name: "content_hash", err: fmt.Errorf(`ent: validator failed for field "File.content_hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SizeBytes(); !ok {
		return &ValidationError{Name: "size_bytes", err: errors.New(`ent: missing required field "File.size_bytes"`)}
	}
	if v, ok := _c.mutation.SizeBytes(); ok {
		if err := file.SizeBytesValidator(v); err != nil {
			return &ValidationError{Name: "size_bytes", err: fmt.Errorf(`ent: validator failed for field "File.size_bytes": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LineCount(); !ok {
		return &ValidationError{Name: "line_count", err: errors.New(`ent: missing required field "File.line_count"`)}
	}
	if v, ok := _c.mutation.LineCount(); ok {
		if err := file.LineCountValidator(v); err != nil {
			return &ValidationError{Name: "line_count", err: fmt.Errorf(`ent: validator failed for field "File.line_count": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "File.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "File.updated_at"`)}
	}
	return nil
}

func (_c *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.RelativePath(); ok {
		_spec.SetField(file.FieldRelativePath, field.TypeString, value)
		_node.RelativePath = value
	}
	if value, ok := _c.mutation.AbsolutePath(); ok {
		_spec.SetField(file.FieldAbsolutePath, field.TypeString, value)
		_node.AbsolutePath = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(file.FieldLanguage, field.TypeEnum, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.ContentHash(); ok {
		_spec.SetField(file.FieldContentHash, field.TypeString, value)
		_node.ContentHash = value
	}
	if value, ok := _c.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt, value)
		_node.SizeBytes = value
	}
	if value, ok := _c.mutation.LineCount(); ok {
		_spec.SetField(file.FieldLineCount, field.TypeInt, value)
		_node.LineCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: []string{file.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AstNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.AstNodesTable,
			Columns: []string{file.AstNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SymbolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.SymbolsTable,
			Columns: []string{file.SymbolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImportsTable,
			Columns: []string{file.ImportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(importstatement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CallSitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CallSitesTable,
			Columns: []string{file.CallSitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InheritanceSitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.InheritanceSitesTable,
			Columns: []string{file.InheritanceSitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SymbolReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.SymbolReferencesTable,
			Columns: []string{file.SymbolReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (_c *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*File, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
