// Code generated by ent, DO NOT EDIT.

package callrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLTE(FieldID, id))
}

// CallSiteLine applies equality check predicate on the "call_site_line" field. It's identical to CallSiteLineEQ.
func CallSiteLine(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCallSiteLine, v))
}

// CallSiteColumn applies equality check predicate on the "call_site_column" field. It's identical to CallSiteColumnEQ.
func CallSiteColumn(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCallSiteColumn, v))
}

// IsConditional applies equality check predicate on the "is_conditional" field. It's identical to IsConditionalEQ.
func IsConditional(v bool) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldIsConditional, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CallSiteLineEQ applies the EQ predicate on the "call_site_line" field.
func CallSiteLineEQ(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCallSiteLine, v))
}

// CallSiteLineNEQ applies the NEQ predicate on the "call_site_line" field.
func CallSiteLineNEQ(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldCallSiteLine, v))
}

// CallSiteLineIn applies the In predicate on the "call_site_line" field.
func CallSiteLineIn(vs ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIn(FieldCallSiteLine, vs...))
}

// CallSiteLineNotIn applies the NotIn predicate on the "call_site_line" field.
func CallSiteLineNotIn(vs ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotIn(FieldCallSiteLine, vs...))
}

// CallSiteLineGT applies the GT predicate on the "call_site_line" field.
func CallSiteLineGT(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGT(FieldCallSiteLine, v))
}

// CallSiteLineGTE applies the GTE predicate on the "call_site_line" field.
func CallSiteLineGTE(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGTE(FieldCallSiteLine, v))
}

// CallSiteLineLT applies the LT predicate on the "call_site_line" field.
func CallSiteLineLT(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLT(FieldCallSiteLine, v))
}

// CallSiteLineLTE applies the LTE predicate on the "call_site_line" field.
func CallSiteLineLTE(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLTE(FieldCallSiteLine, v))
}

// CallSiteColumnEQ applies the EQ predicate on the "call_site_column" field.
func CallSiteColumnEQ(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCallSiteColumn, v))
}

// CallSiteColumnNEQ applies the NEQ predicate on the "call_site_column" field.
func CallSiteColumnNEQ(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldCallSiteColumn, v))
}

// CallSiteColumnIn applies the In predicate on the "call_site_column" field.
func CallSiteColumnIn(vs ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIn(FieldCallSiteColumn, vs...))
}

// CallSiteColumnNotIn applies the NotIn predicate on the "call_site_column" field.
func CallSiteColumnNotIn(vs ...int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotIn(FieldCallSiteColumn, vs...))
}

// CallSiteColumnGT applies the GT predicate on the "call_site_column" field.
func CallSiteColumnGT(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGT(FieldCallSiteColumn, v))
}

// CallSiteColumnGTE applies the GTE predicate on the "call_site_column" field.
func CallSiteColumnGTE(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGTE(FieldCallSiteColumn, v))
}

// CallSiteColumnLT applies the LT predicate on the "call_site_column" field.
func CallSiteColumnLT(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLT(FieldCallSiteColumn, v))
}

// CallSiteColumnLTE applies the LTE predicate on the "call_site_column" field.
func CallSiteColumnLTE(v int) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLTE(FieldCallSiteColumn, v))
}

// CallTypeEQ applies the EQ predicate on the "call_type" field.
func CallTypeEQ(v CallType) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCallType, v))
}

// CallTypeNEQ applies the NEQ predicate on the "call_type" field.
func CallTypeNEQ(v CallType) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldCallType, v))
}

// CallTypeIn applies the In predicate on the "call_type" field.
func CallTypeIn(vs ...CallType) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIn(FieldCallType, vs...))
}

// CallTypeNotIn applies the NotIn predicate on the "call_type" field.
func CallTypeNotIn(vs ...CallType) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotIn(FieldCallType, vs...))
}

// IsConditionalEQ applies the EQ predicate on the "is_conditional" field.
func IsConditionalEQ(v bool) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldIsConditional, v))
}

// IsConditionalNEQ applies the NEQ predicate on the "is_conditional" field.
func IsConditionalNEQ(v bool) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldIsConditional, v))
}

// ArgumentsIsNil applies the IsNil predicate on the "arguments" field.
func ArgumentsIsNil() predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIsNull(FieldArguments))
}

// ArgumentsNotNil applies the NotNil predicate on the "arguments" field.
func ArgumentsNotNil() predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotNull(FieldArguments))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CallRelationship {
	return predicate.CallRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// HasCaller applies the HasEdge predicate on the "caller" edge.
func HasCaller() predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CallerTable, CallerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallerWith applies the HasEdge predicate on the "caller" edge with a given conditions (other predicates).
func HasCallerWith(preds ...predicate.Symbol) predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := newCallerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallee applies the HasEdge predicate on the "callee" edge.
func HasCallee() predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CalleeTable, CalleeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCalleeWith applies the HasEdge predicate on the "callee" edge with a given conditions (other predicates).
func HasCalleeWith(preds ...predicate.Symbol) predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := newCalleeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallSiteFile applies the HasEdge predicate on the "call_site_file" edge.
func HasCallSiteFile() predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CallSiteFileTable, CallSiteFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallSiteFileWith applies the HasEdge predicate on the "call_site_file" edge with a given conditions (other predicates).
func HasCallSiteFileWith(preds ...predicate.File) predicate.CallRelationship {
	return predicate.CallRelationship(func(s *sql.Selector) {
		step := newCallSiteFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CallRelationship) predicate.CallRelationship {
	return predicate.CallRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CallRelationship) predicate.CallRelationship {
	return predicate.CallRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CallRelationship) predicate.CallRelationship {
	return predicate.CallRelationship(sql.NotPredicates(p))
}
