// Code generated by ent, DO NOT EDIT.

package callrelationship

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the callrelationship type in the database.
	Label = "call_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCallSiteLine holds the string denoting the call_site_line field in the database.
	FieldCallSiteLine = "call_site_line"
	// FieldCallSiteColumn holds the string denoting the call_site_column field in the database.
	FieldCallSiteColumn = "call_site_column"
	// FieldCallType holds the string denoting the call_type field in the database.
	FieldCallType = "call_type"
	// FieldIsConditional holds the string denoting the is_conditional field in the database.
	FieldIsConditional = "is_conditional"
	// FieldArguments holds the string denoting the arguments field in the database.
	FieldArguments = "arguments"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCaller holds the string denoting the caller edge name in mutations.
	EdgeCaller = "caller"
	// EdgeCallee holds the string denoting the callee edge name in mutations.
	EdgeCallee = "callee"
	// EdgeCallSiteFile holds the string denoting the call_site_file edge name in mutations.
	EdgeCallSiteFile = "call_site_file"
	// Table holds the table name of the callrelationship in the database.
	Table = "call_relationships"
	// CallerTable is the table that holds the caller relation/edge.
	CallerTable = "call_relationships"
	// CallerInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	CallerInverseTable = "symbols"
	// CallerColumn is the table column denoting the caller relation/edge.
	CallerColumn = "caller_id"
	// CalleeTable is the table that holds the callee relation/edge.
	CalleeTable = "call_relationships"
	// CalleeInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	CalleeInverseTable = "symbols"
	// CalleeColumn is the table column denoting the callee relation/edge.
	CalleeColumn = "callee_id"
	// CallSiteFileTable is the table that holds the call_site_file relation/edge.
	CallSiteFileTable = "call_relationships"
	// CallSiteFileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	CallSiteFileInverseTable = "files"
	// CallSiteFileColumn is the table column denoting the call_site_file relation/edge.
	CallSiteFileColumn = "call_site_file_id"
)

// Columns holds all SQL columns for callrelationship fields.
var Columns = []string{
	FieldID,
	FieldCallSiteLine,
	FieldCallSiteColumn,
	FieldCallType,
	FieldIsConditional,
	FieldArguments,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "call_relationships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"call_site_file_id",
	"caller_id",
	"callee_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CallSiteLineValidator is a validator for the "call_site_line" field. It is called by the builders before save.
	CallSiteLineValidator func(int) error
	// CallSiteColumnValidator is a validator for the "call_site_column" field. It is called by the builders before save.
	CallSiteColumnValidator func(int) error
	// DefaultIsConditional holds the default value on creation for the "is_conditional" field.
	DefaultIsConditional bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// CallType defines the type for the "call_type" enum field.
type CallType string

// CallType values.
const (
	CallTypeDirect      CallType = "direct"
	CallTypeMethod      CallType = "method"
	CallTypeConstructor CallType = "constructor"
	CallTypeDynamic     CallType = "dynamic"
	CallTypeAsync       CallType = "async"
)

func (ct CallType) String() string {
	return string(ct)
}

// CallTypeValidator is a validator for the "call_type" field enum values. It is called by the builders before save.
func CallTypeValidator(ct CallType) error {
	switch ct {
	case CallTypeDirect, CallTypeMethod, CallTypeConstructor, CallTypeDynamic, CallTypeAsync:
		return nil
	default:
		return fmt.Errorf("callrelationship: invalid enum value for call_type field: %q", ct)
	}
}

// OrderOption defines the ordering options for the CallRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCallSiteLine orders the results by the call_site_line field.
func ByCallSiteLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallSiteLine, opts...).ToFunc()
}

// ByCallSiteColumn orders the results by the call_site_column field.
func ByCallSiteColumn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallSiteColumn, opts...).ToFunc()
}

// ByCallType orders the results by the call_type field.
func ByCallType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallType, opts...).ToFunc()
}

// ByIsConditional orders the results by the is_conditional field.
func ByIsConditional(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsConditional, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCallerField orders the results by caller field.
func ByCallerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCalleeField orders the results by callee field.
func ByCalleeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCalleeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCallSiteFileField orders the results by call_site_file field.
func ByCallSiteFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallSiteFileStep(), sql.OrderByField(field, opts...))
	}
}
func newCallerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CallerTable, CallerColumn),
	)
}
func newCalleeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CalleeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CalleeTable, CalleeColumn),
	)
}
func newCallSiteFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallSiteFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CallSiteFileTable, CallSiteFileColumn),
	)
}
