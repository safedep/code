// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// ASTNodeUpdate is the builder for updating ASTNode entities.
type ASTNodeUpdate struct {
	config
	hooks    []Hook
	mutation *ASTNodeMutation
}

// Where appends a list predicates to the ASTNodeUpdate builder.
func (_u *ASTNodeUpdate) Where(ps ...predicate.ASTNode) *ASTNodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetNodeType sets the "node_type" field.
func (_u *ASTNodeUpdate) SetNodeType(v astnode.NodeType) *ASTNodeUpdate {
	_u.mutation.SetNodeType(v)
	return _u
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableNodeType(v *astnode.NodeType) *ASTNodeUpdate {
	if v != nil {
		_u.SetNodeType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ASTNodeUpdate) SetName(v string) *ASTNodeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableName(v *string) *ASTNodeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *ASTNodeUpdate) ClearName() *ASTNodeUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetQualifiedName sets the "qualified_name" field.
func (_u *ASTNodeUpdate) SetQualifiedName(v string) *ASTNodeUpdate {
	_u.mutation.SetQualifiedName(v)
	return _u
}

// SetNillableQualifiedName sets the "qualified_name" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableQualifiedName(v *string) *ASTNodeUpdate {
	if v != nil {
		_u.SetQualifiedName(*v)
	}
	return _u
}

// ClearQualifiedName clears the value of the "qualified_name" field.
func (_u *ASTNodeUpdate) ClearQualifiedName() *ASTNodeUpdate {
	_u.mutation.ClearQualifiedName()
	return _u
}

// SetStartLine sets the "start_line" field.
func (_u *ASTNodeUpdate) SetStartLine(v int) *ASTNodeUpdate {
	_u.mutation.ResetStartLine()
	_u.mutation.SetStartLine(v)
	return _u
}

// SetNillableStartLine sets the "start_line" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableStartLine(v *int) *ASTNodeUpdate {
	if v != nil {
		_u.SetStartLine(*v)
	}
	return _u
}

// AddStartLine adds value to the "start_line" field.
func (_u *ASTNodeUpdate) AddStartLine(v int) *ASTNodeUpdate {
	_u.mutation.AddStartLine(v)
	return _u
}

// SetEndLine sets the "end_line" field.
func (_u *ASTNodeUpdate) SetEndLine(v int) *ASTNodeUpdate {
	_u.mutation.ResetEndLine()
	_u.mutation.SetEndLine(v)
	return _u
}

// SetNillableEndLine sets the "end_line" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableEndLine(v *int) *ASTNodeUpdate {
	if v != nil {
		_u.SetEndLine(*v)
	}
	return _u
}

// AddEndLine adds value to the "end_line" field.
func (_u *ASTNodeUpdate) AddEndLine(v int) *ASTNodeUpdate {
	_u.mutation.AddEndLine(v)
	return _u
}

// SetStartColumn sets the "start_column" field.
func (_u *ASTNodeUpdate) SetStartColumn(v int) *ASTNodeUpdate {
	_u.mutation.ResetStartColumn()
	_u.mutation.SetStartColumn(v)
	return _u
}

// SetNillableStartColumn sets the "start_column" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableStartColumn(v *int) *ASTNodeUpdate {
	if v != nil {
		_u.SetStartColumn(*v)
	}
	return _u
}

// AddStartColumn adds value to the "start_column" field.
func (_u *ASTNodeUpdate) AddStartColumn(v int) *ASTNodeUpdate {
	_u.mutation.AddStartColumn(v)
	return _u
}

// SetEndColumn sets the "end_column" field.
func (_u *ASTNodeUpdate) SetEndColumn(v int) *ASTNodeUpdate {
	_u.mutation.ResetEndColumn()
	_u.mutation.SetEndColumn(v)
	return _u
}

// SetNillableEndColumn sets the "end_column" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableEndColumn(v *int) *ASTNodeUpdate {
	if v != nil {
		_u.SetEndColumn(*v)
	}
	return _u
}

// AddEndColumn adds value to the "end_column" field.
func (_u *ASTNodeUpdate) AddEndColumn(v int) *ASTNodeUpdate {
	_u.mutation.AddEndColumn(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *ASTNodeUpdate) SetContent(v string) *ASTNodeUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableContent(v *string) *ASTNodeUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *ASTNodeUpdate) ClearContent() *ASTNodeUpdate {
	_u.mutation.ClearContent()
	return _u
}

// SetTreeSitterType sets the "tree_sitter_type" field.
func (_u *ASTNodeUpdate) SetTreeSitterType(v string) *ASTNodeUpdate {
	_u.mutation.SetTreeSitterType(v)
	return _u
}

// SetNillableTreeSitterType sets the "tree_sitter_type" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableTreeSitterType(v *string) *ASTNodeUpdate {
	if v != nil {
		_u.SetTreeSitterType(*v)
	}
	return _u
}

// ClearTreeSitterType clears the value of the "tree_sitter_type" field.
func (_u *ASTNodeUpdate) ClearTreeSitterType() *ASTNodeUpdate {
	_u.mutation.ClearTreeSitterType()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ASTNodeUpdate) SetMetadata(v map[string]interface{}) *ASTNodeUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ASTNodeUpdate) ClearMetadata() *ASTNodeUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ASTNodeUpdate) SetCreatedAt(v time.Time) *ASTNodeUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableCreatedAt(v *time.Time) *ASTNodeUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *ASTNodeUpdate) SetFileID(id int) *ASTNodeUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableFileID(id *int) *ASTNodeUpdate {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *ASTNodeUpdate) SetFile(v *File) *ASTNodeUpdate {
	return _u.SetFileID(v.ID)
}

// AddChildIDs adds the "children" edge to the ASTNode entity by IDs.
func (_u *ASTNodeUpdate) AddChildIDs(ids ...int) *ASTNodeUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the ASTNode entity.
func (_u *ASTNodeUpdate) AddChildren(v ...*ASTNode) *ASTNodeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the ASTNode entity by ID.
func (_u *ASTNodeUpdate) SetParentID(id int) *ASTNodeUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the ASTNode entity by ID if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableParentID(id *int) *ASTNodeUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the ASTNode entity.
func (_u *ASTNodeUpdate) SetParent(v *ASTNode) *ASTNodeUpdate {
	return _u.SetParentID(v.ID)
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_u *ASTNodeUpdate) SetSymbolID(id int) *ASTNodeUpdate {
	_u.mutation.SetSymbolID(id)
	return _u
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *ASTNodeUpdate) SetNillableSymbolID(id *int) *ASTNodeUpdate {
	if id != nil {
		_u = _u.SetSymbolID(*id)
	}
	return _u
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_u *ASTNodeUpdate) SetSymbol(v *Symbol) *ASTNodeUpdate {
	return _u.SetSymbolID(v.ID)
}

// AddReferenceIDs adds the "references" edge to the SymbolReference entity by IDs.
func (_u *ASTNodeUpdate) AddReferenceIDs(ids ...int) *ASTNodeUpdate {
	_u.mutation.AddReferenceIDs(ids...)
	return _u
}

// AddReferences adds the "references" edges to the SymbolReference entity.
func (_u *ASTNodeUpdate) AddReferences(v ...*SymbolReference) *ASTNodeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReferenceIDs(ids...)
}

// Mutation returns the ASTNodeMutation object of the builder.
func (_u *ASTNodeUpdate) Mutation() *ASTNodeMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ASTNodeUpdate) ClearFile() *ASTNodeUpdate {
	_u.mutation.ClearFile()
	return _u
}

// ClearChildren clears all "children" edges to the ASTNode entity.
func (_u *ASTNodeUpdate) ClearChildren() *ASTNodeUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to ASTNode entities by IDs.
func (_u *ASTNodeUpdate) RemoveChildIDs(ids ...int) *ASTNodeUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to ASTNode entities.
func (_u *ASTNodeUpdate) RemoveChildren(v ...*ASTNode) *ASTNodeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the ASTNode entity.
func (_u *ASTNodeUpdate) ClearParent() *ASTNodeUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (_u *ASTNodeUpdate) ClearSymbol() *ASTNodeUpdate {
	_u.mutation.ClearSymbol()
	return _u
}

// ClearReferences clears all "references" edges to the SymbolReference entity.
func (_u *ASTNodeUpdate) ClearReferences() *ASTNodeUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// RemoveReferenceIDs removes the "references" edge to SymbolReference entities by IDs.
func (_u *ASTNodeUpdate) RemoveReferenceIDs(ids ...int) *ASTNodeUpdate {
	_u.mutation.RemoveReferenceIDs(ids...)
	return _u
}

// RemoveReferences removes "references" edges to SymbolReference entities.
func (_u *ASTNodeUpdate) RemoveReferences(v ...*SymbolReference) *ASTNodeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReferenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ASTNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ASTNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ASTNodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ASTNodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ASTNodeUpdate) check() error {
	if v, ok := _u.mutation.NodeType(); ok {
		if err := astnode.NodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "node_type", err: fmt.Errorf(`ent: validator failed for field "ASTNode.node_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StartLine(); ok {
		if err := astnode.StartLineValidator(v); err != nil {
			return &ValidationError{Name: "start_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EndLine(); ok {
		if err := astnode.EndLineValidator(v); err != nil {
			return &ValidationError{Name: "end_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StartColumn(); ok {
		if err := astnode.StartColumnValidator(v); err != nil {
			return &ValidationError{Name: "start_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_column": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EndColumn(); ok {
		if err := astnode.EndColumnValidator(v); err != nil {
			return &ValidationError{Name: "end_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_column": %w`, err)}
		}
	}
	return nil
}

func (_u *ASTNodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(astnode.Table, astnode.Columns, sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.NodeType(); ok {
		_spec.SetField(astnode.FieldNodeType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(astnode.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(astnode.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.QualifiedName(); ok {
		_spec.SetField(astnode.FieldQualifiedName, field.TypeString, value)
	}
	if _u.mutation.QualifiedNameCleared() {
		_spec.ClearField(astnode.FieldQualifiedName, field.TypeString)
	}
	if value, ok := _u.mutation.StartLine(); ok {
		_spec.SetField(astnode.FieldStartLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStartLine(); ok {
		_spec.AddField(astnode.FieldStartLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndLine(); ok {
		_spec.SetField(astnode.FieldEndLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEndLine(); ok {
		_spec.AddField(astnode.FieldEndLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StartColumn(); ok {
		_spec.SetField(astnode.FieldStartColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStartColumn(); ok {
		_spec.AddField(astnode.FieldStartColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndColumn(); ok {
		_spec.SetField(astnode.FieldEndColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEndColumn(); ok {
		_spec.AddField(astnode.FieldEndColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(astnode.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(astnode.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.TreeSitterType(); ok {
		_spec.SetField(astnode.FieldTreeSitterType, field.TypeString, value)
	}
	if _u.mutation.TreeSitterTypeCleared() {
		_spec.ClearField(astnode.FieldTreeSitterType, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(astnode.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(astnode.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(astnode.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.FileTable,
			Columns: []string{astnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.FileTable,
			Columns: []string{astnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.ParentTable,
			Columns: []string{astnode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.ParentTable,
			Columns: []string{astnode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astnode.SymbolTable,
			Columns: []string{astnode.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astnode.SymbolTable,
			Columns: []string{astnode.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReferencesIDs(); len(nodes) > 0 && !_u.mutation.ReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ASTNodeUpdateOne is the builder for updating a single ASTNode entity.
type ASTNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ASTNodeMutation
}

// SetNodeType sets the "node_type" field.
func (_u *ASTNodeUpdateOne) SetNodeType(v astnode.NodeType) *ASTNodeUpdateOne {
	_u.mutation.SetNodeType(v)
	return _u
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableNodeType(v *astnode.NodeType) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetNodeType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ASTNodeUpdateOne) SetName(v string) *ASTNodeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableName(v *string) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *ASTNodeUpdateOne) ClearName() *ASTNodeUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetQualifiedName sets the "qualified_name" field.
func (_u *ASTNodeUpdateOne) SetQualifiedName(v string) *ASTNodeUpdateOne {
	_u.mutation.SetQualifiedName(v)
	return _u
}

// SetNillableQualifiedName sets the "qualified_name" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableQualifiedName(v *string) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetQualifiedName(*v)
	}
	return _u
}

// ClearQualifiedName clears the value of the "qualified_name" field.
func (_u *ASTNodeUpdateOne) ClearQualifiedName() *ASTNodeUpdateOne {
	_u.mutation.ClearQualifiedName()
	return _u
}

// SetStartLine sets the "start_line" field.
func (_u *ASTNodeUpdateOne) SetStartLine(v int) *ASTNodeUpdateOne {
	_u.mutation.ResetStartLine()
	_u.mutation.SetStartLine(v)
	return _u
}

// SetNillableStartLine sets the "start_line" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableStartLine(v *int) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetStartLine(*v)
	}
	return _u
}

// AddStartLine adds value to the "start_line" field.
func (_u *ASTNodeUpdateOne) AddStartLine(v int) *ASTNodeUpdateOne {
	_u.mutation.AddStartLine(v)
	return _u
}

// SetEndLine sets the "end_line" field.
func (_u *ASTNodeUpdateOne) SetEndLine(v int) *ASTNodeUpdateOne {
	_u.mutation.ResetEndLine()
	_u.mutation.SetEndLine(v)
	return _u
}

// SetNillableEndLine sets the "end_line" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableEndLine(v *int) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetEndLine(*v)
	}
	return _u
}

// AddEndLine adds value to the "end_line" field.
func (_u *ASTNodeUpdateOne) AddEndLine(v int) *ASTNodeUpdateOne {
	_u.mutation.AddEndLine(v)
	return _u
}

// SetStartColumn sets the "start_column" field.
func (_u *ASTNodeUpdateOne) SetStartColumn(v int) *ASTNodeUpdateOne {
	_u.mutation.ResetStartColumn()
	_u.mutation.SetStartColumn(v)
	return _u
}

// SetNillableStartColumn sets the "start_column" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableStartColumn(v *int) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetStartColumn(*v)
	}
	return _u
}

// AddStartColumn adds value to the "start_column" field.
func (_u *ASTNodeUpdateOne) AddStartColumn(v int) *ASTNodeUpdateOne {
	_u.mutation.AddStartColumn(v)
	return _u
}

// SetEndColumn sets the "end_column" field.
func (_u *ASTNodeUpdateOne) SetEndColumn(v int) *ASTNodeUpdateOne {
	_u.mutation.ResetEndColumn()
	_u.mutation.SetEndColumn(v)
	return _u
}

// SetNillableEndColumn sets the "end_column" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableEndColumn(v *int) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetEndColumn(*v)
	}
	return _u
}

// AddEndColumn adds value to the "end_column" field.
func (_u *ASTNodeUpdateOne) AddEndColumn(v int) *ASTNodeUpdateOne {
	_u.mutation.AddEndColumn(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *ASTNodeUpdateOne) SetContent(v string) *ASTNodeUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableContent(v *string) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *ASTNodeUpdateOne) ClearContent() *ASTNodeUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// SetTreeSitterType sets the "tree_sitter_type" field.
func (_u *ASTNodeUpdateOne) SetTreeSitterType(v string) *ASTNodeUpdateOne {
	_u.mutation.SetTreeSitterType(v)
	return _u
}

// SetNillableTreeSitterType sets the "tree_sitter_type" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableTreeSitterType(v *string) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetTreeSitterType(*v)
	}
	return _u
}

// ClearTreeSitterType clears the value of the "tree_sitter_type" field.
func (_u *ASTNodeUpdateOne) ClearTreeSitterType() *ASTNodeUpdateOne {
	_u.mutation.ClearTreeSitterType()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ASTNodeUpdateOne) SetMetadata(v map[string]interface{}) *ASTNodeUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ASTNodeUpdateOne) ClearMetadata() *ASTNodeUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ASTNodeUpdateOne) SetCreatedAt(v time.Time) *ASTNodeUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableCreatedAt(v *time.Time) *ASTNodeUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *ASTNodeUpdateOne) SetFileID(id int) *ASTNodeUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableFileID(id *int) *ASTNodeUpdateOne {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *ASTNodeUpdateOne) SetFile(v *File) *ASTNodeUpdateOne {
	return _u.SetFileID(v.ID)
}

// AddChildIDs adds the "children" edge to the ASTNode entity by IDs.
func (_u *ASTNodeUpdateOne) AddChildIDs(ids ...int) *ASTNodeUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the ASTNode entity.
func (_u *ASTNodeUpdateOne) AddChildren(v ...*ASTNode) *ASTNodeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the ASTNode entity by ID.
func (_u *ASTNodeUpdateOne) SetParentID(id int) *ASTNodeUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the ASTNode entity by ID if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableParentID(id *int) *ASTNodeUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the ASTNode entity.
func (_u *ASTNodeUpdateOne) SetParent(v *ASTNode) *ASTNodeUpdateOne {
	return _u.SetParentID(v.ID)
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_u *ASTNodeUpdateOne) SetSymbolID(id int) *ASTNodeUpdateOne {
	_u.mutation.SetSymbolID(id)
	return _u
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *ASTNodeUpdateOne) SetNillableSymbolID(id *int) *ASTNodeUpdateOne {
	if id != nil {
		_u = _u.SetSymbolID(*id)
	}
	return _u
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_u *ASTNodeUpdateOne) SetSymbol(v *Symbol) *ASTNodeUpdateOne {
	return _u.SetSymbolID(v.ID)
}

// AddReferenceIDs adds the "references" edge to the SymbolReference entity by IDs.
func (_u *ASTNodeUpdateOne) AddReferenceIDs(ids ...int) *ASTNodeUpdateOne {
	_u.mutation.AddReferenceIDs(ids...)
	return _u
}

// AddReferences adds the "references" edges to the SymbolReference entity.
func (_u *ASTNodeUpdateOne) AddReferences(v ...*SymbolReference) *ASTNodeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReferenceIDs(ids...)
}

// Mutation returns the ASTNodeMutation object of the builder.
func (_u *ASTNodeUpdateOne) Mutation() *ASTNodeMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ASTNodeUpdateOne) ClearFile() *ASTNodeUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// ClearChildren clears all "children" edges to the ASTNode entity.
func (_u *ASTNodeUpdateOne) ClearChildren() *ASTNodeUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to ASTNode entities by IDs.
func (_u *ASTNodeUpdateOne) RemoveChildIDs(ids ...int) *ASTNodeUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to ASTNode entities.
func (_u *ASTNodeUpdateOne) RemoveChildren(v ...*ASTNode) *ASTNodeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the ASTNode entity.
func (_u *ASTNodeUpdateOne) ClearParent() *ASTNodeUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (_u *ASTNodeUpdateOne) ClearSymbol() *ASTNodeUpdateOne {
	_u.mutation.ClearSymbol()
	return _u
}

// ClearReferences clears all "references" edges to the SymbolReference entity.
func (_u *ASTNodeUpdateOne) ClearReferences() *ASTNodeUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// RemoveReferenceIDs removes the "references" edge to SymbolReference entities by IDs.
func (_u *ASTNodeUpdateOne) RemoveReferenceIDs(ids ...int) *ASTNodeUpdateOne {
	_u.mutation.RemoveReferenceIDs(ids...)
	return _u
}

// RemoveReferences removes "references" edges to SymbolReference entities.
func (_u *ASTNodeUpdateOne) RemoveReferences(v ...*SymbolReference) *ASTNodeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReferenceIDs(ids...)
}

// Where appends a list predicates to the ASTNodeUpdate builder.
func (_u *ASTNodeUpdateOne) Where(ps ...predicate.ASTNode) *ASTNodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ASTNodeUpdateOne) Select(field string, fields ...string) *ASTNodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ASTNode entity.
func (_u *ASTNodeUpdateOne) Save(ctx context.Context) (*ASTNode, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ASTNodeUpdateOne) SaveX(ctx context.Context) *ASTNode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ASTNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ASTNodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ASTNodeUpdateOne) check() error {
	if v, ok := _u.mutation.NodeType(); ok {
		if err := astnode.NodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "node_type", err: fmt.Errorf(`ent: validator failed for field "ASTNode.node_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StartLine(); ok {
		if err := astnode.StartLineValidator(v); err != nil {
			return &ValidationError{Name: "start_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EndLine(); ok {
		if err := astnode.EndLineValidator(v); err != nil {
			return &ValidationError{Name: "end_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StartColumn(); ok {
		if err := astnode.StartColumnValidator(v); err != nil {
			return &ValidationError{Name: "start_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_column": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EndColumn(); ok {
		if err := astnode.EndColumnValidator(v); err != nil {
			return &ValidationError{Name: "end_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_column": %w`, err)}
		}
	}
	return nil
}

func (_u *ASTNodeUpdateOne) sqlSave(ctx context.Context) (_node *ASTNode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(astnode.Table, astnode.Columns, sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ASTNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astnode.FieldID)
		for _, f := range fields {
			if !astnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != astnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.NodeType(); ok {
		_spec.SetField(astnode.FieldNodeType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(astnode.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(astnode.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.QualifiedName(); ok {
		_spec.SetField(astnode.FieldQualifiedName, field.TypeString, value)
	}
	if _u.mutation.QualifiedNameCleared() {
		_spec.ClearField(astnode.FieldQualifiedName, field.TypeString)
	}
	if value, ok := _u.mutation.StartLine(); ok {
		_spec.SetField(astnode.FieldStartLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStartLine(); ok {
		_spec.AddField(astnode.FieldStartLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndLine(); ok {
		_spec.SetField(astnode.FieldEndLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEndLine(); ok {
		_spec.AddField(astnode.FieldEndLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StartColumn(); ok {
		_spec.SetField(astnode.FieldStartColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStartColumn(); ok {
		_spec.AddField(astnode.FieldStartColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndColumn(); ok {
		_spec.SetField(astnode.FieldEndColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEndColumn(); ok {
		_spec.AddField(astnode.FieldEndColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(astnode.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(astnode.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.TreeSitterType(); ok {
		_spec.SetField(astnode.FieldTreeSitterType, field.TypeString, value)
	}
	if _u.mutation.TreeSitterTypeCleared() {
		_spec.ClearField(astnode.FieldTreeSitterType, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(astnode.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(astnode.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(astnode.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.FileTable,
			Columns: []string{astnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.FileTable,
			Columns: []string{astnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.ParentTable,
			Columns: []string{astnode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.ParentTable,
			Columns: []string{astnode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astnode.SymbolTable,
			Columns: []string{astnode.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astnode.SymbolTable,
			Columns: []string{astnode.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReferencesIDs(); len(nodes) > 0 && !_u.mutation.ReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ASTNode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
