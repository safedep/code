// Code generated by ent, DO NOT EDIT.

package symbolreference

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the symbolreference type in the database.
	Label = "symbol_reference"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLineNumber holds the string denoting the line_number field in the database.
	FieldLineNumber = "line_number"
	// FieldColumnNumber holds the string denoting the column_number field in the database.
	FieldColumnNumber = "column_number"
	// FieldReferenceType holds the string denoting the reference_type field in the database.
	FieldReferenceType = "reference_type"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSymbol holds the string denoting the symbol edge name in mutations.
	EdgeSymbol = "symbol"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeContextNode holds the string denoting the context_node edge name in mutations.
	EdgeContextNode = "context_node"
	// Table holds the table name of the symbolreference in the database.
	Table = "symbol_references"
	// SymbolTable is the table that holds the symbol relation/edge.
	SymbolTable = "symbol_references"
	// SymbolInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	SymbolInverseTable = "symbols"
	// SymbolColumn is the table column denoting the symbol relation/edge.
	SymbolColumn = "symbol_references"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "symbol_references"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_symbol_references"
	// ContextNodeTable is the table that holds the context_node relation/edge.
	ContextNodeTable = "symbol_references"
	// ContextNodeInverseTable is the table name for the ASTNode entity.
	// It exists in this package in order to avoid circular dependency with the "astnode" package.
	ContextNodeInverseTable = "ast_nodes"
	// ContextNodeColumn is the table column denoting the context_node relation/edge.
	ContextNodeColumn = "context_node_id"
)

// Columns holds all SQL columns for symbolreference fields.
var Columns = []string{
	FieldID,
	FieldLineNumber,
	FieldColumnNumber,
	FieldReferenceType,
	FieldContext,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "symbol_references"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"context_node_id",
	"file_symbol_references",
	"symbol_references",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LineNumberValidator is a validator for the "line_number" field. It is called by the builders before save.
	LineNumberValidator func(int) error
	// ColumnNumberValidator is a validator for the "column_number" field. It is called by the builders before save.
	ColumnNumberValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// ReferenceType defines the type for the "reference_type" enum field.
type ReferenceType string

// ReferenceType values.
const (
	ReferenceTypeRead           ReferenceType = "read"
	ReferenceTypeWrite          ReferenceType = "write"
	ReferenceTypeCall           ReferenceType = "call"
	ReferenceTypeDeclaration    ReferenceType = "declaration"
	ReferenceTypeTypeAnnotation ReferenceType = "type_annotation"
)

func (rt ReferenceType) String() string {
	return string(rt)
}

// ReferenceTypeValidator is a validator for the "reference_type" field enum values. It is called by the builders before save.
func ReferenceTypeValidator(rt ReferenceType) error {
	switch rt {
	case ReferenceTypeRead, ReferenceTypeWrite, ReferenceTypeCall, ReferenceTypeDeclaration, ReferenceTypeTypeAnnotation:
		return nil
	default:
		return fmt.Errorf("symbolreference: invalid enum value for reference_type field: %q", rt)
	}
}

// OrderOption defines the ordering options for the SymbolReference queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLineNumber orders the results by the line_number field.
func ByLineNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineNumber, opts...).ToFunc()
}

// ByColumnNumber orders the results by the column_number field.
func ByColumnNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColumnNumber, opts...).ToFunc()
}

// ByReferenceType orders the results by the reference_type field.
func ByReferenceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceType, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySymbolField orders the results by symbol field.
func BySymbolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSymbolStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByContextNodeField orders the results by context_node field.
func ByContextNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContextNodeStep(), sql.OrderByField(field, opts...))
	}
}
func newSymbolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SymbolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SymbolTable, SymbolColumn),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newContextNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContextNodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContextNodeTable, ContextNodeColumn),
	)
}
