// Code generated by ent, DO NOT EDIT.

package symbolreference

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLTE(FieldID, id))
}

// LineNumber applies equality check predicate on the "line_number" field. It's identical to LineNumberEQ.
func LineNumber(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldLineNumber, v))
}

// ColumnNumber applies equality check predicate on the "column_number" field. It's identical to ColumnNumberEQ.
func ColumnNumber(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldColumnNumber, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldContext, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldCreatedAt, v))
}

// LineNumberEQ applies the EQ predicate on the "line_number" field.
func LineNumberEQ(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldLineNumber, v))
}

// LineNumberNEQ applies the NEQ predicate on the "line_number" field.
func LineNumberNEQ(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldLineNumber, v))
}

// LineNumberIn applies the In predicate on the "line_number" field.
func LineNumberIn(vs ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldLineNumber, vs...))
}

// LineNumberNotIn applies the NotIn predicate on the "line_number" field.
func LineNumberNotIn(vs ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldLineNumber, vs...))
}

// LineNumberGT applies the GT predicate on the "line_number" field.
func LineNumberGT(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGT(FieldLineNumber, v))
}

// LineNumberGTE applies the GTE predicate on the "line_number" field.
func LineNumberGTE(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGTE(FieldLineNumber, v))
}

// LineNumberLT applies the LT predicate on the "line_number" field.
func LineNumberLT(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLT(FieldLineNumber, v))
}

// LineNumberLTE applies the LTE predicate on the "line_number" field.
func LineNumberLTE(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLTE(FieldLineNumber, v))
}

// ColumnNumberEQ applies the EQ predicate on the "column_number" field.
func ColumnNumberEQ(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldColumnNumber, v))
}

// ColumnNumberNEQ applies the NEQ predicate on the "column_number" field.
func ColumnNumberNEQ(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldColumnNumber, v))
}

// ColumnNumberIn applies the In predicate on the "column_number" field.
func ColumnNumberIn(vs ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldColumnNumber, vs...))
}

// ColumnNumberNotIn applies the NotIn predicate on the "column_number" field.
func ColumnNumberNotIn(vs ...int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldColumnNumber, vs...))
}

// ColumnNumberGT applies the GT predicate on the "column_number" field.
func ColumnNumberGT(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGT(FieldColumnNumber, v))
}

// ColumnNumberGTE applies the GTE predicate on the "column_number" field.
func ColumnNumberGTE(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGTE(FieldColumnNumber, v))
}

// ColumnNumberLT applies the LT predicate on the "column_number" field.
func ColumnNumberLT(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLT(FieldColumnNumber, v))
}

// ColumnNumberLTE applies the LTE predicate on the "column_number" field.
func ColumnNumberLTE(v int) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLTE(FieldColumnNumber, v))
}

// ReferenceTypeEQ applies the EQ predicate on the "reference_type" field.
func ReferenceTypeEQ(v ReferenceType) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldReferenceType, v))
}

// ReferenceTypeNEQ applies the NEQ predicate on the "reference_type" field.
func ReferenceTypeNEQ(v ReferenceType) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldReferenceType, v))
}

// ReferenceTypeIn applies the In predicate on the "reference_type" field.
func ReferenceTypeIn(vs ...ReferenceType) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldReferenceType, vs...))
}

// ReferenceTypeNotIn applies the NotIn predicate on the "reference_type" field.
func ReferenceTypeNotIn(vs ...ReferenceType) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldReferenceType, vs...))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldHasSuffix(FieldContext, v))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotNull(FieldContext))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldContainsFold(FieldContext, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SymbolReference {
	return predicate.SymbolReference(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSymbol applies the HasEdge predicate on the "symbol" edge.
func HasSymbol() predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SymbolTable, SymbolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymbolWith applies the HasEdge predicate on the "symbol" edge with a given conditions (other predicates).
func HasSymbolWith(preds ...predicate.Symbol) predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := newSymbolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContextNode applies the HasEdge predicate on the "context_node" edge.
func HasContextNode() predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContextNodeTable, ContextNodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContextNodeWith applies the HasEdge predicate on the "context_node" edge with a given conditions (other predicates).
func HasContextNodeWith(preds ...predicate.ASTNode) predicate.SymbolReference {
	return predicate.SymbolReference(func(s *sql.Selector) {
		step := newContextNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SymbolReference) predicate.SymbolReference {
	return predicate.SymbolReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SymbolReference) predicate.SymbolReference {
	return predicate.SymbolReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SymbolReference) predicate.SymbolReference {
	return predicate.SymbolReference(sql.NotPredicates(p))
}
