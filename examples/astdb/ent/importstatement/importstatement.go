// Code generated by ent, DO NOT EDIT.

package importstatement

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the importstatement type in the database.
	Label = "import_statement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModuleName holds the string denoting the module_name field in the database.
	FieldModuleName = "module_name"
	// FieldImportAlias holds the string denoting the import_alias field in the database.
	FieldImportAlias = "import_alias"
	// FieldImportType holds the string denoting the import_type field in the database.
	FieldImportType = "import_type"
	// FieldLineNumber holds the string denoting the line_number field in the database.
	FieldLineNumber = "line_number"
	// FieldIsDynamic holds the string denoting the is_dynamic field in the database.
	FieldIsDynamic = "is_dynamic"
	// FieldImportedNames holds the string denoting the imported_names field in the database.
	FieldImportedNames = "imported_names"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeImportedSymbol holds the string denoting the imported_symbol edge name in mutations.
	EdgeImportedSymbol = "imported_symbol"
	// Table holds the table name of the importstatement in the database.
	Table = "import_statements"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "import_statements"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_imports"
	// ImportedSymbolTable is the table that holds the imported_symbol relation/edge.
	ImportedSymbolTable = "import_statements"
	// ImportedSymbolInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	ImportedSymbolInverseTable = "symbols"
	// ImportedSymbolColumn is the table column denoting the imported_symbol relation/edge.
	ImportedSymbolColumn = "imported_symbol_id"
)

// Columns holds all SQL columns for importstatement fields.
var Columns = []string{
	FieldID,
	FieldModuleName,
	FieldImportAlias,
	FieldImportType,
	FieldLineNumber,
	FieldIsDynamic,
	FieldImportedNames,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "import_statements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"file_imports",
	"imported_symbol_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ModuleNameValidator is a validator for the "module_name" field. It is called by the builders before save.
	ModuleNameValidator func(string) error
	// LineNumberValidator is a validator for the "line_number" field. It is called by the builders before save.
	LineNumberValidator func(int) error
	// DefaultIsDynamic holds the default value on creation for the "is_dynamic" field.
	DefaultIsDynamic bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// ImportType defines the type for the "import_type" enum field.
type ImportType string

// ImportType values.
const (
	ImportTypeDefault   ImportType = "default"
	ImportTypeNamed     ImportType = "named"
	ImportTypeNamespace ImportType = "namespace"
	ImportTypeWildcard  ImportType = "wildcard"
)

func (it ImportType) String() string {
	return string(it)
}

// ImportTypeValidator is a validator for the "import_type" field enum values. It is called by the builders before save.
func ImportTypeValidator(it ImportType) error {
	switch it {
	case ImportTypeDefault, ImportTypeNamed, ImportTypeNamespace, ImportTypeWildcard:
		return nil
	default:
		return fmt.Errorf("importstatement: invalid enum value for import_type field: %q", it)
	}
}

// OrderOption defines the ordering options for the ImportStatement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModuleName orders the results by the module_name field.
func ByModuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleName, opts...).ToFunc()
}

// ByImportAlias orders the results by the import_alias field.
func ByImportAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportAlias, opts...).ToFunc()
}

// ByImportType orders the results by the import_type field.
func ByImportType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportType, opts...).ToFunc()
}

// ByLineNumber orders the results by the line_number field.
func ByLineNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineNumber, opts...).ToFunc()
}

// ByIsDynamic orders the results by the is_dynamic field.
func ByIsDynamic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDynamic, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByImportedSymbolField orders the results by imported_symbol field.
func ByImportedSymbolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImportedSymbolStep(), sql.OrderByField(field, opts...))
	}
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newImportedSymbolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImportedSymbolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ImportedSymbolTable, ImportedSymbolColumn),
	)
}
