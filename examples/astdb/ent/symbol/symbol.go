// Code generated by ent, DO NOT EDIT.

package symbol

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the symbol type in the database.
	Label = "symbol"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQualifiedName holds the string denoting the qualified_name field in the database.
	FieldQualifiedName = "qualified_name"
	// FieldSymbolType holds the string denoting the symbol_type field in the database.
	FieldSymbolType = "symbol_type"
	// FieldScopeType holds the string denoting the scope_type field in the database.
	FieldScopeType = "scope_type"
	// FieldAccessModifier holds the string denoting the access_modifier field in the database.
	FieldAccessModifier = "access_modifier"
	// FieldIsStatic holds the string denoting the is_static field in the database.
	FieldIsStatic = "is_static"
	// FieldIsAbstract holds the string denoting the is_abstract field in the database.
	FieldIsAbstract = "is_abstract"
	// FieldIsAsync holds the string denoting the is_async field in the database.
	FieldIsAsync = "is_async"
	// FieldLineNumber holds the string denoting the line_number field in the database.
	FieldLineNumber = "line_number"
	// FieldColumnNumber holds the string denoting the column_number field in the database.
	FieldColumnNumber = "column_number"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeAstNode holds the string denoting the ast_node edge name in mutations.
	EdgeAstNode = "ast_node"
	// EdgeCallsMade holds the string denoting the calls_made edge name in mutations.
	EdgeCallsMade = "calls_made"
	// EdgeCallsReceived holds the string denoting the calls_received edge name in mutations.
	EdgeCallsReceived = "calls_received"
	// EdgeReferences holds the string denoting the references edge name in mutations.
	EdgeReferences = "references"
	// EdgeChildClasses holds the string denoting the child_classes edge name in mutations.
	EdgeChildClasses = "child_classes"
	// EdgeParentClasses holds the string denoting the parent_classes edge name in mutations.
	EdgeParentClasses = "parent_classes"
	// EdgeImportReferences holds the string denoting the import_references edge name in mutations.
	EdgeImportReferences = "import_references"
	// Table holds the table name of the symbol in the database.
	Table = "symbols"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "symbols"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_symbols"
	// AstNodeTable is the table that holds the ast_node relation/edge.
	AstNodeTable = "symbols"
	// AstNodeInverseTable is the table name for the ASTNode entity.
	// It exists in this package in order to avoid circular dependency with the "astnode" package.
	AstNodeInverseTable = "ast_nodes"
	// AstNodeColumn is the table column denoting the ast_node relation/edge.
	AstNodeColumn = "ast_node_symbol"
	// CallsMadeTable is the table that holds the calls_made relation/edge.
	CallsMadeTable = "call_relationships"
	// CallsMadeInverseTable is the table name for the CallRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "callrelationship" package.
	CallsMadeInverseTable = "call_relationships"
	// CallsMadeColumn is the table column denoting the calls_made relation/edge.
	CallsMadeColumn = "caller_id"
	// CallsReceivedTable is the table that holds the calls_received relation/edge.
	CallsReceivedTable = "call_relationships"
	// CallsReceivedInverseTable is the table name for the CallRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "callrelationship" package.
	CallsReceivedInverseTable = "call_relationships"
	// CallsReceivedColumn is the table column denoting the calls_received relation/edge.
	CallsReceivedColumn = "callee_id"
	// ReferencesTable is the table that holds the references relation/edge.
	ReferencesTable = "symbol_references"
	// ReferencesInverseTable is the table name for the SymbolReference entity.
	// It exists in this package in order to avoid circular dependency with the "symbolreference" package.
	ReferencesInverseTable = "symbol_references"
	// ReferencesColumn is the table column denoting the references relation/edge.
	ReferencesColumn = "symbol_references"
	// ChildClassesTable is the table that holds the child_classes relation/edge.
	ChildClassesTable = "inheritance_relationships"
	// ChildClassesInverseTable is the table name for the InheritanceRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "inheritancerelationship" package.
	ChildClassesInverseTable = "inheritance_relationships"
	// ChildClassesColumn is the table column denoting the child_classes relation/edge.
	ChildClassesColumn = "parent_id"
	// ParentClassesTable is the table that holds the parent_classes relation/edge.
	ParentClassesTable = "inheritance_relationships"
	// ParentClassesInverseTable is the table name for the InheritanceRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "inheritancerelationship" package.
	ParentClassesInverseTable = "inheritance_relationships"
	// ParentClassesColumn is the table column denoting the parent_classes relation/edge.
	ParentClassesColumn = "child_id"
	// ImportReferencesTable is the table that holds the import_references relation/edge.
	ImportReferencesTable = "import_statements"
	// ImportReferencesInverseTable is the table name for the ImportStatement entity.
	// It exists in this package in order to avoid circular dependency with the "importstatement" package.
	ImportReferencesInverseTable = "import_statements"
	// ImportReferencesColumn is the table column denoting the import_references relation/edge.
	ImportReferencesColumn = "imported_symbol_id"
)

// Columns holds all SQL columns for symbol fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldQualifiedName,
	FieldSymbolType,
	FieldScopeType,
	FieldAccessModifier,
	FieldIsStatic,
	FieldIsAbstract,
	FieldIsAsync,
	FieldLineNumber,
	FieldColumnNumber,
	FieldMetadata,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "symbols"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ast_node_symbol",
	"file_symbols",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// QualifiedNameValidator is a validator for the "qualified_name" field. It is called by the builders before save.
	QualifiedNameValidator func(string) error
	// DefaultIsStatic holds the default value on creation for the "is_static" field.
	DefaultIsStatic bool
	// DefaultIsAbstract holds the default value on creation for the "is_abstract" field.
	DefaultIsAbstract bool
	// DefaultIsAsync holds the default value on creation for the "is_async" field.
	DefaultIsAsync bool
	// LineNumberValidator is a validator for the "line_number" field. It is called by the builders before save.
	LineNumberValidator func(int) error
	// ColumnNumberValidator is a validator for the "column_number" field. It is called by the builders before save.
	ColumnNumberValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// SymbolType defines the type for the "symbol_type" enum field.
type SymbolType string

// SymbolType values.
const (
	SymbolTypeFunction  SymbolType = "function"
	SymbolTypeClass     SymbolType = "class"
	SymbolTypeMethod    SymbolType = "method"
	SymbolTypeVariable  SymbolType = "variable"
	SymbolTypeModule    SymbolType = "module"
	SymbolTypeInterface SymbolType = "interface"
	SymbolTypeEnum      SymbolType = "enum"
)

func (st SymbolType) String() string {
	return string(st)
}

// SymbolTypeValidator is a validator for the "symbol_type" field enum values. It is called by the builders before save.
func SymbolTypeValidator(st SymbolType) error {
	switch st {
	case SymbolTypeFunction, SymbolTypeClass, SymbolTypeMethod, SymbolTypeVariable, SymbolTypeModule, SymbolTypeInterface, SymbolTypeEnum:
		return nil
	default:
		return fmt.Errorf("symbol: invalid enum value for symbol_type field: %q", st)
	}
}

// ScopeType defines the type for the "scope_type" enum field.
type ScopeType string

// ScopeType values.
const (
	ScopeTypeGlobal   ScopeType = "global"
	ScopeTypeClass    ScopeType = "class"
	ScopeTypeFunction ScopeType = "function"
	ScopeTypeBlock    ScopeType = "block"
	ScopeTypeModule   ScopeType = "module"
)

func (st ScopeType) String() string {
	return string(st)
}

// ScopeTypeValidator is a validator for the "scope_type" field enum values. It is called by the builders before save.
func ScopeTypeValidator(st ScopeType) error {
	switch st {
	case ScopeTypeGlobal, ScopeTypeClass, ScopeTypeFunction, ScopeTypeBlock, ScopeTypeModule:
		return nil
	default:
		return fmt.Errorf("symbol: invalid enum value for scope_type field: %q", st)
	}
}

// AccessModifier defines the type for the "access_modifier" enum field.
type AccessModifier string

// AccessModifier values.
const (
	AccessModifierPublic    AccessModifier = "public"
	AccessModifierPrivate   AccessModifier = "private"
	AccessModifierProtected AccessModifier = "protected"
	AccessModifierPackage   AccessModifier = "package"
)

func (am AccessModifier) String() string {
	return string(am)
}

// AccessModifierValidator is a validator for the "access_modifier" field enum values. It is called by the builders before save.
func AccessModifierValidator(am AccessModifier) error {
	switch am {
	case AccessModifierPublic, AccessModifierPrivate, AccessModifierProtected, AccessModifierPackage:
		return nil
	default:
		return fmt.Errorf("symbol: invalid enum value for access_modifier field: %q", am)
	}
}

// OrderOption defines the ordering options for the Symbol queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByQualifiedName orders the results by the qualified_name field.
func ByQualifiedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualifiedName, opts...).ToFunc()
}

// BySymbolType orders the results by the symbol_type field.
func BySymbolType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbolType, opts...).ToFunc()
}

// ByScopeType orders the results by the scope_type field.
func ByScopeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeType, opts...).ToFunc()
}

// ByAccessModifier orders the results by the access_modifier field.
func ByAccessModifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessModifier, opts...).ToFunc()
}

// ByIsStatic orders the results by the is_static field.
func ByIsStatic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsStatic, opts...).ToFunc()
}

// ByIsAbstract orders the results by the is_abstract field.
func ByIsAbstract(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAbstract, opts...).ToFunc()
}

// ByIsAsync orders the results by the is_async field.
func ByIsAsync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAsync, opts...).ToFunc()
}

// ByLineNumber orders the results by the line_number field.
func ByLineNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineNumber, opts...).ToFunc()
}

// ByColumnNumber orders the results by the column_number field.
func ByColumnNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColumnNumber, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByAstNodeField orders the results by ast_node field.
func ByAstNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAstNodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCallsMadeCount orders the results by calls_made count.
func ByCallsMadeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallsMadeStep(), opts...)
	}
}

// ByCallsMade orders the results by calls_made terms.
func ByCallsMade(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallsMadeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallsReceivedCount orders the results by calls_received count.
func ByCallsReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallsReceivedStep(), opts...)
	}
}

// ByCallsReceived orders the results by calls_received terms.
func ByCallsReceived(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallsReceivedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReferencesCount orders the results by references count.
func ByReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferencesStep(), opts...)
	}
}

// ByReferences orders the results by references terms.
func ByReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChildClassesCount orders the results by child_classes count.
func ByChildClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildClassesStep(), opts...)
	}
}

// ByChildClasses orders the results by child_classes terms.
func ByChildClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentClassesCount orders the results by parent_classes count.
func ByParentClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParentClassesStep(), opts...)
	}
}

// ByParentClasses orders the results by parent_classes terms.
func ByParentClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImportReferencesCount orders the results by import_references count.
func ByImportReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImportReferencesStep(), opts...)
	}
}

// ByImportReferences orders the results by import_references terms.
func ByImportReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImportReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newAstNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AstNodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AstNodeTable, AstNodeColumn),
	)
}
func newCallsMadeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallsMadeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CallsMadeTable, CallsMadeColumn),
	)
}
func newCallsReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallsReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CallsReceivedTable, CallsReceivedColumn),
	)
}
func newReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReferencesTable, ReferencesColumn),
	)
}
func newChildClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildClassesTable, ChildClassesColumn),
	)
}
func newParentClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParentClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParentClassesTable, ParentClassesColumn),
	)
}
func newImportReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImportReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImportReferencesTable, ImportReferencesColumn),
	)
}
