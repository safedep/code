// Code generated by ent, DO NOT EDIT.

package symbol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldName, v))
}

// QualifiedName applies equality check predicate on the "qualified_name" field. It's identical to QualifiedNameEQ.
func QualifiedName(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldQualifiedName, v))
}

// IsStatic applies equality check predicate on the "is_static" field. It's identical to IsStaticEQ.
func IsStatic(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsStatic, v))
}

// IsAbstract applies equality check predicate on the "is_abstract" field. It's identical to IsAbstractEQ.
func IsAbstract(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsAbstract, v))
}

// IsAsync applies equality check predicate on the "is_async" field. It's identical to IsAsyncEQ.
func IsAsync(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsAsync, v))
}

// LineNumber applies equality check predicate on the "line_number" field. It's identical to LineNumberEQ.
func LineNumber(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldLineNumber, v))
}

// ColumnNumber applies equality check predicate on the "column_number" field. It's identical to ColumnNumberEQ.
func ColumnNumber(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldColumnNumber, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldContainsFold(FieldName, v))
}

// QualifiedNameEQ applies the EQ predicate on the "qualified_name" field.
func QualifiedNameEQ(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldQualifiedName, v))
}

// QualifiedNameNEQ applies the NEQ predicate on the "qualified_name" field.
func QualifiedNameNEQ(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldQualifiedName, v))
}

// QualifiedNameIn applies the In predicate on the "qualified_name" field.
func QualifiedNameIn(vs ...string) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldQualifiedName, vs...))
}

// QualifiedNameNotIn applies the NotIn predicate on the "qualified_name" field.
func QualifiedNameNotIn(vs ...string) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldQualifiedName, vs...))
}

// QualifiedNameGT applies the GT predicate on the "qualified_name" field.
func QualifiedNameGT(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldQualifiedName, v))
}

// QualifiedNameGTE applies the GTE predicate on the "qualified_name" field.
func QualifiedNameGTE(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldQualifiedName, v))
}

// QualifiedNameLT applies the LT predicate on the "qualified_name" field.
func QualifiedNameLT(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldQualifiedName, v))
}

// QualifiedNameLTE applies the LTE predicate on the "qualified_name" field.
func QualifiedNameLTE(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldQualifiedName, v))
}

// QualifiedNameContains applies the Contains predicate on the "qualified_name" field.
func QualifiedNameContains(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldContains(FieldQualifiedName, v))
}

// QualifiedNameHasPrefix applies the HasPrefix predicate on the "qualified_name" field.
func QualifiedNameHasPrefix(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldHasPrefix(FieldQualifiedName, v))
}

// QualifiedNameHasSuffix applies the HasSuffix predicate on the "qualified_name" field.
func QualifiedNameHasSuffix(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldHasSuffix(FieldQualifiedName, v))
}

// QualifiedNameEqualFold applies the EqualFold predicate on the "qualified_name" field.
func QualifiedNameEqualFold(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldEqualFold(FieldQualifiedName, v))
}

// QualifiedNameContainsFold applies the ContainsFold predicate on the "qualified_name" field.
func QualifiedNameContainsFold(v string) predicate.Symbol {
	return predicate.Symbol(sql.FieldContainsFold(FieldQualifiedName, v))
}

// SymbolTypeEQ applies the EQ predicate on the "symbol_type" field.
func SymbolTypeEQ(v SymbolType) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldSymbolType, v))
}

// SymbolTypeNEQ applies the NEQ predicate on the "symbol_type" field.
func SymbolTypeNEQ(v SymbolType) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldSymbolType, v))
}

// SymbolTypeIn applies the In predicate on the "symbol_type" field.
func SymbolTypeIn(vs ...SymbolType) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldSymbolType, vs...))
}

// SymbolTypeNotIn applies the NotIn predicate on the "symbol_type" field.
func SymbolTypeNotIn(vs ...SymbolType) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldSymbolType, vs...))
}

// ScopeTypeEQ applies the EQ predicate on the "scope_type" field.
func ScopeTypeEQ(v ScopeType) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldScopeType, v))
}

// ScopeTypeNEQ applies the NEQ predicate on the "scope_type" field.
func ScopeTypeNEQ(v ScopeType) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldScopeType, v))
}

// ScopeTypeIn applies the In predicate on the "scope_type" field.
func ScopeTypeIn(vs ...ScopeType) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldScopeType, vs...))
}

// ScopeTypeNotIn applies the NotIn predicate on the "scope_type" field.
func ScopeTypeNotIn(vs ...ScopeType) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldScopeType, vs...))
}

// AccessModifierEQ applies the EQ predicate on the "access_modifier" field.
func AccessModifierEQ(v AccessModifier) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldAccessModifier, v))
}

// AccessModifierNEQ applies the NEQ predicate on the "access_modifier" field.
func AccessModifierNEQ(v AccessModifier) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldAccessModifier, v))
}

// AccessModifierIn applies the In predicate on the "access_modifier" field.
func AccessModifierIn(vs ...AccessModifier) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldAccessModifier, vs...))
}

// AccessModifierNotIn applies the NotIn predicate on the "access_modifier" field.
func AccessModifierNotIn(vs ...AccessModifier) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldAccessModifier, vs...))
}

// AccessModifierIsNil applies the IsNil predicate on the "access_modifier" field.
func AccessModifierIsNil() predicate.Symbol {
	return predicate.Symbol(sql.FieldIsNull(FieldAccessModifier))
}

// AccessModifierNotNil applies the NotNil predicate on the "access_modifier" field.
func AccessModifierNotNil() predicate.Symbol {
	return predicate.Symbol(sql.FieldNotNull(FieldAccessModifier))
}

// IsStaticEQ applies the EQ predicate on the "is_static" field.
func IsStaticEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsStatic, v))
}

// IsStaticNEQ applies the NEQ predicate on the "is_static" field.
func IsStaticNEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldIsStatic, v))
}

// IsAbstractEQ applies the EQ predicate on the "is_abstract" field.
func IsAbstractEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsAbstract, v))
}

// IsAbstractNEQ applies the NEQ predicate on the "is_abstract" field.
func IsAbstractNEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldIsAbstract, v))
}

// IsAsyncEQ applies the EQ predicate on the "is_async" field.
func IsAsyncEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldIsAsync, v))
}

// IsAsyncNEQ applies the NEQ predicate on the "is_async" field.
func IsAsyncNEQ(v bool) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldIsAsync, v))
}

// LineNumberEQ applies the EQ predicate on the "line_number" field.
func LineNumberEQ(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldLineNumber, v))
}

// LineNumberNEQ applies the NEQ predicate on the "line_number" field.
func LineNumberNEQ(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldLineNumber, v))
}

// LineNumberIn applies the In predicate on the "line_number" field.
func LineNumberIn(vs ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldLineNumber, vs...))
}

// LineNumberNotIn applies the NotIn predicate on the "line_number" field.
func LineNumberNotIn(vs ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldLineNumber, vs...))
}

// LineNumberGT applies the GT predicate on the "line_number" field.
func LineNumberGT(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldLineNumber, v))
}

// LineNumberGTE applies the GTE predicate on the "line_number" field.
func LineNumberGTE(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldLineNumber, v))
}

// LineNumberLT applies the LT predicate on the "line_number" field.
func LineNumberLT(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldLineNumber, v))
}

// LineNumberLTE applies the LTE predicate on the "line_number" field.
func LineNumberLTE(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldLineNumber, v))
}

// ColumnNumberEQ applies the EQ predicate on the "column_number" field.
func ColumnNumberEQ(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldColumnNumber, v))
}

// ColumnNumberNEQ applies the NEQ predicate on the "column_number" field.
func ColumnNumberNEQ(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldColumnNumber, v))
}

// ColumnNumberIn applies the In predicate on the "column_number" field.
func ColumnNumberIn(vs ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldColumnNumber, vs...))
}

// ColumnNumberNotIn applies the NotIn predicate on the "column_number" field.
func ColumnNumberNotIn(vs ...int) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldColumnNumber, vs...))
}

// ColumnNumberGT applies the GT predicate on the "column_number" field.
func ColumnNumberGT(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldColumnNumber, v))
}

// ColumnNumberGTE applies the GTE predicate on the "column_number" field.
func ColumnNumberGTE(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldColumnNumber, v))
}

// ColumnNumberLT applies the LT predicate on the "column_number" field.
func ColumnNumberLT(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldColumnNumber, v))
}

// ColumnNumberLTE applies the LTE predicate on the "column_number" field.
func ColumnNumberLTE(v int) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldColumnNumber, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Symbol {
	return predicate.Symbol(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Symbol {
	return predicate.Symbol(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Symbol {
	return predicate.Symbol(sql.FieldLTE(FieldCreatedAt, v))
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAstNode applies the HasEdge predicate on the "ast_node" edge.
func HasAstNode() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AstNodeTable, AstNodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAstNodeWith applies the HasEdge predicate on the "ast_node" edge with a given conditions (other predicates).
func HasAstNodeWith(preds ...predicate.ASTNode) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newAstNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallsMade applies the HasEdge predicate on the "calls_made" edge.
func HasCallsMade() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CallsMadeTable, CallsMadeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallsMadeWith applies the HasEdge predicate on the "calls_made" edge with a given conditions (other predicates).
func HasCallsMadeWith(preds ...predicate.CallRelationship) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newCallsMadeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallsReceived applies the HasEdge predicate on the "calls_received" edge.
func HasCallsReceived() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CallsReceivedTable, CallsReceivedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallsReceivedWith applies the HasEdge predicate on the "calls_received" edge with a given conditions (other predicates).
func HasCallsReceivedWith(preds ...predicate.CallRelationship) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newCallsReceivedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferences applies the HasEdge predicate on the "references" edge.
func HasReferences() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReferencesTable, ReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferencesWith applies the HasEdge predicate on the "references" edge with a given conditions (other predicates).
func HasReferencesWith(preds ...predicate.SymbolReference) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildClasses applies the HasEdge predicate on the "child_classes" edge.
func HasChildClasses() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildClassesTable, ChildClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildClassesWith applies the HasEdge predicate on the "child_classes" edge with a given conditions (other predicates).
func HasChildClassesWith(preds ...predicate.InheritanceRelationship) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newChildClassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentClasses applies the HasEdge predicate on the "parent_classes" edge.
func HasParentClasses() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParentClassesTable, ParentClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentClassesWith applies the HasEdge predicate on the "parent_classes" edge with a given conditions (other predicates).
func HasParentClassesWith(preds ...predicate.InheritanceRelationship) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newParentClassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImportReferences applies the HasEdge predicate on the "import_references" edge.
func HasImportReferences() predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImportReferencesTable, ImportReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImportReferencesWith applies the HasEdge predicate on the "import_references" edge with a given conditions (other predicates).
func HasImportReferencesWith(preds ...predicate.ImportStatement) predicate.Symbol {
	return predicate.Symbol(func(s *sql.Selector) {
		step := newImportReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Symbol) predicate.Symbol {
	return predicate.Symbol(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Symbol) predicate.Symbol {
	return predicate.Symbol(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Symbol) predicate.Symbol {
	return predicate.Symbol(sql.NotPredicates(p))
}
