// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// CallRelationship is the model entity for the CallRelationship schema.
type CallRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CallSiteLine holds the value of the "call_site_line" field.
	CallSiteLine int `json:"call_site_line,omitempty"`
	// CallSiteColumn holds the value of the "call_site_column" field.
	CallSiteColumn int `json:"call_site_column,omitempty"`
	// CallType holds the value of the "call_type" field.
	CallType callrelationship.CallType `json:"call_type,omitempty"`
	// IsConditional holds the value of the "is_conditional" field.
	IsConditional bool `json:"is_conditional,omitempty"`
	// Arguments holds the value of the "arguments" field.
	Arguments []string `json:"arguments,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallRelationshipQuery when eager-loading is set.
	Edges             CallRelationshipEdges `json:"edges"`
	call_site_file_id *int
	caller_id         *int
	callee_id         *int
	selectValues      sql.SelectValues
}

// CallRelationshipEdges holds the relations/edges for other nodes in the graph.
type CallRelationshipEdges struct {
	// Caller holds the value of the caller edge.
	Caller *Symbol `json:"caller,omitempty"`
	// Callee holds the value of the callee edge.
	Callee *Symbol `json:"callee,omitempty"`
	// CallSiteFile holds the value of the call_site_file edge.
	CallSiteFile *File `json:"call_site_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CallerOrErr returns the Caller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallRelationshipEdges) CallerOrErr() (*Symbol, error) {
	if e.Caller != nil {
		return e.Caller, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "caller"}
}

// CalleeOrErr returns the Callee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallRelationshipEdges) CalleeOrErr() (*Symbol, error) {
	if e.Callee != nil {
		return e.Callee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "callee"}
}

// CallSiteFileOrErr returns the CallSiteFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallRelationshipEdges) CallSiteFileOrErr() (*File, error) {
	if e.CallSiteFile != nil {
		return e.CallSiteFile, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "call_site_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CallRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case callrelationship.FieldArguments:
			values[i] = new([]byte)
		case callrelationship.FieldIsConditional:
			values[i] = new(sql.NullBool)
		case callrelationship.FieldID, callrelationship.FieldCallSiteLine, callrelationship.FieldCallSiteColumn:
			values[i] = new(sql.NullInt64)
		case callrelationship.FieldCallType:
			values[i] = new(sql.NullString)
		case callrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case callrelationship.ForeignKeys[0]: // call_site_file_id
			values[i] = new(sql.NullInt64)
		case callrelationship.ForeignKeys[1]: // caller_id
			values[i] = new(sql.NullInt64)
		case callrelationship.ForeignKeys[2]: // callee_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CallRelationship fields.
func (_m *CallRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case callrelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case callrelationship.FieldCallSiteLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field call_site_line", values[i])
			} else if value.Valid {
				_m.CallSiteLine = int(value.Int64)
			}
		case callrelationship.FieldCallSiteColumn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field call_site_column", values[i])
			} else if value.Valid {
				_m.CallSiteColumn = int(value.Int64)
			}
		case callrelationship.FieldCallType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field call_type", values[i])
			} else if value.Valid {
				_m.CallType = callrelationship.CallType(value.String)
			}
		case callrelationship.FieldIsConditional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_conditional", values[i])
			} else if value.Valid {
				_m.IsConditional = value.Bool
			}
		case callrelationship.FieldArguments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field arguments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Arguments); err != nil {
					return fmt.Errorf("unmarshal field arguments: %w", err)
				}
			}
		case callrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case callrelationship.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field call_site_file_id", value)
			} else if value.Valid {
				_m.call_site_file_id = new(int)
				*_m.call_site_file_id = int(value.Int64)
			}
		case callrelationship.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field caller_id", value)
			} else if value.Valid {
				_m.caller_id = new(int)
				*_m.caller_id = int(value.Int64)
			}
		case callrelationship.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field callee_id", value)
			} else if value.Valid {
				_m.callee_id = new(int)
				*_m.callee_id = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CallRelationship.
// This includes values selected through modifiers, order, etc.
func (_m *CallRelationship) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCaller queries the "caller" edge of the CallRelationship entity.
func (_m *CallRelationship) QueryCaller() *SymbolQuery {
	return NewCallRelationshipClient(_m.config).QueryCaller(_m)
}

// QueryCallee queries the "callee" edge of the CallRelationship entity.
func (_m *CallRelationship) QueryCallee() *SymbolQuery {
	return NewCallRelationshipClient(_m.config).QueryCallee(_m)
}

// QueryCallSiteFile queries the "call_site_file" edge of the CallRelationship entity.
func (_m *CallRelationship) QueryCallSiteFile() *FileQuery {
	return NewCallRelationshipClient(_m.config).QueryCallSiteFile(_m)
}

// Update returns a builder for updating this CallRelationship.
// Note that you need to call CallRelationship.Unwrap() before calling this method if this CallRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CallRelationship) Update() *CallRelationshipUpdateOne {
	return NewCallRelationshipClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CallRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CallRelationship) Unwrap() *CallRelationship {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: CallRelationship is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CallRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("CallRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("call_site_line=")
	builder.WriteString(fmt.Sprintf("%v", _m.CallSiteLine))
	builder.WriteString(", ")
	builder.WriteString("call_site_column=")
	builder.WriteString(fmt.Sprintf("%v", _m.CallSiteColumn))
	builder.WriteString(", ")
	builder.WriteString("call_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.CallType))
	builder.WriteString(", ")
	builder.WriteString("is_conditional=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsConditional))
	builder.WriteString(", ")
	builder.WriteString("arguments=")
	builder.WriteString(fmt.Sprintf("%v", _m.Arguments))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CallRelationships is a parsable slice of CallRelationship.
type CallRelationships []*CallRelationship
