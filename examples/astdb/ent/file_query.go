// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/project"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// FileQuery is the builder for querying File entities.
type FileQuery struct {
	config
	ctx                  *QueryContext
	order                []file.OrderOption
	inters               []Interceptor
	predicates           []predicate.File
	withProject          *ProjectQuery
	withAstNodes         *ASTNodeQuery
	withSymbols          *SymbolQuery
	withImports          *ImportStatementQuery
	withCallSites        *CallRelationshipQuery
	withInheritanceSites *InheritanceRelationshipQuery
	withSymbolReferences *SymbolReferenceQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FileQuery builder.
func (_q *FileQuery) Where(ps ...predicate.File) *FileQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *FileQuery) Limit(limit int) *FileQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *FileQuery) Offset(offset int) *FileQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *FileQuery) Unique(unique bool) *FileQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *FileQuery) Order(o ...file.OrderOption) *FileQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryProject chains the current query on the "project" edge.
func (_q *FileQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.ProjectTable, file.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAstNodes chains the current query on the "ast_nodes" edge.
func (_q *FileQuery) QueryAstNodes() *ASTNodeQuery {
	query := (&ASTNodeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(astnode.Table, astnode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.AstNodesTable, file.AstNodesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySymbols chains the current query on the "symbols" edge.
func (_q *FileQuery) QuerySymbols() *SymbolQuery {
	query := (&SymbolClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(symbol.Table, symbol.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.SymbolsTable, file.SymbolsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImports chains the current query on the "imports" edge.
func (_q *FileQuery) QueryImports() *ImportStatementQuery {
	query := (&ImportStatementClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(importstatement.Table, importstatement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.ImportsTable, file.ImportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCallSites chains the current query on the "call_sites" edge.
func (_q *FileQuery) QueryCallSites() *CallRelationshipQuery {
	query := (&CallRelationshipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(callrelationship.Table, callrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.CallSitesTable, file.CallSitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInheritanceSites chains the current query on the "inheritance_sites" edge.
func (_q *FileQuery) QueryInheritanceSites() *InheritanceRelationshipQuery {
	query := (&InheritanceRelationshipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(inheritancerelationship.Table, inheritancerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.InheritanceSitesTable, file.InheritanceSitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySymbolReferences chains the current query on the "symbol_references" edge.
func (_q *FileQuery) QuerySymbolReferences() *SymbolReferenceQuery {
	query := (&SymbolReferenceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, selector),
			sqlgraph.To(symbolreference.Table, symbolreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.SymbolReferencesTable, file.SymbolReferencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first File entity from the query.
// Returns a *NotFoundError when no File was found.
func (_q *FileQuery) First(ctx context.Context) (*File, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{file.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *FileQuery) FirstX(ctx context.Context) *File {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first File ID from the query.
// Returns a *NotFoundError when no File ID was found.
func (_q *FileQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{file.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *FileQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single File entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one File entity is found.
// Returns a *NotFoundError when no File entities are found.
func (_q *FileQuery) Only(ctx context.Context) (*File, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{file.Label}
	default:
		return nil, &NotSingularError{file.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *FileQuery) OnlyX(ctx context.Context) *File {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only File ID in the query.
// Returns a *NotSingularError when more than one File ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *FileQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{file.Label}
	default:
		err = &NotSingularError{file.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *FileQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Files.
func (_q *FileQuery) All(ctx context.Context) ([]*File, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*File, *FileQuery]()
	return withInterceptors[[]*File](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *FileQuery) AllX(ctx context.Context) []*File {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of File IDs.
func (_q *FileQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(file.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *FileQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *FileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*FileQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *FileQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *FileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *FileQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *FileQuery) Clone() *FileQuery {
	if _q == nil {
		return nil
	}
	return &FileQuery{
		config:               _q.config,
		ctx:                  _q.ctx.Clone(),
		order:                append([]file.OrderOption{}, _q.order...),
		inters:               append([]Interceptor{}, _q.inters...),
		predicates:           append([]predicate.File{}, _q.predicates...),
		withProject:          _q.withProject.Clone(),
		withAstNodes:         _q.withAstNodes.Clone(),
		withSymbols:          _q.withSymbols.Clone(),
		withImports:          _q.withImports.Clone(),
		withCallSites:        _q.withCallSites.Clone(),
		withInheritanceSites: _q.withInheritanceSites.Clone(),
		withSymbolReferences: _q.withSymbolReferences.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithProject(opts ...func(*ProjectQuery)) *FileQuery {
	query := (&ProjectClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProject = query
	return _q
}

// WithAstNodes tells the query-builder to eager-load the nodes that are connected to
// the "ast_nodes" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithAstNodes(opts ...func(*ASTNodeQuery)) *FileQuery {
	query := (&ASTNodeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAstNodes = query
	return _q
}

// WithSymbols tells the query-builder to eager-load the nodes that are connected to
// the "symbols" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithSymbols(opts ...func(*SymbolQuery)) *FileQuery {
	query := (&SymbolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSymbols = query
	return _q
}

// WithImports tells the query-builder to eager-load the nodes that are connected to
// the "imports" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithImports(opts ...func(*ImportStatementQuery)) *FileQuery {
	query := (&ImportStatementClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withImports = query
	return _q
}

// WithCallSites tells the query-builder to eager-load the nodes that are connected to
// the "call_sites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithCallSites(opts ...func(*CallRelationshipQuery)) *FileQuery {
	query := (&CallRelationshipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCallSites = query
	return _q
}

// WithInheritanceSites tells the query-builder to eager-load the nodes that are connected to
// the "inheritance_sites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithInheritanceSites(opts ...func(*InheritanceRelationshipQuery)) *FileQuery {
	query := (&InheritanceRelationshipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInheritanceSites = query
	return _q
}

// WithSymbolReferences tells the query-builder to eager-load the nodes that are connected to
// the "symbol_references" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *FileQuery) WithSymbolReferences(opts ...func(*SymbolReferenceQuery)) *FileQuery {
	query := (&SymbolReferenceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSymbolReferences = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RelativePath string `json:"relative_path,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.File.Query().
//		GroupBy(file.FieldRelativePath).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *FileQuery) GroupBy(field string, fields ...string) *FileGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FileGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = file.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RelativePath string `json:"relative_path,omitempty"`
//	}
//
//	client.File.Query().
//		Select(file.FieldRelativePath).
//		Scan(ctx, &v)
func (_q *FileQuery) Select(fields ...string) *FileSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &FileSelect{FileQuery: _q}
	sbuild.label = file.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FileSelect configured with the given aggregations.
func (_q *FileQuery) Aggregate(fns ...AggregateFunc) *FileSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *FileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !file.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *FileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*File, error) {
	var (
		nodes       = []*File{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withProject != nil,
			_q.withAstNodes != nil,
			_q.withSymbols != nil,
			_q.withImports != nil,
			_q.withCallSites != nil,
			_q.withInheritanceSites != nil,
			_q.withSymbolReferences != nil,
		}
	)
	if _q.withProject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, file.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*File).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &File{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withProject; query != nil {
		if err := _q.loadProject(ctx, query, nodes, nil,
			func(n *File, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAstNodes; query != nil {
		if err := _q.loadAstNodes(ctx, query, nodes,
			func(n *File) { n.Edges.AstNodes = []*ASTNode{} },
			func(n *File, e *ASTNode) { n.Edges.AstNodes = append(n.Edges.AstNodes, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSymbols; query != nil {
		if err := _q.loadSymbols(ctx, query, nodes,
			func(n *File) { n.Edges.Symbols = []*Symbol{} },
			func(n *File, e *Symbol) { n.Edges.Symbols = append(n.Edges.Symbols, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withImports; query != nil {
		if err := _q.loadImports(ctx, query, nodes,
			func(n *File) { n.Edges.Imports = []*ImportStatement{} },
			func(n *File, e *ImportStatement) { n.Edges.Imports = append(n.Edges.Imports, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCallSites; query != nil {
		if err := _q.loadCallSites(ctx, query, nodes,
			func(n *File) { n.Edges.CallSites = []*CallRelationship{} },
			func(n *File, e *CallRelationship) { n.Edges.CallSites = append(n.Edges.CallSites, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInheritanceSites; query != nil {
		if err := _q.loadInheritanceSites(ctx, query, nodes,
			func(n *File) { n.Edges.InheritanceSites = []*InheritanceRelationship{} },
			func(n *File, e *InheritanceRelationship) {
				n.Edges.InheritanceSites = append(n.Edges.InheritanceSites, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withSymbolReferences; query != nil {
		if err := _q.loadSymbolReferences(ctx, query, nodes,
			func(n *File) { n.Edges.SymbolReferences = []*SymbolReference{} },
			func(n *File, e *SymbolReference) { n.Edges.SymbolReferences = append(n.Edges.SymbolReferences, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *FileQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*File, init func(*File), assign func(*File, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*File)
	for i := range nodes {
		if nodes[i].project_files == nil {
			continue
		}
		fk := *nodes[i].project_files
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_files" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *FileQuery) loadAstNodes(ctx context.Context, query *ASTNodeQuery, nodes []*File, init func(*File), assign func(*File, *ASTNode)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ASTNode(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.AstNodesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.file_ast_nodes
		if fk == nil {
			return fmt.Errorf(`foreign-key "file_ast_nodes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "file_ast_nodes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *FileQuery) loadSymbols(ctx context.Context, query *SymbolQuery, nodes []*File, init func(*File), assign func(*File, *Symbol)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Symbol(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.SymbolsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.file_symbols
		if fk == nil {
			return fmt.Errorf(`foreign-key "file_symbols" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "file_symbols" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *FileQuery) loadImports(ctx context.Context, query *ImportStatementQuery, nodes []*File, init func(*File), assign func(*File, *ImportStatement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ImportStatement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.ImportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.file_imports
		if fk == nil {
			return fmt.Errorf(`foreign-key "file_imports" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "file_imports" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *FileQuery) loadCallSites(ctx context.Context, query *CallRelationshipQuery, nodes []*File, init func(*File), assign func(*File, *CallRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CallRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.CallSitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.call_site_file_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "call_site_file_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "call_site_file_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *FileQuery) loadInheritanceSites(ctx context.Context, query *InheritanceRelationshipQuery, nodes []*File, init func(*File), assign func(*File, *InheritanceRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InheritanceRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.InheritanceSitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.file_inheritance_sites
		if fk == nil {
			return fmt.Errorf(`foreign-key "file_inheritance_sites" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "file_inheritance_sites" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *FileQuery) loadSymbolReferences(ctx context.Context, query *SymbolReferenceQuery, nodes []*File, init func(*File), assign func(*File, *SymbolReference)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*File)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SymbolReference(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(file.SymbolReferencesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.file_symbol_references
		if fk == nil {
			return fmt.Errorf(`foreign-key "file_symbol_references" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "file_symbol_references" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *FileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *FileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for i := range fields {
			if fields[i] != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *FileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(file.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = file.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FileGroupBy is the group-by builder for File entities.
type FileGroupBy struct {
	selector
	build *FileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *FileGroupBy) Aggregate(fns ...AggregateFunc) *FileGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *FileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileQuery, *FileGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *FileGroupBy) sqlScan(ctx context.Context, root *FileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FileSelect is the builder for selecting fields of File entities.
type FileSelect struct {
	*FileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *FileSelect) Aggregate(fns ...AggregateFunc) *FileSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *FileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileQuery, *FileSelect](ctx, _s.FileQuery, _s, _s.inters, v)
}

func (_s *FileSelect) sqlScan(ctx context.Context, root *FileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
