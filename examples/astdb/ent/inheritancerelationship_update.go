// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// InheritanceRelationshipUpdate is the builder for updating InheritanceRelationship entities.
type InheritanceRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *InheritanceRelationshipMutation
}

// Where appends a list predicates to the InheritanceRelationshipUpdate builder.
func (_u *InheritanceRelationshipUpdate) Where(ps ...predicate.InheritanceRelationship) *InheritanceRelationshipUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRelationshipType sets the "relationship_type" field.
func (_u *InheritanceRelationshipUpdate) SetRelationshipType(v inheritancerelationship.RelationshipType) *InheritanceRelationshipUpdate {
	_u.mutation.SetRelationshipType(v)
	return _u
}

// SetNillableRelationshipType sets the "relationship_type" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableRelationshipType(v *inheritancerelationship.RelationshipType) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetRelationshipType(*v)
	}
	return _u
}

// SetLineNumber sets the "line_number" field.
func (_u *InheritanceRelationshipUpdate) SetLineNumber(v int) *InheritanceRelationshipUpdate {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableLineNumber(v *int) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *InheritanceRelationshipUpdate) AddLineNumber(v int) *InheritanceRelationshipUpdate {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetIsDirectInheritance sets the "is_direct_inheritance" field.
func (_u *InheritanceRelationshipUpdate) SetIsDirectInheritance(v bool) *InheritanceRelationshipUpdate {
	_u.mutation.SetIsDirectInheritance(v)
	return _u
}

// SetNillableIsDirectInheritance sets the "is_direct_inheritance" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableIsDirectInheritance(v *bool) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetIsDirectInheritance(*v)
	}
	return _u
}

// SetInheritanceDepth sets the "inheritance_depth" field.
func (_u *InheritanceRelationshipUpdate) SetInheritanceDepth(v int) *InheritanceRelationshipUpdate {
	_u.mutation.ResetInheritanceDepth()
	_u.mutation.SetInheritanceDepth(v)
	return _u
}

// SetNillableInheritanceDepth sets the "inheritance_depth" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableInheritanceDepth(v *int) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetInheritanceDepth(*v)
	}
	return _u
}

// AddInheritanceDepth adds value to the "inheritance_depth" field.
func (_u *InheritanceRelationshipUpdate) AddInheritanceDepth(v int) *InheritanceRelationshipUpdate {
	_u.mutation.AddInheritanceDepth(v)
	return _u
}

// SetModuleName sets the "module_name" field.
func (_u *InheritanceRelationshipUpdate) SetModuleName(v string) *InheritanceRelationshipUpdate {
	_u.mutation.SetModuleName(v)
	return _u
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableModuleName(v *string) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetModuleName(*v)
	}
	return _u
}

// ClearModuleName clears the value of the "module_name" field.
func (_u *InheritanceRelationshipUpdate) ClearModuleName() *InheritanceRelationshipUpdate {
	_u.mutation.ClearModuleName()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *InheritanceRelationshipUpdate) SetCreatedAt(v time.Time) *InheritanceRelationshipUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableCreatedAt(v *time.Time) *InheritanceRelationshipUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetChildID sets the "child" edge to the Symbol entity by ID.
func (_u *InheritanceRelationshipUpdate) SetChildID(id int) *InheritanceRelationshipUpdate {
	_u.mutation.SetChildID(id)
	return _u
}

// SetNillableChildID sets the "child" edge to the Symbol entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableChildID(id *int) *InheritanceRelationshipUpdate {
	if id != nil {
		_u = _u.SetChildID(*id)
	}
	return _u
}

// SetChild sets the "child" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdate) SetChild(v *Symbol) *InheritanceRelationshipUpdate {
	return _u.SetChildID(v.ID)
}

// SetParentID sets the "parent" edge to the Symbol entity by ID.
func (_u *InheritanceRelationshipUpdate) SetParentID(id int) *InheritanceRelationshipUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Symbol entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableParentID(id *int) *InheritanceRelationshipUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdate) SetParent(v *Symbol) *InheritanceRelationshipUpdate {
	return _u.SetParentID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *InheritanceRelationshipUpdate) SetFileID(id int) *InheritanceRelationshipUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdate) SetNillableFileID(id *int) *InheritanceRelationshipUpdate {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *InheritanceRelationshipUpdate) SetFile(v *File) *InheritanceRelationshipUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the InheritanceRelationshipMutation object of the builder.
func (_u *InheritanceRelationshipUpdate) Mutation() *InheritanceRelationshipMutation {
	return _u.mutation
}

// ClearChild clears the "child" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdate) ClearChild() *InheritanceRelationshipUpdate {
	_u.mutation.ClearChild()
	return _u
}

// ClearParent clears the "parent" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdate) ClearParent() *InheritanceRelationshipUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *InheritanceRelationshipUpdate) ClearFile() *InheritanceRelationshipUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InheritanceRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InheritanceRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InheritanceRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InheritanceRelationshipUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InheritanceRelationshipUpdate) check() error {
	if v, ok := _u.mutation.RelationshipType(); ok {
		if err := inheritancerelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.relationship_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := inheritancerelationship.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.line_number": %w`, err)}
		}
	}
	return nil
}

func (_u *InheritanceRelationshipUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inheritancerelationship.Table, inheritancerelationship.Columns, sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RelationshipType(); ok {
		_spec.SetField(inheritancerelationship.FieldRelationshipType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(inheritancerelationship.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(inheritancerelationship.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsDirectInheritance(); ok {
		_spec.SetField(inheritancerelationship.FieldIsDirectInheritance, field.TypeBool, value)
	}
	if value, ok := _u.mutation.InheritanceDepth(); ok {
		_spec.SetField(inheritancerelationship.FieldInheritanceDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInheritanceDepth(); ok {
		_spec.AddField(inheritancerelationship.FieldInheritanceDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ModuleName(); ok {
		_spec.SetField(inheritancerelationship.FieldModuleName, field.TypeString, value)
	}
	if _u.mutation.ModuleNameCleared() {
		_spec.ClearField(inheritancerelationship.FieldModuleName, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(inheritancerelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ChildTable,
			Columns: []string{inheritancerelationship.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ChildTable,
			Columns: []string{inheritancerelationship.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ParentTable,
			Columns: []string{inheritancerelationship.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ParentTable,
			Columns: []string{inheritancerelationship.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.FileTable,
			Columns: []string{inheritancerelationship.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.FileTable,
			Columns: []string{inheritancerelationship.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inheritancerelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InheritanceRelationshipUpdateOne is the builder for updating a single InheritanceRelationship entity.
type InheritanceRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InheritanceRelationshipMutation
}

// SetRelationshipType sets the "relationship_type" field.
func (_u *InheritanceRelationshipUpdateOne) SetRelationshipType(v inheritancerelationship.RelationshipType) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetRelationshipType(v)
	return _u
}

// SetNillableRelationshipType sets the "relationship_type" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableRelationshipType(v *inheritancerelationship.RelationshipType) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetRelationshipType(*v)
	}
	return _u
}

// SetLineNumber sets the "line_number" field.
func (_u *InheritanceRelationshipUpdateOne) SetLineNumber(v int) *InheritanceRelationshipUpdateOne {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableLineNumber(v *int) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *InheritanceRelationshipUpdateOne) AddLineNumber(v int) *InheritanceRelationshipUpdateOne {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetIsDirectInheritance sets the "is_direct_inheritance" field.
func (_u *InheritanceRelationshipUpdateOne) SetIsDirectInheritance(v bool) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetIsDirectInheritance(v)
	return _u
}

// SetNillableIsDirectInheritance sets the "is_direct_inheritance" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableIsDirectInheritance(v *bool) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetIsDirectInheritance(*v)
	}
	return _u
}

// SetInheritanceDepth sets the "inheritance_depth" field.
func (_u *InheritanceRelationshipUpdateOne) SetInheritanceDepth(v int) *InheritanceRelationshipUpdateOne {
	_u.mutation.ResetInheritanceDepth()
	_u.mutation.SetInheritanceDepth(v)
	return _u
}

// SetNillableInheritanceDepth sets the "inheritance_depth" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableInheritanceDepth(v *int) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetInheritanceDepth(*v)
	}
	return _u
}

// AddInheritanceDepth adds value to the "inheritance_depth" field.
func (_u *InheritanceRelationshipUpdateOne) AddInheritanceDepth(v int) *InheritanceRelationshipUpdateOne {
	_u.mutation.AddInheritanceDepth(v)
	return _u
}

// SetModuleName sets the "module_name" field.
func (_u *InheritanceRelationshipUpdateOne) SetModuleName(v string) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetModuleName(v)
	return _u
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableModuleName(v *string) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetModuleName(*v)
	}
	return _u
}

// ClearModuleName clears the value of the "module_name" field.
func (_u *InheritanceRelationshipUpdateOne) ClearModuleName() *InheritanceRelationshipUpdateOne {
	_u.mutation.ClearModuleName()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *InheritanceRelationshipUpdateOne) SetCreatedAt(v time.Time) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableCreatedAt(v *time.Time) *InheritanceRelationshipUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetChildID sets the "child" edge to the Symbol entity by ID.
func (_u *InheritanceRelationshipUpdateOne) SetChildID(id int) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetChildID(id)
	return _u
}

// SetNillableChildID sets the "child" edge to the Symbol entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableChildID(id *int) *InheritanceRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetChildID(*id)
	}
	return _u
}

// SetChild sets the "child" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdateOne) SetChild(v *Symbol) *InheritanceRelationshipUpdateOne {
	return _u.SetChildID(v.ID)
}

// SetParentID sets the "parent" edge to the Symbol entity by ID.
func (_u *InheritanceRelationshipUpdateOne) SetParentID(id int) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Symbol entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableParentID(id *int) *InheritanceRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdateOne) SetParent(v *Symbol) *InheritanceRelationshipUpdateOne {
	return _u.SetParentID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *InheritanceRelationshipUpdateOne) SetFileID(id int) *InheritanceRelationshipUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *InheritanceRelationshipUpdateOne) SetNillableFileID(id *int) *InheritanceRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *InheritanceRelationshipUpdateOne) SetFile(v *File) *InheritanceRelationshipUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the InheritanceRelationshipMutation object of the builder.
func (_u *InheritanceRelationshipUpdateOne) Mutation() *InheritanceRelationshipMutation {
	return _u.mutation
}

// ClearChild clears the "child" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdateOne) ClearChild() *InheritanceRelationshipUpdateOne {
	_u.mutation.ClearChild()
	return _u
}

// ClearParent clears the "parent" edge to the Symbol entity.
func (_u *InheritanceRelationshipUpdateOne) ClearParent() *InheritanceRelationshipUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *InheritanceRelationshipUpdateOne) ClearFile() *InheritanceRelationshipUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the InheritanceRelationshipUpdate builder.
func (_u *InheritanceRelationshipUpdateOne) Where(ps ...predicate.InheritanceRelationship) *InheritanceRelationshipUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InheritanceRelationshipUpdateOne) Select(field string, fields ...string) *InheritanceRelationshipUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated InheritanceRelationship entity.
func (_u *InheritanceRelationshipUpdateOne) Save(ctx context.Context) (*InheritanceRelationship, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InheritanceRelationshipUpdateOne) SaveX(ctx context.Context) *InheritanceRelationship {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InheritanceRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InheritanceRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InheritanceRelationshipUpdateOne) check() error {
	if v, ok := _u.mutation.RelationshipType(); ok {
		if err := inheritancerelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.relationship_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := inheritancerelationship.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.line_number": %w`, err)}
		}
	}
	return nil
}

func (_u *InheritanceRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *InheritanceRelationship, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inheritancerelationship.Table, inheritancerelationship.Columns, sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InheritanceRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inheritancerelationship.FieldID)
		for _, f := range fields {
			if !inheritancerelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inheritancerelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RelationshipType(); ok {
		_spec.SetField(inheritancerelationship.FieldRelationshipType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(inheritancerelationship.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(inheritancerelationship.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsDirectInheritance(); ok {
		_spec.SetField(inheritancerelationship.FieldIsDirectInheritance, field.TypeBool, value)
	}
	if value, ok := _u.mutation.InheritanceDepth(); ok {
		_spec.SetField(inheritancerelationship.FieldInheritanceDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInheritanceDepth(); ok {
		_spec.AddField(inheritancerelationship.FieldInheritanceDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ModuleName(); ok {
		_spec.SetField(inheritancerelationship.FieldModuleName, field.TypeString, value)
	}
	if _u.mutation.ModuleNameCleared() {
		_spec.ClearField(inheritancerelationship.FieldModuleName, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(inheritancerelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ChildTable,
			Columns: []string{inheritancerelationship.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ChildTable,
			Columns: []string{inheritancerelationship.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ParentTable,
			Columns: []string{inheritancerelationship.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ParentTable,
			Columns: []string{inheritancerelationship.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.FileTable,
			Columns: []string{inheritancerelationship.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.FileTable,
			Columns: []string{inheritancerelationship.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InheritanceRelationship{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inheritancerelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
