// Code generated by ent, DO NOT EDIT.

package astnode

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the astnode type in the database.
	Label = "ast_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNodeType holds the string denoting the node_type field in the database.
	FieldNodeType = "node_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQualifiedName holds the string denoting the qualified_name field in the database.
	FieldQualifiedName = "qualified_name"
	// FieldStartLine holds the string denoting the start_line field in the database.
	FieldStartLine = "start_line"
	// FieldEndLine holds the string denoting the end_line field in the database.
	FieldEndLine = "end_line"
	// FieldStartColumn holds the string denoting the start_column field in the database.
	FieldStartColumn = "start_column"
	// FieldEndColumn holds the string denoting the end_column field in the database.
	FieldEndColumn = "end_column"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldTreeSitterType holds the string denoting the tree_sitter_type field in the database.
	FieldTreeSitterType = "tree_sitter_type"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeSymbol holds the string denoting the symbol edge name in mutations.
	EdgeSymbol = "symbol"
	// EdgeReferences holds the string denoting the references edge name in mutations.
	EdgeReferences = "references"
	// Table holds the table name of the astnode in the database.
	Table = "ast_nodes"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "ast_nodes"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_ast_nodes"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "ast_nodes"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "ast_node_children"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "ast_nodes"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "ast_node_children"
	// SymbolTable is the table that holds the symbol relation/edge.
	SymbolTable = "symbols"
	// SymbolInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	SymbolInverseTable = "symbols"
	// SymbolColumn is the table column denoting the symbol relation/edge.
	SymbolColumn = "ast_node_symbol"
	// ReferencesTable is the table that holds the references relation/edge.
	ReferencesTable = "symbol_references"
	// ReferencesInverseTable is the table name for the SymbolReference entity.
	// It exists in this package in order to avoid circular dependency with the "symbolreference" package.
	ReferencesInverseTable = "symbol_references"
	// ReferencesColumn is the table column denoting the references relation/edge.
	ReferencesColumn = "context_node_id"
)

// Columns holds all SQL columns for astnode fields.
var Columns = []string{
	FieldID,
	FieldNodeType,
	FieldName,
	FieldQualifiedName,
	FieldStartLine,
	FieldEndLine,
	FieldStartColumn,
	FieldEndColumn,
	FieldContent,
	FieldTreeSitterType,
	FieldMetadata,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ast_nodes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ast_node_children",
	"file_ast_nodes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StartLineValidator is a validator for the "start_line" field. It is called by the builders before save.
	StartLineValidator func(int) error
	// EndLineValidator is a validator for the "end_line" field. It is called by the builders before save.
	EndLineValidator func(int) error
	// StartColumnValidator is a validator for the "start_column" field. It is called by the builders before save.
	StartColumnValidator func(int) error
	// EndColumnValidator is a validator for the "end_column" field. It is called by the builders before save.
	EndColumnValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// NodeType defines the type for the "node_type" enum field.
type NodeType string

// NodeType values.
const (
	NodeTypeModule      NodeType = "module"
	NodeTypeClass       NodeType = "class"
	NodeTypeFunction    NodeType = "function"
	NodeTypeMethod      NodeType = "method"
	NodeTypeVariable    NodeType = "variable"
	NodeTypeImport      NodeType = "import"
	NodeTypeCall        NodeType = "call"
	NodeTypeAssignment  NodeType = "assignment"
	NodeTypeIfStatement NodeType = "if_statement"
	NodeTypeForLoop     NodeType = "for_loop"
	NodeTypeWhileLoop   NodeType = "while_loop"
	NodeTypeTryCatch    NodeType = "try_catch"
	NodeTypeExpression  NodeType = "expression"
	NodeTypeLiteral     NodeType = "literal"
	NodeTypeIdentifier  NodeType = "identifier"
)

func (nt NodeType) String() string {
	return string(nt)
}

// NodeTypeValidator is a validator for the "node_type" field enum values. It is called by the builders before save.
func NodeTypeValidator(nt NodeType) error {
	switch nt {
	case NodeTypeModule, NodeTypeClass, NodeTypeFunction, NodeTypeMethod, NodeTypeVariable, NodeTypeImport, NodeTypeCall, NodeTypeAssignment, NodeTypeIfStatement, NodeTypeForLoop, NodeTypeWhileLoop, NodeTypeTryCatch, NodeTypeExpression, NodeTypeLiteral, NodeTypeIdentifier:
		return nil
	default:
		return fmt.Errorf("astnode: invalid enum value for node_type field: %q", nt)
	}
}

// OrderOption defines the ordering options for the ASTNode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNodeType orders the results by the node_type field.
func ByNodeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByQualifiedName orders the results by the qualified_name field.
func ByQualifiedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualifiedName, opts...).ToFunc()
}

// ByStartLine orders the results by the start_line field.
func ByStartLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartLine, opts...).ToFunc()
}

// ByEndLine orders the results by the end_line field.
func ByEndLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndLine, opts...).ToFunc()
}

// ByStartColumn orders the results by the start_column field.
func ByStartColumn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartColumn, opts...).ToFunc()
}

// ByEndColumn orders the results by the end_column field.
func ByEndColumn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndColumn, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByTreeSitterType orders the results by the tree_sitter_type field.
func ByTreeSitterType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTreeSitterType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// BySymbolField orders the results by symbol field.
func BySymbolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSymbolStep(), sql.OrderByField(field, opts...))
	}
}

// ByReferencesCount orders the results by references count.
func ByReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferencesStep(), opts...)
	}
}

// ByReferences orders the results by references terms.
func ByReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newSymbolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SymbolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SymbolTable, SymbolColumn),
	)
}
func newReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReferencesTable, ReferencesColumn),
	)
}
