// Code generated by ent, DO NOT EDIT.

package astnode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldName, v))
}

// QualifiedName applies equality check predicate on the "qualified_name" field. It's identical to QualifiedNameEQ.
func QualifiedName(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldQualifiedName, v))
}

// StartLine applies equality check predicate on the "start_line" field. It's identical to StartLineEQ.
func StartLine(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldStartLine, v))
}

// EndLine applies equality check predicate on the "end_line" field. It's identical to EndLineEQ.
func EndLine(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldEndLine, v))
}

// StartColumn applies equality check predicate on the "start_column" field. It's identical to StartColumnEQ.
func StartColumn(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldStartColumn, v))
}

// EndColumn applies equality check predicate on the "end_column" field. It's identical to EndColumnEQ.
func EndColumn(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldEndColumn, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldContent, v))
}

// TreeSitterType applies equality check predicate on the "tree_sitter_type" field. It's identical to TreeSitterTypeEQ.
func TreeSitterType(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldTreeSitterType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldCreatedAt, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v NodeType) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v NodeType) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...NodeType) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...NodeType) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldNodeType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContainsFold(FieldName, v))
}

// QualifiedNameEQ applies the EQ predicate on the "qualified_name" field.
func QualifiedNameEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldQualifiedName, v))
}

// QualifiedNameNEQ applies the NEQ predicate on the "qualified_name" field.
func QualifiedNameNEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldQualifiedName, v))
}

// QualifiedNameIn applies the In predicate on the "qualified_name" field.
func QualifiedNameIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldQualifiedName, vs...))
}

// QualifiedNameNotIn applies the NotIn predicate on the "qualified_name" field.
func QualifiedNameNotIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldQualifiedName, vs...))
}

// QualifiedNameGT applies the GT predicate on the "qualified_name" field.
func QualifiedNameGT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldQualifiedName, v))
}

// QualifiedNameGTE applies the GTE predicate on the "qualified_name" field.
func QualifiedNameGTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldQualifiedName, v))
}

// QualifiedNameLT applies the LT predicate on the "qualified_name" field.
func QualifiedNameLT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldQualifiedName, v))
}

// QualifiedNameLTE applies the LTE predicate on the "qualified_name" field.
func QualifiedNameLTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldQualifiedName, v))
}

// QualifiedNameContains applies the Contains predicate on the "qualified_name" field.
func QualifiedNameContains(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContains(FieldQualifiedName, v))
}

// QualifiedNameHasPrefix applies the HasPrefix predicate on the "qualified_name" field.
func QualifiedNameHasPrefix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasPrefix(FieldQualifiedName, v))
}

// QualifiedNameHasSuffix applies the HasSuffix predicate on the "qualified_name" field.
func QualifiedNameHasSuffix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasSuffix(FieldQualifiedName, v))
}

// QualifiedNameIsNil applies the IsNil predicate on the "qualified_name" field.
func QualifiedNameIsNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIsNull(FieldQualifiedName))
}

// QualifiedNameNotNil applies the NotNil predicate on the "qualified_name" field.
func QualifiedNameNotNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotNull(FieldQualifiedName))
}

// QualifiedNameEqualFold applies the EqualFold predicate on the "qualified_name" field.
func QualifiedNameEqualFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEqualFold(FieldQualifiedName, v))
}

// QualifiedNameContainsFold applies the ContainsFold predicate on the "qualified_name" field.
func QualifiedNameContainsFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContainsFold(FieldQualifiedName, v))
}

// StartLineEQ applies the EQ predicate on the "start_line" field.
func StartLineEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldStartLine, v))
}

// StartLineNEQ applies the NEQ predicate on the "start_line" field.
func StartLineNEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldStartLine, v))
}

// StartLineIn applies the In predicate on the "start_line" field.
func StartLineIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldStartLine, vs...))
}

// StartLineNotIn applies the NotIn predicate on the "start_line" field.
func StartLineNotIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldStartLine, vs...))
}

// StartLineGT applies the GT predicate on the "start_line" field.
func StartLineGT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldStartLine, v))
}

// StartLineGTE applies the GTE predicate on the "start_line" field.
func StartLineGTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldStartLine, v))
}

// StartLineLT applies the LT predicate on the "start_line" field.
func StartLineLT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldStartLine, v))
}

// StartLineLTE applies the LTE predicate on the "start_line" field.
func StartLineLTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldStartLine, v))
}

// EndLineEQ applies the EQ predicate on the "end_line" field.
func EndLineEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldEndLine, v))
}

// EndLineNEQ applies the NEQ predicate on the "end_line" field.
func EndLineNEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldEndLine, v))
}

// EndLineIn applies the In predicate on the "end_line" field.
func EndLineIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldEndLine, vs...))
}

// EndLineNotIn applies the NotIn predicate on the "end_line" field.
func EndLineNotIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldEndLine, vs...))
}

// EndLineGT applies the GT predicate on the "end_line" field.
func EndLineGT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldEndLine, v))
}

// EndLineGTE applies the GTE predicate on the "end_line" field.
func EndLineGTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldEndLine, v))
}

// EndLineLT applies the LT predicate on the "end_line" field.
func EndLineLT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldEndLine, v))
}

// EndLineLTE applies the LTE predicate on the "end_line" field.
func EndLineLTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldEndLine, v))
}

// StartColumnEQ applies the EQ predicate on the "start_column" field.
func StartColumnEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldStartColumn, v))
}

// StartColumnNEQ applies the NEQ predicate on the "start_column" field.
func StartColumnNEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldStartColumn, v))
}

// StartColumnIn applies the In predicate on the "start_column" field.
func StartColumnIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldStartColumn, vs...))
}

// StartColumnNotIn applies the NotIn predicate on the "start_column" field.
func StartColumnNotIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldStartColumn, vs...))
}

// StartColumnGT applies the GT predicate on the "start_column" field.
func StartColumnGT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldStartColumn, v))
}

// StartColumnGTE applies the GTE predicate on the "start_column" field.
func StartColumnGTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldStartColumn, v))
}

// StartColumnLT applies the LT predicate on the "start_column" field.
func StartColumnLT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldStartColumn, v))
}

// StartColumnLTE applies the LTE predicate on the "start_column" field.
func StartColumnLTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldStartColumn, v))
}

// EndColumnEQ applies the EQ predicate on the "end_column" field.
func EndColumnEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldEndColumn, v))
}

// EndColumnNEQ applies the NEQ predicate on the "end_column" field.
func EndColumnNEQ(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldEndColumn, v))
}

// EndColumnIn applies the In predicate on the "end_column" field.
func EndColumnIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldEndColumn, vs...))
}

// EndColumnNotIn applies the NotIn predicate on the "end_column" field.
func EndColumnNotIn(vs ...int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldEndColumn, vs...))
}

// EndColumnGT applies the GT predicate on the "end_column" field.
func EndColumnGT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldEndColumn, v))
}

// EndColumnGTE applies the GTE predicate on the "end_column" field.
func EndColumnGTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldEndColumn, v))
}

// EndColumnLT applies the LT predicate on the "end_column" field.
func EndColumnLT(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldEndColumn, v))
}

// EndColumnLTE applies the LTE predicate on the "end_column" field.
func EndColumnLTE(v int) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldEndColumn, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContainsFold(FieldContent, v))
}

// TreeSitterTypeEQ applies the EQ predicate on the "tree_sitter_type" field.
func TreeSitterTypeEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldTreeSitterType, v))
}

// TreeSitterTypeNEQ applies the NEQ predicate on the "tree_sitter_type" field.
func TreeSitterTypeNEQ(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldTreeSitterType, v))
}

// TreeSitterTypeIn applies the In predicate on the "tree_sitter_type" field.
func TreeSitterTypeIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldTreeSitterType, vs...))
}

// TreeSitterTypeNotIn applies the NotIn predicate on the "tree_sitter_type" field.
func TreeSitterTypeNotIn(vs ...string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldTreeSitterType, vs...))
}

// TreeSitterTypeGT applies the GT predicate on the "tree_sitter_type" field.
func TreeSitterTypeGT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldTreeSitterType, v))
}

// TreeSitterTypeGTE applies the GTE predicate on the "tree_sitter_type" field.
func TreeSitterTypeGTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldTreeSitterType, v))
}

// TreeSitterTypeLT applies the LT predicate on the "tree_sitter_type" field.
func TreeSitterTypeLT(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldTreeSitterType, v))
}

// TreeSitterTypeLTE applies the LTE predicate on the "tree_sitter_type" field.
func TreeSitterTypeLTE(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldTreeSitterType, v))
}

// TreeSitterTypeContains applies the Contains predicate on the "tree_sitter_type" field.
func TreeSitterTypeContains(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContains(FieldTreeSitterType, v))
}

// TreeSitterTypeHasPrefix applies the HasPrefix predicate on the "tree_sitter_type" field.
func TreeSitterTypeHasPrefix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasPrefix(FieldTreeSitterType, v))
}

// TreeSitterTypeHasSuffix applies the HasSuffix predicate on the "tree_sitter_type" field.
func TreeSitterTypeHasSuffix(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldHasSuffix(FieldTreeSitterType, v))
}

// TreeSitterTypeIsNil applies the IsNil predicate on the "tree_sitter_type" field.
func TreeSitterTypeIsNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIsNull(FieldTreeSitterType))
}

// TreeSitterTypeNotNil applies the NotNil predicate on the "tree_sitter_type" field.
func TreeSitterTypeNotNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotNull(FieldTreeSitterType))
}

// TreeSitterTypeEqualFold applies the EqualFold predicate on the "tree_sitter_type" field.
func TreeSitterTypeEqualFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEqualFold(FieldTreeSitterType, v))
}

// TreeSitterTypeContainsFold applies the ContainsFold predicate on the "tree_sitter_type" field.
func TreeSitterTypeContainsFold(v string) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldContainsFold(FieldTreeSitterType, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ASTNode {
	return predicate.ASTNode(sql.FieldLTE(FieldCreatedAt, v))
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.ASTNode) predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.ASTNode) predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymbol applies the HasEdge predicate on the "symbol" edge.
func HasSymbol() predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SymbolTable, SymbolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymbolWith applies the HasEdge predicate on the "symbol" edge with a given conditions (other predicates).
func HasSymbolWith(preds ...predicate.Symbol) predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := newSymbolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferences applies the HasEdge predicate on the "references" edge.
func HasReferences() predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReferencesTable, ReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferencesWith applies the HasEdge predicate on the "references" edge with a given conditions (other predicates).
func HasReferencesWith(preds ...predicate.SymbolReference) predicate.ASTNode {
	return predicate.ASTNode(func(s *sql.Selector) {
		step := newReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ASTNode) predicate.ASTNode {
	return predicate.ASTNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ASTNode) predicate.ASTNode {
	return predicate.ASTNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ASTNode) predicate.ASTNode {
	return predicate.ASTNode(sql.NotPredicates(p))
}
