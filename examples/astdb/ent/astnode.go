// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// ASTNode is the model entity for the ASTNode schema.
type ASTNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NodeType holds the value of the "node_type" field.
	NodeType astnode.NodeType `json:"node_type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// QualifiedName holds the value of the "qualified_name" field.
	QualifiedName string `json:"qualified_name,omitempty"`
	// StartLine holds the value of the "start_line" field.
	StartLine int `json:"start_line,omitempty"`
	// EndLine holds the value of the "end_line" field.
	EndLine int `json:"end_line,omitempty"`
	// StartColumn holds the value of the "start_column" field.
	StartColumn int `json:"start_column,omitempty"`
	// EndColumn holds the value of the "end_column" field.
	EndColumn int `json:"end_column,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// TreeSitterType holds the value of the "tree_sitter_type" field.
	TreeSitterType string `json:"tree_sitter_type,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ASTNodeQuery when eager-loading is set.
	Edges             ASTNodeEdges `json:"edges"`
	ast_node_children *int
	file_ast_nodes    *int
	selectValues      sql.SelectValues
}

// ASTNodeEdges holds the relations/edges for other nodes in the graph.
type ASTNodeEdges struct {
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// Children holds the value of the children edge.
	Children []*ASTNode `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *ASTNode `json:"parent,omitempty"`
	// Symbol holds the value of the symbol edge.
	Symbol *Symbol `json:"symbol,omitempty"`
	// References holds the value of the references edge.
	References []*SymbolReference `json:"references,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ASTNodeEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ASTNodeEdges) ChildrenOrErr() ([]*ASTNode, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ASTNodeEdges) ParentOrErr() (*ASTNode, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: astnode.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// SymbolOrErr returns the Symbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ASTNodeEdges) SymbolOrErr() (*Symbol, error) {
	if e.Symbol != nil {
		return e.Symbol, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "symbol"}
}

// ReferencesOrErr returns the References value or an error if the edge
// was not loaded in eager-loading.
func (e ASTNodeEdges) ReferencesOrErr() ([]*SymbolReference, error) {
	if e.loadedTypes[4] {
		return e.References, nil
	}
	return nil, &NotLoadedError{edge: "references"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ASTNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case astnode.FieldMetadata:
			values[i] = new([]byte)
		case astnode.FieldID, astnode.FieldStartLine, astnode.FieldEndLine, astnode.FieldStartColumn, astnode.FieldEndColumn:
			values[i] = new(sql.NullInt64)
		case astnode.FieldNodeType, astnode.FieldName, astnode.FieldQualifiedName, astnode.FieldContent, astnode.FieldTreeSitterType:
			values[i] = new(sql.NullString)
		case astnode.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case astnode.ForeignKeys[0]: // ast_node_children
			values[i] = new(sql.NullInt64)
		case astnode.ForeignKeys[1]: // file_ast_nodes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ASTNode fields.
func (_m *ASTNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case astnode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case astnode.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				_m.NodeType = astnode.NodeType(value.String)
			}
		case astnode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case astnode.FieldQualifiedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qualified_name", values[i])
			} else if value.Valid {
				_m.QualifiedName = value.String
			}
		case astnode.FieldStartLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_line", values[i])
			} else if value.Valid {
				_m.StartLine = int(value.Int64)
			}
		case astnode.FieldEndLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_line", values[i])
			} else if value.Valid {
				_m.EndLine = int(value.Int64)
			}
		case astnode.FieldStartColumn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_column", values[i])
			} else if value.Valid {
				_m.StartColumn = int(value.Int64)
			}
		case astnode.FieldEndColumn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_column", values[i])
			} else if value.Valid {
				_m.EndColumn = int(value.Int64)
			}
		case astnode.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case astnode.FieldTreeSitterType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tree_sitter_type", values[i])
			} else if value.Valid {
				_m.TreeSitterType = value.String
			}
		case astnode.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case astnode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case astnode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ast_node_children", value)
			} else if value.Valid {
				_m.ast_node_children = new(int)
				*_m.ast_node_children = int(value.Int64)
			}
		case astnode.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_ast_nodes", value)
			} else if value.Valid {
				_m.file_ast_nodes = new(int)
				*_m.file_ast_nodes = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ASTNode.
// This includes values selected through modifiers, order, etc.
func (_m *ASTNode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the ASTNode entity.
func (_m *ASTNode) QueryFile() *FileQuery {
	return NewASTNodeClient(_m.config).QueryFile(_m)
}

// QueryChildren queries the "children" edge of the ASTNode entity.
func (_m *ASTNode) QueryChildren() *ASTNodeQuery {
	return NewASTNodeClient(_m.config).QueryChildren(_m)
}

// QueryParent queries the "parent" edge of the ASTNode entity.
func (_m *ASTNode) QueryParent() *ASTNodeQuery {
	return NewASTNodeClient(_m.config).QueryParent(_m)
}

// QuerySymbol queries the "symbol" edge of the ASTNode entity.
func (_m *ASTNode) QuerySymbol() *SymbolQuery {
	return NewASTNodeClient(_m.config).QuerySymbol(_m)
}

// QueryReferences queries the "references" edge of the ASTNode entity.
func (_m *ASTNode) QueryReferences() *SymbolReferenceQuery {
	return NewASTNodeClient(_m.config).QueryReferences(_m)
}

// Update returns a builder for updating this ASTNode.
// Note that you need to call ASTNode.Unwrap() before calling this method if this ASTNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ASTNode) Update() *ASTNodeUpdateOne {
	return NewASTNodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ASTNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ASTNode) Unwrap() *ASTNode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ASTNode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ASTNode) String() string {
	var builder strings.Builder
	builder.WriteString("ASTNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("node_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.NodeType))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("qualified_name=")
	builder.WriteString(_m.QualifiedName)
	builder.WriteString(", ")
	builder.WriteString("start_line=")
	builder.WriteString(fmt.Sprintf("%v", _m.StartLine))
	builder.WriteString(", ")
	builder.WriteString("end_line=")
	builder.WriteString(fmt.Sprintf("%v", _m.EndLine))
	builder.WriteString(", ")
	builder.WriteString("start_column=")
	builder.WriteString(fmt.Sprintf("%v", _m.StartColumn))
	builder.WriteString(", ")
	builder.WriteString("end_column=")
	builder.WriteString(fmt.Sprintf("%v", _m.EndColumn))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("tree_sitter_type=")
	builder.WriteString(_m.TreeSitterType)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ASTNodes is a parsable slice of ASTNode.
type ASTNodes []*ASTNode
