// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// SymbolReferenceUpdate is the builder for updating SymbolReference entities.
type SymbolReferenceUpdate struct {
	config
	hooks    []Hook
	mutation *SymbolReferenceMutation
}

// Where appends a list predicates to the SymbolReferenceUpdate builder.
func (_u *SymbolReferenceUpdate) Where(ps ...predicate.SymbolReference) *SymbolReferenceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLineNumber sets the "line_number" field.
func (_u *SymbolReferenceUpdate) SetLineNumber(v int) *SymbolReferenceUpdate {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableLineNumber(v *int) *SymbolReferenceUpdate {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *SymbolReferenceUpdate) AddLineNumber(v int) *SymbolReferenceUpdate {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetColumnNumber sets the "column_number" field.
func (_u *SymbolReferenceUpdate) SetColumnNumber(v int) *SymbolReferenceUpdate {
	_u.mutation.ResetColumnNumber()
	_u.mutation.SetColumnNumber(v)
	return _u
}

// SetNillableColumnNumber sets the "column_number" field if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableColumnNumber(v *int) *SymbolReferenceUpdate {
	if v != nil {
		_u.SetColumnNumber(*v)
	}
	return _u
}

// AddColumnNumber adds value to the "column_number" field.
func (_u *SymbolReferenceUpdate) AddColumnNumber(v int) *SymbolReferenceUpdate {
	_u.mutation.AddColumnNumber(v)
	return _u
}

// SetReferenceType sets the "reference_type" field.
func (_u *SymbolReferenceUpdate) SetReferenceType(v symbolreference.ReferenceType) *SymbolReferenceUpdate {
	_u.mutation.SetReferenceType(v)
	return _u
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableReferenceType(v *symbolreference.ReferenceType) *SymbolReferenceUpdate {
	if v != nil {
		_u.SetReferenceType(*v)
	}
	return _u
}

// SetContext sets the "context" field.
func (_u *SymbolReferenceUpdate) SetContext(v string) *SymbolReferenceUpdate {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableContext(v *string) *SymbolReferenceUpdate {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SymbolReferenceUpdate) ClearContext() *SymbolReferenceUpdate {
	_u.mutation.ClearContext()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SymbolReferenceUpdate) SetCreatedAt(v time.Time) *SymbolReferenceUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableCreatedAt(v *time.Time) *SymbolReferenceUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_u *SymbolReferenceUpdate) SetSymbolID(id int) *SymbolReferenceUpdate {
	_u.mutation.SetSymbolID(id)
	return _u
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableSymbolID(id *int) *SymbolReferenceUpdate {
	if id != nil {
		_u = _u.SetSymbolID(*id)
	}
	return _u
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_u *SymbolReferenceUpdate) SetSymbol(v *Symbol) *SymbolReferenceUpdate {
	return _u.SetSymbolID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *SymbolReferenceUpdate) SetFileID(id int) *SymbolReferenceUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableFileID(id *int) *SymbolReferenceUpdate {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *SymbolReferenceUpdate) SetFile(v *File) *SymbolReferenceUpdate {
	return _u.SetFileID(v.ID)
}

// SetContextNodeID sets the "context_node" edge to the ASTNode entity by ID.
func (_u *SymbolReferenceUpdate) SetContextNodeID(id int) *SymbolReferenceUpdate {
	_u.mutation.SetContextNodeID(id)
	return _u
}

// SetNillableContextNodeID sets the "context_node" edge to the ASTNode entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdate) SetNillableContextNodeID(id *int) *SymbolReferenceUpdate {
	if id != nil {
		_u = _u.SetContextNodeID(*id)
	}
	return _u
}

// SetContextNode sets the "context_node" edge to the ASTNode entity.
func (_u *SymbolReferenceUpdate) SetContextNode(v *ASTNode) *SymbolReferenceUpdate {
	return _u.SetContextNodeID(v.ID)
}

// Mutation returns the SymbolReferenceMutation object of the builder.
func (_u *SymbolReferenceUpdate) Mutation() *SymbolReferenceMutation {
	return _u.mutation
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (_u *SymbolReferenceUpdate) ClearSymbol() *SymbolReferenceUpdate {
	_u.mutation.ClearSymbol()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *SymbolReferenceUpdate) ClearFile() *SymbolReferenceUpdate {
	_u.mutation.ClearFile()
	return _u
}

// ClearContextNode clears the "context_node" edge to the ASTNode entity.
func (_u *SymbolReferenceUpdate) ClearContextNode() *SymbolReferenceUpdate {
	_u.mutation.ClearContextNode()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SymbolReferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SymbolReferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SymbolReferenceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SymbolReferenceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SymbolReferenceUpdate) check() error {
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := symbolreference.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.line_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColumnNumber(); ok {
		if err := symbolreference.ColumnNumberValidator(v); err != nil {
			return &ValidationError{Name: "column_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.column_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReferenceType(); ok {
		if err := symbolreference.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.reference_type": %w`, err)}
		}
	}
	return nil
}

func (_u *SymbolReferenceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(symbolreference.Table, symbolreference.Columns, sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(symbolreference.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(symbolreference.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ColumnNumber(); ok {
		_spec.SetField(symbolreference.FieldColumnNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedColumnNumber(); ok {
		_spec.AddField(symbolreference.FieldColumnNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ReferenceType(); ok {
		_spec.SetField(symbolreference.FieldReferenceType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(symbolreference.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(symbolreference.FieldContext, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(symbolreference.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.SymbolTable,
			Columns: []string{symbolreference.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.SymbolTable,
			Columns: []string{symbolreference.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.FileTable,
			Columns: []string{symbolreference.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.FileTable,
			Columns: []string{symbolreference.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContextNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.ContextNodeTable,
			Columns: []string{symbolreference.ContextNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContextNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.ContextNodeTable,
			Columns: []string{symbolreference.ContextNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{symbolreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SymbolReferenceUpdateOne is the builder for updating a single SymbolReference entity.
type SymbolReferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SymbolReferenceMutation
}

// SetLineNumber sets the "line_number" field.
func (_u *SymbolReferenceUpdateOne) SetLineNumber(v int) *SymbolReferenceUpdateOne {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableLineNumber(v *int) *SymbolReferenceUpdateOne {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *SymbolReferenceUpdateOne) AddLineNumber(v int) *SymbolReferenceUpdateOne {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetColumnNumber sets the "column_number" field.
func (_u *SymbolReferenceUpdateOne) SetColumnNumber(v int) *SymbolReferenceUpdateOne {
	_u.mutation.ResetColumnNumber()
	_u.mutation.SetColumnNumber(v)
	return _u
}

// SetNillableColumnNumber sets the "column_number" field if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableColumnNumber(v *int) *SymbolReferenceUpdateOne {
	if v != nil {
		_u.SetColumnNumber(*v)
	}
	return _u
}

// AddColumnNumber adds value to the "column_number" field.
func (_u *SymbolReferenceUpdateOne) AddColumnNumber(v int) *SymbolReferenceUpdateOne {
	_u.mutation.AddColumnNumber(v)
	return _u
}

// SetReferenceType sets the "reference_type" field.
func (_u *SymbolReferenceUpdateOne) SetReferenceType(v symbolreference.ReferenceType) *SymbolReferenceUpdateOne {
	_u.mutation.SetReferenceType(v)
	return _u
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableReferenceType(v *symbolreference.ReferenceType) *SymbolReferenceUpdateOne {
	if v != nil {
		_u.SetReferenceType(*v)
	}
	return _u
}

// SetContext sets the "context" field.
func (_u *SymbolReferenceUpdateOne) SetContext(v string) *SymbolReferenceUpdateOne {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableContext(v *string) *SymbolReferenceUpdateOne {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SymbolReferenceUpdateOne) ClearContext() *SymbolReferenceUpdateOne {
	_u.mutation.ClearContext()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SymbolReferenceUpdateOne) SetCreatedAt(v time.Time) *SymbolReferenceUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableCreatedAt(v *time.Time) *SymbolReferenceUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_u *SymbolReferenceUpdateOne) SetSymbolID(id int) *SymbolReferenceUpdateOne {
	_u.mutation.SetSymbolID(id)
	return _u
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableSymbolID(id *int) *SymbolReferenceUpdateOne {
	if id != nil {
		_u = _u.SetSymbolID(*id)
	}
	return _u
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_u *SymbolReferenceUpdateOne) SetSymbol(v *Symbol) *SymbolReferenceUpdateOne {
	return _u.SetSymbolID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *SymbolReferenceUpdateOne) SetFileID(id int) *SymbolReferenceUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableFileID(id *int) *SymbolReferenceUpdateOne {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *SymbolReferenceUpdateOne) SetFile(v *File) *SymbolReferenceUpdateOne {
	return _u.SetFileID(v.ID)
}

// SetContextNodeID sets the "context_node" edge to the ASTNode entity by ID.
func (_u *SymbolReferenceUpdateOne) SetContextNodeID(id int) *SymbolReferenceUpdateOne {
	_u.mutation.SetContextNodeID(id)
	return _u
}

// SetNillableContextNodeID sets the "context_node" edge to the ASTNode entity by ID if the given value is not nil.
func (_u *SymbolReferenceUpdateOne) SetNillableContextNodeID(id *int) *SymbolReferenceUpdateOne {
	if id != nil {
		_u = _u.SetContextNodeID(*id)
	}
	return _u
}

// SetContextNode sets the "context_node" edge to the ASTNode entity.
func (_u *SymbolReferenceUpdateOne) SetContextNode(v *ASTNode) *SymbolReferenceUpdateOne {
	return _u.SetContextNodeID(v.ID)
}

// Mutation returns the SymbolReferenceMutation object of the builder.
func (_u *SymbolReferenceUpdateOne) Mutation() *SymbolReferenceMutation {
	return _u.mutation
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (_u *SymbolReferenceUpdateOne) ClearSymbol() *SymbolReferenceUpdateOne {
	_u.mutation.ClearSymbol()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *SymbolReferenceUpdateOne) ClearFile() *SymbolReferenceUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// ClearContextNode clears the "context_node" edge to the ASTNode entity.
func (_u *SymbolReferenceUpdateOne) ClearContextNode() *SymbolReferenceUpdateOne {
	_u.mutation.ClearContextNode()
	return _u
}

// Where appends a list predicates to the SymbolReferenceUpdate builder.
func (_u *SymbolReferenceUpdateOne) Where(ps ...predicate.SymbolReference) *SymbolReferenceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SymbolReferenceUpdateOne) Select(field string, fields ...string) *SymbolReferenceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SymbolReference entity.
func (_u *SymbolReferenceUpdateOne) Save(ctx context.Context) (*SymbolReference, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SymbolReferenceUpdateOne) SaveX(ctx context.Context) *SymbolReference {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SymbolReferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SymbolReferenceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SymbolReferenceUpdateOne) check() error {
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := symbolreference.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.line_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColumnNumber(); ok {
		if err := symbolreference.ColumnNumberValidator(v); err != nil {
			return &ValidationError{Name: "column_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.column_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReferenceType(); ok {
		if err := symbolreference.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.reference_type": %w`, err)}
		}
	}
	return nil
}

func (_u *SymbolReferenceUpdateOne) sqlSave(ctx context.Context) (_node *SymbolReference, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(symbolreference.Table, symbolreference.Columns, sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SymbolReference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, symbolreference.FieldID)
		for _, f := range fields {
			if !symbolreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != symbolreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(symbolreference.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(symbolreference.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ColumnNumber(); ok {
		_spec.SetField(symbolreference.FieldColumnNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedColumnNumber(); ok {
		_spec.AddField(symbolreference.FieldColumnNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ReferenceType(); ok {
		_spec.SetField(symbolreference.FieldReferenceType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(symbolreference.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(symbolreference.FieldContext, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(symbolreference.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.SymbolTable,
			Columns: []string{symbolreference.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.SymbolTable,
			Columns: []string{symbolreference.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.FileTable,
			Columns: []string{symbolreference.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.FileTable,
			Columns: []string{symbolreference.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContextNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.ContextNodeTable,
			Columns: []string{symbolreference.ContextNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContextNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.ContextNodeTable,
			Columns: []string{symbolreference.ContextNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SymbolReference{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{symbolreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
