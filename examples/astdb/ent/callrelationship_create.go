// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// CallRelationshipCreate is the builder for creating a CallRelationship entity.
type CallRelationshipCreate struct {
	config
	mutation *CallRelationshipMutation
	hooks    []Hook
}

// SetCallSiteLine sets the "call_site_line" field.
func (_c *CallRelationshipCreate) SetCallSiteLine(v int) *CallRelationshipCreate {
	_c.mutation.SetCallSiteLine(v)
	return _c
}

// SetCallSiteColumn sets the "call_site_column" field.
func (_c *CallRelationshipCreate) SetCallSiteColumn(v int) *CallRelationshipCreate {
	_c.mutation.SetCallSiteColumn(v)
	return _c
}

// SetCallType sets the "call_type" field.
func (_c *CallRelationshipCreate) SetCallType(v callrelationship.CallType) *CallRelationshipCreate {
	_c.mutation.SetCallType(v)
	return _c
}

// SetIsConditional sets the "is_conditional" field.
func (_c *CallRelationshipCreate) SetIsConditional(v bool) *CallRelationshipCreate {
	_c.mutation.SetIsConditional(v)
	return _c
}

// SetNillableIsConditional sets the "is_conditional" field if the given value is not nil.
func (_c *CallRelationshipCreate) SetNillableIsConditional(v *bool) *CallRelationshipCreate {
	if v != nil {
		_c.SetIsConditional(*v)
	}
	return _c
}

// SetArguments sets the "arguments" field.
func (_c *CallRelationshipCreate) SetArguments(v []string) *CallRelationshipCreate {
	_c.mutation.SetArguments(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CallRelationshipCreate) SetCreatedAt(v time.Time) *CallRelationshipCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CallRelationshipCreate) SetNillableCreatedAt(v *time.Time) *CallRelationshipCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetCallerID sets the "caller" edge to the Symbol entity by ID.
func (_c *CallRelationshipCreate) SetCallerID(id int) *CallRelationshipCreate {
	_c.mutation.SetCallerID(id)
	return _c
}

// SetNillableCallerID sets the "caller" edge to the Symbol entity by ID if the given value is not nil.
func (_c *CallRelationshipCreate) SetNillableCallerID(id *int) *CallRelationshipCreate {
	if id != nil {
		_c = _c.SetCallerID(*id)
	}
	return _c
}

// SetCaller sets the "caller" edge to the Symbol entity.
func (_c *CallRelationshipCreate) SetCaller(v *Symbol) *CallRelationshipCreate {
	return _c.SetCallerID(v.ID)
}

// SetCalleeID sets the "callee" edge to the Symbol entity by ID.
func (_c *CallRelationshipCreate) SetCalleeID(id int) *CallRelationshipCreate {
	_c.mutation.SetCalleeID(id)
	return _c
}

// SetNillableCalleeID sets the "callee" edge to the Symbol entity by ID if the given value is not nil.
func (_c *CallRelationshipCreate) SetNillableCalleeID(id *int) *CallRelationshipCreate {
	if id != nil {
		_c = _c.SetCalleeID(*id)
	}
	return _c
}

// SetCallee sets the "callee" edge to the Symbol entity.
func (_c *CallRelationshipCreate) SetCallee(v *Symbol) *CallRelationshipCreate {
	return _c.SetCalleeID(v.ID)
}

// SetCallSiteFileID sets the "call_site_file" edge to the File entity by ID.
func (_c *CallRelationshipCreate) SetCallSiteFileID(id int) *CallRelationshipCreate {
	_c.mutation.SetCallSiteFileID(id)
	return _c
}

// SetNillableCallSiteFileID sets the "call_site_file" edge to the File entity by ID if the given value is not nil.
func (_c *CallRelationshipCreate) SetNillableCallSiteFileID(id *int) *CallRelationshipCreate {
	if id != nil {
		_c = _c.SetCallSiteFileID(*id)
	}
	return _c
}

// SetCallSiteFile sets the "call_site_file" edge to the File entity.
func (_c *CallRelationshipCreate) SetCallSiteFile(v *File) *CallRelationshipCreate {
	return _c.SetCallSiteFileID(v.ID)
}

// Mutation returns the CallRelationshipMutation object of the builder.
func (_c *CallRelationshipCreate) Mutation() *CallRelationshipMutation {
	return _c.mutation
}

// Save creates the CallRelationship in the database.
func (_c *CallRelationshipCreate) Save(ctx context.Context) (*CallRelationship, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CallRelationshipCreate) SaveX(ctx context.Context) *CallRelationship {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CallRelationshipCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CallRelationshipCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CallRelationshipCreate) defaults() {
	if _, ok := _c.mutation.IsConditional(); !ok {
		v := callrelationship.DefaultIsConditional
		_c.mutation.SetIsConditional(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := callrelationship.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CallRelationshipCreate) check() error {
	if _, ok := _c.mutation.CallSiteLine(); !ok {
		return &ValidationError{Name: "call_site_line", err: errors.New(`ent: missing required field "CallRelationship.call_site_line"`)}
	}
	if v, ok := _c.mutation.CallSiteLine(); ok {
		if err := callrelationship.CallSiteLineValidator(v); err != nil {
			return &ValidationError{Name: "call_site_line", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_line": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CallSiteColumn(); !ok {
		return &ValidationError{Name: "call_site_column", err: errors.New(`ent: missing required field "CallRelationship.call_site_column"`)}
	}
	if v, ok := _c.mutation.CallSiteColumn(); ok {
		if err := callrelationship.CallSiteColumnValidator(v); err != nil {
			return &ValidationError{Name: "call_site_column", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_column": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CallType(); !ok {
		return &ValidationError{Name: "call_type", err: errors.New(`ent: missing required field "CallRelationship.call_type"`)}
	}
	if v, ok := _c.mutation.CallType(); ok {
		if err := callrelationship.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsConditional(); !ok {
		return &ValidationError{Name: "is_conditional", err: errors.New(`ent: missing required field "CallRelationship.is_conditional"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CallRelationship.created_at"`)}
	}
	return nil
}

func (_c *CallRelationshipCreate) sqlSave(ctx context.Context) (*CallRelationship, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CallRelationshipCreate) createSpec() (*CallRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &CallRelationship{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(callrelationship.Table, sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CallSiteLine(); ok {
		_spec.SetField(callrelationship.FieldCallSiteLine, field.TypeInt, value)
		_node.CallSiteLine = value
	}
	if value, ok := _c.mutation.CallSiteColumn(); ok {
		_spec.SetField(callrelationship.FieldCallSiteColumn, field.TypeInt, value)
		_node.CallSiteColumn = value
	}
	if value, ok := _c.mutation.CallType(); ok {
		_spec.SetField(callrelationship.FieldCallType, field.TypeEnum, value)
		_node.CallType = value
	}
	if value, ok := _c.mutation.IsConditional(); ok {
		_spec.SetField(callrelationship.FieldIsConditional, field.TypeBool, value)
		_node.IsConditional = value
	}
	if value, ok := _c.mutation.Arguments(); ok {
		_spec.SetField(callrelationship.FieldArguments, field.TypeJSON, value)
		_node.Arguments = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(callrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallerTable,
			Columns: []string{callrelationship.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.caller_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CalleeTable,
			Columns: []string{callrelationship.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.callee_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CallSiteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallSiteFileTable,
			Columns: []string{callrelationship.CallSiteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.call_site_file_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CallRelationshipCreateBulk is the builder for creating many CallRelationship entities in bulk.
type CallRelationshipCreateBulk struct {
	config
	err      error
	builders []*CallRelationshipCreate
}

// Save creates the CallRelationship entities in the database.
func (_c *CallRelationshipCreateBulk) Save(ctx context.Context) ([]*CallRelationship, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*CallRelationship, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CallRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CallRelationshipCreateBulk) SaveX(ctx context.Context) []*CallRelationship {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CallRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CallRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
