// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// CallRelationshipUpdate is the builder for updating CallRelationship entities.
type CallRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *CallRelationshipMutation
}

// Where appends a list predicates to the CallRelationshipUpdate builder.
func (_u *CallRelationshipUpdate) Where(ps ...predicate.CallRelationship) *CallRelationshipUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCallSiteLine sets the "call_site_line" field.
func (_u *CallRelationshipUpdate) SetCallSiteLine(v int) *CallRelationshipUpdate {
	_u.mutation.ResetCallSiteLine()
	_u.mutation.SetCallSiteLine(v)
	return _u
}

// SetNillableCallSiteLine sets the "call_site_line" field if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCallSiteLine(v *int) *CallRelationshipUpdate {
	if v != nil {
		_u.SetCallSiteLine(*v)
	}
	return _u
}

// AddCallSiteLine adds value to the "call_site_line" field.
func (_u *CallRelationshipUpdate) AddCallSiteLine(v int) *CallRelationshipUpdate {
	_u.mutation.AddCallSiteLine(v)
	return _u
}

// SetCallSiteColumn sets the "call_site_column" field.
func (_u *CallRelationshipUpdate) SetCallSiteColumn(v int) *CallRelationshipUpdate {
	_u.mutation.ResetCallSiteColumn()
	_u.mutation.SetCallSiteColumn(v)
	return _u
}

// SetNillableCallSiteColumn sets the "call_site_column" field if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCallSiteColumn(v *int) *CallRelationshipUpdate {
	if v != nil {
		_u.SetCallSiteColumn(*v)
	}
	return _u
}

// AddCallSiteColumn adds value to the "call_site_column" field.
func (_u *CallRelationshipUpdate) AddCallSiteColumn(v int) *CallRelationshipUpdate {
	_u.mutation.AddCallSiteColumn(v)
	return _u
}

// SetCallType sets the "call_type" field.
func (_u *CallRelationshipUpdate) SetCallType(v callrelationship.CallType) *CallRelationshipUpdate {
	_u.mutation.SetCallType(v)
	return _u
}

// SetNillableCallType sets the "call_type" field if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCallType(v *callrelationship.CallType) *CallRelationshipUpdate {
	if v != nil {
		_u.SetCallType(*v)
	}
	return _u
}

// SetIsConditional sets the "is_conditional" field.
func (_u *CallRelationshipUpdate) SetIsConditional(v bool) *CallRelationshipUpdate {
	_u.mutation.SetIsConditional(v)
	return _u
}

// SetNillableIsConditional sets the "is_conditional" field if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableIsConditional(v *bool) *CallRelationshipUpdate {
	if v != nil {
		_u.SetIsConditional(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *CallRelationshipUpdate) SetArguments(v []string) *CallRelationshipUpdate {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *CallRelationshipUpdate) AppendArguments(v []string) *CallRelationshipUpdate {
	_u.mutation.AppendArguments(v)
	return _u
}

// ClearArguments clears the value of the "arguments" field.
func (_u *CallRelationshipUpdate) ClearArguments() *CallRelationshipUpdate {
	_u.mutation.ClearArguments()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CallRelationshipUpdate) SetCreatedAt(v time.Time) *CallRelationshipUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCreatedAt(v *time.Time) *CallRelationshipUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetCallerID sets the "caller" edge to the Symbol entity by ID.
func (_u *CallRelationshipUpdate) SetCallerID(id int) *CallRelationshipUpdate {
	_u.mutation.SetCallerID(id)
	return _u
}

// SetNillableCallerID sets the "caller" edge to the Symbol entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCallerID(id *int) *CallRelationshipUpdate {
	if id != nil {
		_u = _u.SetCallerID(*id)
	}
	return _u
}

// SetCaller sets the "caller" edge to the Symbol entity.
func (_u *CallRelationshipUpdate) SetCaller(v *Symbol) *CallRelationshipUpdate {
	return _u.SetCallerID(v.ID)
}

// SetCalleeID sets the "callee" edge to the Symbol entity by ID.
func (_u *CallRelationshipUpdate) SetCalleeID(id int) *CallRelationshipUpdate {
	_u.mutation.SetCalleeID(id)
	return _u
}

// SetNillableCalleeID sets the "callee" edge to the Symbol entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCalleeID(id *int) *CallRelationshipUpdate {
	if id != nil {
		_u = _u.SetCalleeID(*id)
	}
	return _u
}

// SetCallee sets the "callee" edge to the Symbol entity.
func (_u *CallRelationshipUpdate) SetCallee(v *Symbol) *CallRelationshipUpdate {
	return _u.SetCalleeID(v.ID)
}

// SetCallSiteFileID sets the "call_site_file" edge to the File entity by ID.
func (_u *CallRelationshipUpdate) SetCallSiteFileID(id int) *CallRelationshipUpdate {
	_u.mutation.SetCallSiteFileID(id)
	return _u
}

// SetNillableCallSiteFileID sets the "call_site_file" edge to the File entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdate) SetNillableCallSiteFileID(id *int) *CallRelationshipUpdate {
	if id != nil {
		_u = _u.SetCallSiteFileID(*id)
	}
	return _u
}

// SetCallSiteFile sets the "call_site_file" edge to the File entity.
func (_u *CallRelationshipUpdate) SetCallSiteFile(v *File) *CallRelationshipUpdate {
	return _u.SetCallSiteFileID(v.ID)
}

// Mutation returns the CallRelationshipMutation object of the builder.
func (_u *CallRelationshipUpdate) Mutation() *CallRelationshipMutation {
	return _u.mutation
}

// ClearCaller clears the "caller" edge to the Symbol entity.
func (_u *CallRelationshipUpdate) ClearCaller() *CallRelationshipUpdate {
	_u.mutation.ClearCaller()
	return _u
}

// ClearCallee clears the "callee" edge to the Symbol entity.
func (_u *CallRelationshipUpdate) ClearCallee() *CallRelationshipUpdate {
	_u.mutation.ClearCallee()
	return _u
}

// ClearCallSiteFile clears the "call_site_file" edge to the File entity.
func (_u *CallRelationshipUpdate) ClearCallSiteFile() *CallRelationshipUpdate {
	_u.mutation.ClearCallSiteFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CallRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CallRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CallRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CallRelationshipUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CallRelationshipUpdate) check() error {
	if v, ok := _u.mutation.CallSiteLine(); ok {
		if err := callrelationship.CallSiteLineValidator(v); err != nil {
			return &ValidationError{Name: "call_site_line", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CallSiteColumn(); ok {
		if err := callrelationship.CallSiteColumnValidator(v); err != nil {
			return &ValidationError{Name: "call_site_column", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_column": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CallType(); ok {
		if err := callrelationship.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_type": %w`, err)}
		}
	}
	return nil
}

func (_u *CallRelationshipUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(callrelationship.Table, callrelationship.Columns, sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CallSiteLine(); ok {
		_spec.SetField(callrelationship.FieldCallSiteLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCallSiteLine(); ok {
		_spec.AddField(callrelationship.FieldCallSiteLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CallSiteColumn(); ok {
		_spec.SetField(callrelationship.FieldCallSiteColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCallSiteColumn(); ok {
		_spec.AddField(callrelationship.FieldCallSiteColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CallType(); ok {
		_spec.SetField(callrelationship.FieldCallType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IsConditional(); ok {
		_spec.SetField(callrelationship.FieldIsConditional, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(callrelationship.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, callrelationship.FieldArguments, value)
		})
	}
	if _u.mutation.ArgumentsCleared() {
		_spec.ClearField(callrelationship.FieldArguments, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(callrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CallerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallerTable,
			Columns: []string{callrelationship.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallerTable,
			Columns: []string{callrelationship.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CalleeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CalleeTable,
			Columns: []string{callrelationship.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CalleeTable,
			Columns: []string{callrelationship.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CallSiteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallSiteFileTable,
			Columns: []string{callrelationship.CallSiteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CallSiteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallSiteFileTable,
			Columns: []string{callrelationship.CallSiteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CallRelationshipUpdateOne is the builder for updating a single CallRelationship entity.
type CallRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CallRelationshipMutation
}

// SetCallSiteLine sets the "call_site_line" field.
func (_u *CallRelationshipUpdateOne) SetCallSiteLine(v int) *CallRelationshipUpdateOne {
	_u.mutation.ResetCallSiteLine()
	_u.mutation.SetCallSiteLine(v)
	return _u
}

// SetNillableCallSiteLine sets the "call_site_line" field if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCallSiteLine(v *int) *CallRelationshipUpdateOne {
	if v != nil {
		_u.SetCallSiteLine(*v)
	}
	return _u
}

// AddCallSiteLine adds value to the "call_site_line" field.
func (_u *CallRelationshipUpdateOne) AddCallSiteLine(v int) *CallRelationshipUpdateOne {
	_u.mutation.AddCallSiteLine(v)
	return _u
}

// SetCallSiteColumn sets the "call_site_column" field.
func (_u *CallRelationshipUpdateOne) SetCallSiteColumn(v int) *CallRelationshipUpdateOne {
	_u.mutation.ResetCallSiteColumn()
	_u.mutation.SetCallSiteColumn(v)
	return _u
}

// SetNillableCallSiteColumn sets the "call_site_column" field if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCallSiteColumn(v *int) *CallRelationshipUpdateOne {
	if v != nil {
		_u.SetCallSiteColumn(*v)
	}
	return _u
}

// AddCallSiteColumn adds value to the "call_site_column" field.
func (_u *CallRelationshipUpdateOne) AddCallSiteColumn(v int) *CallRelationshipUpdateOne {
	_u.mutation.AddCallSiteColumn(v)
	return _u
}

// SetCallType sets the "call_type" field.
func (_u *CallRelationshipUpdateOne) SetCallType(v callrelationship.CallType) *CallRelationshipUpdateOne {
	_u.mutation.SetCallType(v)
	return _u
}

// SetNillableCallType sets the "call_type" field if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCallType(v *callrelationship.CallType) *CallRelationshipUpdateOne {
	if v != nil {
		_u.SetCallType(*v)
	}
	return _u
}

// SetIsConditional sets the "is_conditional" field.
func (_u *CallRelationshipUpdateOne) SetIsConditional(v bool) *CallRelationshipUpdateOne {
	_u.mutation.SetIsConditional(v)
	return _u
}

// SetNillableIsConditional sets the "is_conditional" field if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableIsConditional(v *bool) *CallRelationshipUpdateOne {
	if v != nil {
		_u.SetIsConditional(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *CallRelationshipUpdateOne) SetArguments(v []string) *CallRelationshipUpdateOne {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *CallRelationshipUpdateOne) AppendArguments(v []string) *CallRelationshipUpdateOne {
	_u.mutation.AppendArguments(v)
	return _u
}

// ClearArguments clears the value of the "arguments" field.
func (_u *CallRelationshipUpdateOne) ClearArguments() *CallRelationshipUpdateOne {
	_u.mutation.ClearArguments()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CallRelationshipUpdateOne) SetCreatedAt(v time.Time) *CallRelationshipUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCreatedAt(v *time.Time) *CallRelationshipUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetCallerID sets the "caller" edge to the Symbol entity by ID.
func (_u *CallRelationshipUpdateOne) SetCallerID(id int) *CallRelationshipUpdateOne {
	_u.mutation.SetCallerID(id)
	return _u
}

// SetNillableCallerID sets the "caller" edge to the Symbol entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCallerID(id *int) *CallRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetCallerID(*id)
	}
	return _u
}

// SetCaller sets the "caller" edge to the Symbol entity.
func (_u *CallRelationshipUpdateOne) SetCaller(v *Symbol) *CallRelationshipUpdateOne {
	return _u.SetCallerID(v.ID)
}

// SetCalleeID sets the "callee" edge to the Symbol entity by ID.
func (_u *CallRelationshipUpdateOne) SetCalleeID(id int) *CallRelationshipUpdateOne {
	_u.mutation.SetCalleeID(id)
	return _u
}

// SetNillableCalleeID sets the "callee" edge to the Symbol entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCalleeID(id *int) *CallRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetCalleeID(*id)
	}
	return _u
}

// SetCallee sets the "callee" edge to the Symbol entity.
func (_u *CallRelationshipUpdateOne) SetCallee(v *Symbol) *CallRelationshipUpdateOne {
	return _u.SetCalleeID(v.ID)
}

// SetCallSiteFileID sets the "call_site_file" edge to the File entity by ID.
func (_u *CallRelationshipUpdateOne) SetCallSiteFileID(id int) *CallRelationshipUpdateOne {
	_u.mutation.SetCallSiteFileID(id)
	return _u
}

// SetNillableCallSiteFileID sets the "call_site_file" edge to the File entity by ID if the given value is not nil.
func (_u *CallRelationshipUpdateOne) SetNillableCallSiteFileID(id *int) *CallRelationshipUpdateOne {
	if id != nil {
		_u = _u.SetCallSiteFileID(*id)
	}
	return _u
}

// SetCallSiteFile sets the "call_site_file" edge to the File entity.
func (_u *CallRelationshipUpdateOne) SetCallSiteFile(v *File) *CallRelationshipUpdateOne {
	return _u.SetCallSiteFileID(v.ID)
}

// Mutation returns the CallRelationshipMutation object of the builder.
func (_u *CallRelationshipUpdateOne) Mutation() *CallRelationshipMutation {
	return _u.mutation
}

// ClearCaller clears the "caller" edge to the Symbol entity.
func (_u *CallRelationshipUpdateOne) ClearCaller() *CallRelationshipUpdateOne {
	_u.mutation.ClearCaller()
	return _u
}

// ClearCallee clears the "callee" edge to the Symbol entity.
func (_u *CallRelationshipUpdateOne) ClearCallee() *CallRelationshipUpdateOne {
	_u.mutation.ClearCallee()
	return _u
}

// ClearCallSiteFile clears the "call_site_file" edge to the File entity.
func (_u *CallRelationshipUpdateOne) ClearCallSiteFile() *CallRelationshipUpdateOne {
	_u.mutation.ClearCallSiteFile()
	return _u
}

// Where appends a list predicates to the CallRelationshipUpdate builder.
func (_u *CallRelationshipUpdateOne) Where(ps ...predicate.CallRelationship) *CallRelationshipUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CallRelationshipUpdateOne) Select(field string, fields ...string) *CallRelationshipUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CallRelationship entity.
func (_u *CallRelationshipUpdateOne) Save(ctx context.Context) (*CallRelationship, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CallRelationshipUpdateOne) SaveX(ctx context.Context) *CallRelationship {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CallRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CallRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CallRelationshipUpdateOne) check() error {
	if v, ok := _u.mutation.CallSiteLine(); ok {
		if err := callrelationship.CallSiteLineValidator(v); err != nil {
			return &ValidationError{Name: "call_site_line", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_line": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CallSiteColumn(); ok {
		if err := callrelationship.CallSiteColumnValidator(v); err != nil {
			return &ValidationError{Name: "call_site_column", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_site_column": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CallType(); ok {
		if err := callrelationship.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "CallRelationship.call_type": %w`, err)}
		}
	}
	return nil
}

func (_u *CallRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *CallRelationship, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(callrelationship.Table, callrelationship.Columns, sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CallRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, callrelationship.FieldID)
		for _, f := range fields {
			if !callrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != callrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CallSiteLine(); ok {
		_spec.SetField(callrelationship.FieldCallSiteLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCallSiteLine(); ok {
		_spec.AddField(callrelationship.FieldCallSiteLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CallSiteColumn(); ok {
		_spec.SetField(callrelationship.FieldCallSiteColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCallSiteColumn(); ok {
		_spec.AddField(callrelationship.FieldCallSiteColumn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CallType(); ok {
		_spec.SetField(callrelationship.FieldCallType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IsConditional(); ok {
		_spec.SetField(callrelationship.FieldIsConditional, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(callrelationship.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, callrelationship.FieldArguments, value)
		})
	}
	if _u.mutation.ArgumentsCleared() {
		_spec.ClearField(callrelationship.FieldArguments, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(callrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CallerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallerTable,
			Columns: []string{callrelationship.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallerTable,
			Columns: []string{callrelationship.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CalleeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CalleeTable,
			Columns: []string{callrelationship.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CalleeTable,
			Columns: []string{callrelationship.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CallSiteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallSiteFileTable,
			Columns: []string{callrelationship.CallSiteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CallSiteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   callrelationship.CallSiteFileTable,
			Columns: []string{callrelationship.CallSiteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CallRelationship{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
