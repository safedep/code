// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// InheritanceRelationshipCreate is the builder for creating a InheritanceRelationship entity.
type InheritanceRelationshipCreate struct {
	config
	mutation *InheritanceRelationshipMutation
	hooks    []Hook
}

// SetRelationshipType sets the "relationship_type" field.
func (_c *InheritanceRelationshipCreate) SetRelationshipType(v inheritancerelationship.RelationshipType) *InheritanceRelationshipCreate {
	_c.mutation.SetRelationshipType(v)
	return _c
}

// SetLineNumber sets the "line_number" field.
func (_c *InheritanceRelationshipCreate) SetLineNumber(v int) *InheritanceRelationshipCreate {
	_c.mutation.SetLineNumber(v)
	return _c
}

// SetIsDirectInheritance sets the "is_direct_inheritance" field.
func (_c *InheritanceRelationshipCreate) SetIsDirectInheritance(v bool) *InheritanceRelationshipCreate {
	_c.mutation.SetIsDirectInheritance(v)
	return _c
}

// SetNillableIsDirectInheritance sets the "is_direct_inheritance" field if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableIsDirectInheritance(v *bool) *InheritanceRelationshipCreate {
	if v != nil {
		_c.SetIsDirectInheritance(*v)
	}
	return _c
}

// SetInheritanceDepth sets the "inheritance_depth" field.
func (_c *InheritanceRelationshipCreate) SetInheritanceDepth(v int) *InheritanceRelationshipCreate {
	_c.mutation.SetInheritanceDepth(v)
	return _c
}

// SetNillableInheritanceDepth sets the "inheritance_depth" field if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableInheritanceDepth(v *int) *InheritanceRelationshipCreate {
	if v != nil {
		_c.SetInheritanceDepth(*v)
	}
	return _c
}

// SetModuleName sets the "module_name" field.
func (_c *InheritanceRelationshipCreate) SetModuleName(v string) *InheritanceRelationshipCreate {
	_c.mutation.SetModuleName(v)
	return _c
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableModuleName(v *string) *InheritanceRelationshipCreate {
	if v != nil {
		_c.SetModuleName(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *InheritanceRelationshipCreate) SetCreatedAt(v time.Time) *InheritanceRelationshipCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableCreatedAt(v *time.Time) *InheritanceRelationshipCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetChildID sets the "child" edge to the Symbol entity by ID.
func (_c *InheritanceRelationshipCreate) SetChildID(id int) *InheritanceRelationshipCreate {
	_c.mutation.SetChildID(id)
	return _c
}

// SetNillableChildID sets the "child" edge to the Symbol entity by ID if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableChildID(id *int) *InheritanceRelationshipCreate {
	if id != nil {
		_c = _c.SetChildID(*id)
	}
	return _c
}

// SetChild sets the "child" edge to the Symbol entity.
func (_c *InheritanceRelationshipCreate) SetChild(v *Symbol) *InheritanceRelationshipCreate {
	return _c.SetChildID(v.ID)
}

// SetParentID sets the "parent" edge to the Symbol entity by ID.
func (_c *InheritanceRelationshipCreate) SetParentID(id int) *InheritanceRelationshipCreate {
	_c.mutation.SetParentID(id)
	return _c
}

// SetNillableParentID sets the "parent" edge to the Symbol entity by ID if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableParentID(id *int) *InheritanceRelationshipCreate {
	if id != nil {
		_c = _c.SetParentID(*id)
	}
	return _c
}

// SetParent sets the "parent" edge to the Symbol entity.
func (_c *InheritanceRelationshipCreate) SetParent(v *Symbol) *InheritanceRelationshipCreate {
	return _c.SetParentID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *InheritanceRelationshipCreate) SetFileID(id int) *InheritanceRelationshipCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *InheritanceRelationshipCreate) SetNillableFileID(id *int) *InheritanceRelationshipCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *InheritanceRelationshipCreate) SetFile(v *File) *InheritanceRelationshipCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the InheritanceRelationshipMutation object of the builder.
func (_c *InheritanceRelationshipCreate) Mutation() *InheritanceRelationshipMutation {
	return _c.mutation
}

// Save creates the InheritanceRelationship in the database.
func (_c *InheritanceRelationshipCreate) Save(ctx context.Context) (*InheritanceRelationship, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *InheritanceRelationshipCreate) SaveX(ctx context.Context) *InheritanceRelationship {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InheritanceRelationshipCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InheritanceRelationshipCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *InheritanceRelationshipCreate) defaults() {
	if _, ok := _c.mutation.IsDirectInheritance(); !ok {
		v := inheritancerelationship.DefaultIsDirectInheritance
		_c.mutation.SetIsDirectInheritance(v)
	}
	if _, ok := _c.mutation.InheritanceDepth(); !ok {
		v := inheritancerelationship.DefaultInheritanceDepth
		_c.mutation.SetInheritanceDepth(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := inheritancerelationship.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *InheritanceRelationshipCreate) check() error {
	if _, ok := _c.mutation.RelationshipType(); !ok {
		return &ValidationError{Name: "relationship_type", err: errors.New(`ent: missing required field "InheritanceRelationship.relationship_type"`)}
	}
	if v, ok := _c.mutation.RelationshipType(); ok {
		if err := inheritancerelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.relationship_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LineNumber(); !ok {
		return &ValidationError{Name: "line_number", err: errors.New(`ent: missing required field "InheritanceRelationship.line_number"`)}
	}
	if v, ok := _c.mutation.LineNumber(); ok {
		if err := inheritancerelationship.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "InheritanceRelationship.line_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsDirectInheritance(); !ok {
		return &ValidationError{Name: "is_direct_inheritance", err: errors.New(`ent: missing required field "InheritanceRelationship.is_direct_inheritance"`)}
	}
	if _, ok := _c.mutation.InheritanceDepth(); !ok {
		return &ValidationError{Name: "inheritance_depth", err: errors.New(`ent: missing required field "InheritanceRelationship.inheritance_depth"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InheritanceRelationship.created_at"`)}
	}
	return nil
}

func (_c *InheritanceRelationshipCreate) sqlSave(ctx context.Context) (*InheritanceRelationship, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *InheritanceRelationshipCreate) createSpec() (*InheritanceRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &InheritanceRelationship{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(inheritancerelationship.Table, sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.RelationshipType(); ok {
		_spec.SetField(inheritancerelationship.FieldRelationshipType, field.TypeEnum, value)
		_node.RelationshipType = value
	}
	if value, ok := _c.mutation.LineNumber(); ok {
		_spec.SetField(inheritancerelationship.FieldLineNumber, field.TypeInt, value)
		_node.LineNumber = value
	}
	if value, ok := _c.mutation.IsDirectInheritance(); ok {
		_spec.SetField(inheritancerelationship.FieldIsDirectInheritance, field.TypeBool, value)
		_node.IsDirectInheritance = value
	}
	if value, ok := _c.mutation.InheritanceDepth(); ok {
		_spec.SetField(inheritancerelationship.FieldInheritanceDepth, field.TypeInt, value)
		_node.InheritanceDepth = value
	}
	if value, ok := _c.mutation.ModuleName(); ok {
		_spec.SetField(inheritancerelationship.FieldModuleName, field.TypeString, value)
		_node.ModuleName = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(inheritancerelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ChildTable,
			Columns: []string{inheritancerelationship.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.child_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.ParentTable,
			Columns: []string{inheritancerelationship.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parent_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inheritancerelationship.FileTable,
			Columns: []string{inheritancerelationship.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_inheritance_sites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InheritanceRelationshipCreateBulk is the builder for creating many InheritanceRelationship entities in bulk.
type InheritanceRelationshipCreateBulk struct {
	config
	err      error
	builders []*InheritanceRelationshipCreate
}

// Save creates the InheritanceRelationship entities in the database.
func (_c *InheritanceRelationshipCreateBulk) Save(ctx context.Context) ([]*InheritanceRelationship, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*InheritanceRelationship, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InheritanceRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *InheritanceRelationshipCreateBulk) SaveX(ctx context.Context) []*InheritanceRelationship {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InheritanceRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InheritanceRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
