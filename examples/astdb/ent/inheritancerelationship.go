// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// InheritanceRelationship is the model entity for the InheritanceRelationship schema.
type InheritanceRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RelationshipType holds the value of the "relationship_type" field.
	RelationshipType inheritancerelationship.RelationshipType `json:"relationship_type,omitempty"`
	// LineNumber holds the value of the "line_number" field.
	LineNumber int `json:"line_number,omitempty"`
	// IsDirectInheritance holds the value of the "is_direct_inheritance" field.
	IsDirectInheritance bool `json:"is_direct_inheritance,omitempty"`
	// InheritanceDepth holds the value of the "inheritance_depth" field.
	InheritanceDepth int `json:"inheritance_depth,omitempty"`
	// ModuleName holds the value of the "module_name" field.
	ModuleName string `json:"module_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InheritanceRelationshipQuery when eager-loading is set.
	Edges                  InheritanceRelationshipEdges `json:"edges"`
	file_inheritance_sites *int
	parent_id              *int
	child_id               *int
	selectValues           sql.SelectValues
}

// InheritanceRelationshipEdges holds the relations/edges for other nodes in the graph.
type InheritanceRelationshipEdges struct {
	// Child holds the value of the child edge.
	Child *Symbol `json:"child,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Symbol `json:"parent,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InheritanceRelationshipEdges) ChildOrErr() (*Symbol, error) {
	if e.Child != nil {
		return e.Child, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "child"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InheritanceRelationshipEdges) ParentOrErr() (*Symbol, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InheritanceRelationshipEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InheritanceRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inheritancerelationship.FieldIsDirectInheritance:
			values[i] = new(sql.NullBool)
		case inheritancerelationship.FieldID, inheritancerelationship.FieldLineNumber, inheritancerelationship.FieldInheritanceDepth:
			values[i] = new(sql.NullInt64)
		case inheritancerelationship.FieldRelationshipType, inheritancerelationship.FieldModuleName:
			values[i] = new(sql.NullString)
		case inheritancerelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case inheritancerelationship.ForeignKeys[0]: // file_inheritance_sites
			values[i] = new(sql.NullInt64)
		case inheritancerelationship.ForeignKeys[1]: // parent_id
			values[i] = new(sql.NullInt64)
		case inheritancerelationship.ForeignKeys[2]: // child_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InheritanceRelationship fields.
func (_m *InheritanceRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inheritancerelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case inheritancerelationship.FieldRelationshipType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_type", values[i])
			} else if value.Valid {
				_m.RelationshipType = inheritancerelationship.RelationshipType(value.String)
			}
		case inheritancerelationship.FieldLineNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_number", values[i])
			} else if value.Valid {
				_m.LineNumber = int(value.Int64)
			}
		case inheritancerelationship.FieldIsDirectInheritance:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_direct_inheritance", values[i])
			} else if value.Valid {
				_m.IsDirectInheritance = value.Bool
			}
		case inheritancerelationship.FieldInheritanceDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inheritance_depth", values[i])
			} else if value.Valid {
				_m.InheritanceDepth = int(value.Int64)
			}
		case inheritancerelationship.FieldModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_name", values[i])
			} else if value.Valid {
				_m.ModuleName = value.String
			}
		case inheritancerelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case inheritancerelationship.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_inheritance_sites", value)
			} else if value.Valid {
				_m.file_inheritance_sites = new(int)
				*_m.file_inheritance_sites = int(value.Int64)
			}
		case inheritancerelationship.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field parent_id", value)
			} else if value.Valid {
				_m.parent_id = new(int)
				*_m.parent_id = int(value.Int64)
			}
		case inheritancerelationship.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field child_id", value)
			} else if value.Valid {
				_m.child_id = new(int)
				*_m.child_id = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InheritanceRelationship.
// This includes values selected through modifiers, order, etc.
func (_m *InheritanceRelationship) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChild queries the "child" edge of the InheritanceRelationship entity.
func (_m *InheritanceRelationship) QueryChild() *SymbolQuery {
	return NewInheritanceRelationshipClient(_m.config).QueryChild(_m)
}

// QueryParent queries the "parent" edge of the InheritanceRelationship entity.
func (_m *InheritanceRelationship) QueryParent() *SymbolQuery {
	return NewInheritanceRelationshipClient(_m.config).QueryParent(_m)
}

// QueryFile queries the "file" edge of the InheritanceRelationship entity.
func (_m *InheritanceRelationship) QueryFile() *FileQuery {
	return NewInheritanceRelationshipClient(_m.config).QueryFile(_m)
}

// Update returns a builder for updating this InheritanceRelationship.
// Note that you need to call InheritanceRelationship.Unwrap() before calling this method if this InheritanceRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *InheritanceRelationship) Update() *InheritanceRelationshipUpdateOne {
	return NewInheritanceRelationshipClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the InheritanceRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *InheritanceRelationship) Unwrap() *InheritanceRelationship {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: InheritanceRelationship is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *InheritanceRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("InheritanceRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("relationship_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.RelationshipType))
	builder.WriteString(", ")
	builder.WriteString("line_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.LineNumber))
	builder.WriteString(", ")
	builder.WriteString("is_direct_inheritance=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDirectInheritance))
	builder.WriteString(", ")
	builder.WriteString("inheritance_depth=")
	builder.WriteString(fmt.Sprintf("%v", _m.InheritanceDepth))
	builder.WriteString(", ")
	builder.WriteString("module_name=")
	builder.WriteString(_m.ModuleName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InheritanceRelationships is a parsable slice of InheritanceRelationship.
type InheritanceRelationships []*InheritanceRelationship
