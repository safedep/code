// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// ImportStatementCreate is the builder for creating a ImportStatement entity.
type ImportStatementCreate struct {
	config
	mutation *ImportStatementMutation
	hooks    []Hook
}

// SetModuleName sets the "module_name" field.
func (_c *ImportStatementCreate) SetModuleName(v string) *ImportStatementCreate {
	_c.mutation.SetModuleName(v)
	return _c
}

// SetImportAlias sets the "import_alias" field.
func (_c *ImportStatementCreate) SetImportAlias(v string) *ImportStatementCreate {
	_c.mutation.SetImportAlias(v)
	return _c
}

// SetNillableImportAlias sets the "import_alias" field if the given value is not nil.
func (_c *ImportStatementCreate) SetNillableImportAlias(v *string) *ImportStatementCreate {
	if v != nil {
		_c.SetImportAlias(*v)
	}
	return _c
}

// SetImportType sets the "import_type" field.
func (_c *ImportStatementCreate) SetImportType(v importstatement.ImportType) *ImportStatementCreate {
	_c.mutation.SetImportType(v)
	return _c
}

// SetLineNumber sets the "line_number" field.
func (_c *ImportStatementCreate) SetLineNumber(v int) *ImportStatementCreate {
	_c.mutation.SetLineNumber(v)
	return _c
}

// SetIsDynamic sets the "is_dynamic" field.
func (_c *ImportStatementCreate) SetIsDynamic(v bool) *ImportStatementCreate {
	_c.mutation.SetIsDynamic(v)
	return _c
}

// SetNillableIsDynamic sets the "is_dynamic" field if the given value is not nil.
func (_c *ImportStatementCreate) SetNillableIsDynamic(v *bool) *ImportStatementCreate {
	if v != nil {
		_c.SetIsDynamic(*v)
	}
	return _c
}

// SetImportedNames sets the "imported_names" field.
func (_c *ImportStatementCreate) SetImportedNames(v []string) *ImportStatementCreate {
	_c.mutation.SetImportedNames(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ImportStatementCreate) SetCreatedAt(v time.Time) *ImportStatementCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ImportStatementCreate) SetNillableCreatedAt(v *time.Time) *ImportStatementCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *ImportStatementCreate) SetFileID(id int) *ImportStatementCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *ImportStatementCreate) SetNillableFileID(id *int) *ImportStatementCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *ImportStatementCreate) SetFile(v *File) *ImportStatementCreate {
	return _c.SetFileID(v.ID)
}

// SetImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID.
func (_c *ImportStatementCreate) SetImportedSymbolID(id int) *ImportStatementCreate {
	_c.mutation.SetImportedSymbolID(id)
	return _c
}

// SetNillableImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_c *ImportStatementCreate) SetNillableImportedSymbolID(id *int) *ImportStatementCreate {
	if id != nil {
		_c = _c.SetImportedSymbolID(*id)
	}
	return _c
}

// SetImportedSymbol sets the "imported_symbol" edge to the Symbol entity.
func (_c *ImportStatementCreate) SetImportedSymbol(v *Symbol) *ImportStatementCreate {
	return _c.SetImportedSymbolID(v.ID)
}

// Mutation returns the ImportStatementMutation object of the builder.
func (_c *ImportStatementCreate) Mutation() *ImportStatementMutation {
	return _c.mutation
}

// Save creates the ImportStatement in the database.
func (_c *ImportStatementCreate) Save(ctx context.Context) (*ImportStatement, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ImportStatementCreate) SaveX(ctx context.Context) *ImportStatement {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImportStatementCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImportStatementCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ImportStatementCreate) defaults() {
	if _, ok := _c.mutation.IsDynamic(); !ok {
		v := importstatement.DefaultIsDynamic
		_c.mutation.SetIsDynamic(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := importstatement.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ImportStatementCreate) check() error {
	if _, ok := _c.mutation.ModuleName(); !ok {
		return &ValidationError{Name: "module_name", err: errors.New(`ent: missing required field "ImportStatement.module_name"`)}
	}
	if v, ok := _c.mutation.ModuleName(); ok {
		if err := importstatement.ModuleNameValidator(v); err != nil {
			return &ValidationError{Name: "module_name", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.module_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ImportType(); !ok {
		return &ValidationError{Name: "import_type", err: errors.New(`ent: missing required field "ImportStatement.import_type"`)}
	}
	if v, ok := _c.mutation.ImportType(); ok {
		if err := importstatement.ImportTypeValidator(v); err != nil {
			return &ValidationError{Name: "import_type", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.import_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LineNumber(); !ok {
		return &ValidationError{Name: "line_number", err: errors.New(`ent: missing required field "ImportStatement.line_number"`)}
	}
	if v, ok := _c.mutation.LineNumber(); ok {
		if err := importstatement.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.line_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsDynamic(); !ok {
		return &ValidationError{Name: "is_dynamic", err: errors.New(`ent: missing required field "ImportStatement.is_dynamic"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImportStatement.created_at"`)}
	}
	return nil
}

func (_c *ImportStatementCreate) sqlSave(ctx context.Context) (*ImportStatement, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ImportStatementCreate) createSpec() (*ImportStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &ImportStatement{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(importstatement.Table, sqlgraph.NewFieldSpec(importstatement.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ModuleName(); ok {
		_spec.SetField(importstatement.FieldModuleName, field.TypeString, value)
		_node.ModuleName = value
	}
	if value, ok := _c.mutation.ImportAlias(); ok {
		_spec.SetField(importstatement.FieldImportAlias, field.TypeString, value)
		_node.ImportAlias = value
	}
	if value, ok := _c.mutation.ImportType(); ok {
		_spec.SetField(importstatement.FieldImportType, field.TypeEnum, value)
		_node.ImportType = value
	}
	if value, ok := _c.mutation.LineNumber(); ok {
		_spec.SetField(importstatement.FieldLineNumber, field.TypeInt, value)
		_node.LineNumber = value
	}
	if value, ok := _c.mutation.IsDynamic(); ok {
		_spec.SetField(importstatement.FieldIsDynamic, field.TypeBool, value)
		_node.IsDynamic = value
	}
	if value, ok := _c.mutation.ImportedNames(); ok {
		_spec.SetField(importstatement.FieldImportedNames, field.TypeJSON, value)
		_node.ImportedNames = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(importstatement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.FileTable,
			Columns: []string{importstatement.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_imports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImportedSymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.ImportedSymbolTable,
			Columns: []string{importstatement.ImportedSymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.imported_symbol_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImportStatementCreateBulk is the builder for creating many ImportStatement entities in bulk.
type ImportStatementCreateBulk struct {
	config
	err      error
	builders []*ImportStatementCreate
}

// Save creates the ImportStatement entities in the database.
func (_c *ImportStatementCreateBulk) Save(ctx context.Context) ([]*ImportStatement, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ImportStatement, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImportStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ImportStatementCreateBulk) SaveX(ctx context.Context) []*ImportStatement {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImportStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImportStatementCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
