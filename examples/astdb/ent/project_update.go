// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/project"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ProjectUpdate) SetName(v string) *ProjectUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableName(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRootPath sets the "root_path" field.
func (_u *ProjectUpdate) SetRootPath(v string) *ProjectUpdate {
	_u.mutation.SetRootPath(v)
	return _u
}

// SetNillableRootPath sets the "root_path" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableRootPath(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetRootPath(*v)
	}
	return _u
}

// SetGitHash sets the "git_hash" field.
func (_u *ProjectUpdate) SetGitHash(v string) *ProjectUpdate {
	_u.mutation.SetGitHash(v)
	return _u
}

// SetNillableGitHash sets the "git_hash" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableGitHash(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetGitHash(*v)
	}
	return _u
}

// ClearGitHash clears the value of the "git_hash" field.
func (_u *ProjectUpdate) ClearGitHash() *ProjectUpdate {
	_u.mutation.ClearGitHash()
	return _u
}

// SetScannedAt sets the "scanned_at" field.
func (_u *ProjectUpdate) SetScannedAt(v time.Time) *ProjectUpdate {
	_u.mutation.SetScannedAt(v)
	return _u
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableScannedAt(v *time.Time) *ProjectUpdate {
	if v != nil {
		_u.SetScannedAt(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ProjectUpdate) SetMetadata(v map[string]interface{}) *ProjectUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ProjectUpdate) ClearMetadata() *ProjectUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *ProjectUpdate) AddFileIDs(ids ...int) *ProjectUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *ProjectUpdate) AddFiles(v ...*File) *ProjectUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdate) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *ProjectUpdate) ClearFiles() *ProjectUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *ProjectUpdate) RemoveFileIDs(ids ...int) *ProjectUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *ProjectUpdate) RemoveFiles(v ...*File) *ProjectUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RootPath(); ok {
		if err := project.RootPathValidator(v); err != nil {
			return &ValidationError{Name: "root_path", err: fmt.Errorf(`ent: validator failed for field "Project.root_path": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RootPath(); ok {
		_spec.SetField(project.FieldRootPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.GitHash(); ok {
		_spec.SetField(project.FieldGitHash, field.TypeString, value)
	}
	if _u.mutation.GitHashCleared() {
		_spec.ClearField(project.FieldGitHash, field.TypeString)
	}
	if value, ok := _u.mutation.ScannedAt(); ok {
		_spec.SetField(project.FieldScannedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(project.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(project.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (_u *ProjectUpdateOne) SetName(v string) *ProjectUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableName(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRootPath sets the "root_path" field.
func (_u *ProjectUpdateOne) SetRootPath(v string) *ProjectUpdateOne {
	_u.mutation.SetRootPath(v)
	return _u
}

// SetNillableRootPath sets the "root_path" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableRootPath(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetRootPath(*v)
	}
	return _u
}

// SetGitHash sets the "git_hash" field.
func (_u *ProjectUpdateOne) SetGitHash(v string) *ProjectUpdateOne {
	_u.mutation.SetGitHash(v)
	return _u
}

// SetNillableGitHash sets the "git_hash" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableGitHash(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetGitHash(*v)
	}
	return _u
}

// ClearGitHash clears the value of the "git_hash" field.
func (_u *ProjectUpdateOne) ClearGitHash() *ProjectUpdateOne {
	_u.mutation.ClearGitHash()
	return _u
}

// SetScannedAt sets the "scanned_at" field.
func (_u *ProjectUpdateOne) SetScannedAt(v time.Time) *ProjectUpdateOne {
	_u.mutation.SetScannedAt(v)
	return _u
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableScannedAt(v *time.Time) *ProjectUpdateOne {
	if v != nil {
		_u.SetScannedAt(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ProjectUpdateOne) SetMetadata(v map[string]interface{}) *ProjectUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ProjectUpdateOne) ClearMetadata() *ProjectUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *ProjectUpdateOne) AddFileIDs(ids ...int) *ProjectUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *ProjectUpdateOne) AddFiles(v ...*File) *ProjectUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdateOne) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *ProjectUpdateOne) ClearFiles() *ProjectUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *ProjectUpdateOne) RemoveFileIDs(ids ...int) *ProjectUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *ProjectUpdateOne) RemoveFiles(v ...*File) *ProjectUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Project entity.
func (_u *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RootPath(); ok {
		if err := project.RootPathValidator(v); err != nil {
			return &ValidationError{Name: "root_path", err: fmt.Errorf(`ent: validator failed for field "Project.root_path": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RootPath(); ok {
		_spec.SetField(project.FieldRootPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.GitHash(); ok {
		_spec.SetField(project.FieldGitHash, field.TypeString, value)
	}
	if _u.mutation.GitHashCleared() {
		_spec.ClearField(project.FieldGitHash, field.TypeString)
	}
	if value, ok := _u.mutation.ScannedAt(); ok {
		_spec.SetField(project.FieldScannedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(project.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(project.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FilesTable,
			Columns: []string{project.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
