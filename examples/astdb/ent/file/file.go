// Code generated by ent, DO NOT EDIT.

package file

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRelativePath holds the string denoting the relative_path field in the database.
	FieldRelativePath = "relative_path"
	// FieldAbsolutePath holds the string denoting the absolute_path field in the database.
	FieldAbsolutePath = "absolute_path"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldContentHash holds the string denoting the content_hash field in the database.
	FieldContentHash = "content_hash"
	// FieldSizeBytes holds the string denoting the size_bytes field in the database.
	FieldSizeBytes = "size_bytes"
	// FieldLineCount holds the string denoting the line_count field in the database.
	FieldLineCount = "line_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeAstNodes holds the string denoting the ast_nodes edge name in mutations.
	EdgeAstNodes = "ast_nodes"
	// EdgeSymbols holds the string denoting the symbols edge name in mutations.
	EdgeSymbols = "symbols"
	// EdgeImports holds the string denoting the imports edge name in mutations.
	EdgeImports = "imports"
	// EdgeCallSites holds the string denoting the call_sites edge name in mutations.
	EdgeCallSites = "call_sites"
	// EdgeInheritanceSites holds the string denoting the inheritance_sites edge name in mutations.
	EdgeInheritanceSites = "inheritance_sites"
	// EdgeSymbolReferences holds the string denoting the symbol_references edge name in mutations.
	EdgeSymbolReferences = "symbol_references"
	// Table holds the table name of the file in the database.
	Table = "files"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "files"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_files"
	// AstNodesTable is the table that holds the ast_nodes relation/edge.
	AstNodesTable = "ast_nodes"
	// AstNodesInverseTable is the table name for the ASTNode entity.
	// It exists in this package in order to avoid circular dependency with the "astnode" package.
	AstNodesInverseTable = "ast_nodes"
	// AstNodesColumn is the table column denoting the ast_nodes relation/edge.
	AstNodesColumn = "file_ast_nodes"
	// SymbolsTable is the table that holds the symbols relation/edge.
	SymbolsTable = "symbols"
	// SymbolsInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	SymbolsInverseTable = "symbols"
	// SymbolsColumn is the table column denoting the symbols relation/edge.
	SymbolsColumn = "file_symbols"
	// ImportsTable is the table that holds the imports relation/edge.
	ImportsTable = "import_statements"
	// ImportsInverseTable is the table name for the ImportStatement entity.
	// It exists in this package in order to avoid circular dependency with the "importstatement" package.
	ImportsInverseTable = "import_statements"
	// ImportsColumn is the table column denoting the imports relation/edge.
	ImportsColumn = "file_imports"
	// CallSitesTable is the table that holds the call_sites relation/edge.
	CallSitesTable = "call_relationships"
	// CallSitesInverseTable is the table name for the CallRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "callrelationship" package.
	CallSitesInverseTable = "call_relationships"
	// CallSitesColumn is the table column denoting the call_sites relation/edge.
	CallSitesColumn = "call_site_file_id"
	// InheritanceSitesTable is the table that holds the inheritance_sites relation/edge.
	InheritanceSitesTable = "inheritance_relationships"
	// InheritanceSitesInverseTable is the table name for the InheritanceRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "inheritancerelationship" package.
	InheritanceSitesInverseTable = "inheritance_relationships"
	// InheritanceSitesColumn is the table column denoting the inheritance_sites relation/edge.
	InheritanceSitesColumn = "file_inheritance_sites"
	// SymbolReferencesTable is the table that holds the symbol_references relation/edge.
	SymbolReferencesTable = "symbol_references"
	// SymbolReferencesInverseTable is the table name for the SymbolReference entity.
	// It exists in this package in order to avoid circular dependency with the "symbolreference" package.
	SymbolReferencesInverseTable = "symbol_references"
	// SymbolReferencesColumn is the table column denoting the symbol_references relation/edge.
	SymbolReferencesColumn = "file_symbol_references"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldRelativePath,
	FieldAbsolutePath,
	FieldLanguage,
	FieldContentHash,
	FieldSizeBytes,
	FieldLineCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_files",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// RelativePathValidator is a validator for the "relative_path" field. It is called by the builders before save.
	RelativePathValidator func(string) error
	// AbsolutePathValidator is a validator for the "absolute_path" field. It is called by the builders before save.
	AbsolutePathValidator func(string) error
	// ContentHashValidator is a validator for the "content_hash" field. It is called by the builders before save.
	ContentHashValidator func(string) error
	// SizeBytesValidator is a validator for the "size_bytes" field. It is called by the builders before save.
	SizeBytesValidator func(int) error
	// LineCountValidator is a validator for the "line_count" field. It is called by the builders before save.
	LineCountValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Language defines the type for the "language" enum field.
type Language string

// Language values.
const (
	LanguageGo         Language = "go"
	LanguagePython     Language = "python"
	LanguageJava       Language = "java"
	LanguageJavascript Language = "javascript"
	LanguageTypescript Language = "typescript"
)

func (l Language) String() string {
	return string(l)
}

// LanguageValidator is a validator for the "language" field enum values. It is called by the builders before save.
func LanguageValidator(l Language) error {
	switch l {
	case LanguageGo, LanguagePython, LanguageJava, LanguageJavascript, LanguageTypescript:
		return nil
	default:
		return fmt.Errorf("file: invalid enum value for language field: %q", l)
	}
}

// OrderOption defines the ordering options for the File queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRelativePath orders the results by the relative_path field.
func ByRelativePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelativePath, opts...).ToFunc()
}

// ByAbsolutePath orders the results by the absolute_path field.
func ByAbsolutePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbsolutePath, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByContentHash orders the results by the content_hash field.
func ByContentHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentHash, opts...).ToFunc()
}

// BySizeBytes orders the results by the size_bytes field.
func BySizeBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeBytes, opts...).ToFunc()
}

// ByLineCount orders the results by the line_count field.
func ByLineCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByAstNodesCount orders the results by ast_nodes count.
func ByAstNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAstNodesStep(), opts...)
	}
}

// ByAstNodes orders the results by ast_nodes terms.
func ByAstNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAstNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySymbolsCount orders the results by symbols count.
func BySymbolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSymbolsStep(), opts...)
	}
}

// BySymbols orders the results by symbols terms.
func BySymbols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSymbolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImportsCount orders the results by imports count.
func ByImportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImportsStep(), opts...)
	}
}

// ByImports orders the results by imports terms.
func ByImports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallSitesCount orders the results by call_sites count.
func ByCallSitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallSitesStep(), opts...)
	}
}

// ByCallSites orders the results by call_sites terms.
func ByCallSites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallSitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInheritanceSitesCount orders the results by inheritance_sites count.
func ByInheritanceSitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInheritanceSitesStep(), opts...)
	}
}

// ByInheritanceSites orders the results by inheritance_sites terms.
func ByInheritanceSites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInheritanceSitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySymbolReferencesCount orders the results by symbol_references count.
func BySymbolReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSymbolReferencesStep(), opts...)
	}
}

// BySymbolReferences orders the results by symbol_references terms.
func BySymbolReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSymbolReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newAstNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AstNodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AstNodesTable, AstNodesColumn),
	)
}
func newSymbolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SymbolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SymbolsTable, SymbolsColumn),
	)
}
func newImportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImportsTable, ImportsColumn),
	)
}
func newCallSitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallSitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CallSitesTable, CallSitesColumn),
	)
}
func newInheritanceSitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InheritanceSitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InheritanceSitesTable, InheritanceSitesColumn),
	)
}
func newSymbolReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SymbolReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SymbolReferencesTable, SymbolReferencesColumn),
	)
}
