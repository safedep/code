// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// RelativePath applies equality check predicate on the "relative_path" field. It's identical to RelativePathEQ.
func RelativePath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldRelativePath, v))
}

// AbsolutePath applies equality check predicate on the "absolute_path" field. It's identical to AbsolutePathEQ.
func AbsolutePath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldAbsolutePath, v))
}

// ContentHash applies equality check predicate on the "content_hash" field. It's identical to ContentHashEQ.
func ContentHash(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContentHash, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSizeBytes, v))
}

// LineCount applies equality check predicate on the "line_count" field. It's identical to LineCountEQ.
func LineCount(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldLineCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// RelativePathEQ applies the EQ predicate on the "relative_path" field.
func RelativePathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldRelativePath, v))
}

// RelativePathNEQ applies the NEQ predicate on the "relative_path" field.
func RelativePathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldRelativePath, v))
}

// RelativePathIn applies the In predicate on the "relative_path" field.
func RelativePathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldRelativePath, vs...))
}

// RelativePathNotIn applies the NotIn predicate on the "relative_path" field.
func RelativePathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldRelativePath, vs...))
}

// RelativePathGT applies the GT predicate on the "relative_path" field.
func RelativePathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldRelativePath, v))
}

// RelativePathGTE applies the GTE predicate on the "relative_path" field.
func RelativePathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldRelativePath, v))
}

// RelativePathLT applies the LT predicate on the "relative_path" field.
func RelativePathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldRelativePath, v))
}

// RelativePathLTE applies the LTE predicate on the "relative_path" field.
func RelativePathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldRelativePath, v))
}

// RelativePathContains applies the Contains predicate on the "relative_path" field.
func RelativePathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldRelativePath, v))
}

// RelativePathHasPrefix applies the HasPrefix predicate on the "relative_path" field.
func RelativePathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldRelativePath, v))
}

// RelativePathHasSuffix applies the HasSuffix predicate on the "relative_path" field.
func RelativePathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldRelativePath, v))
}

// RelativePathEqualFold applies the EqualFold predicate on the "relative_path" field.
func RelativePathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldRelativePath, v))
}

// RelativePathContainsFold applies the ContainsFold predicate on the "relative_path" field.
func RelativePathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldRelativePath, v))
}

// AbsolutePathEQ applies the EQ predicate on the "absolute_path" field.
func AbsolutePathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldAbsolutePath, v))
}

// AbsolutePathNEQ applies the NEQ predicate on the "absolute_path" field.
func AbsolutePathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldAbsolutePath, v))
}

// AbsolutePathIn applies the In predicate on the "absolute_path" field.
func AbsolutePathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldAbsolutePath, vs...))
}

// AbsolutePathNotIn applies the NotIn predicate on the "absolute_path" field.
func AbsolutePathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldAbsolutePath, vs...))
}

// AbsolutePathGT applies the GT predicate on the "absolute_path" field.
func AbsolutePathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldAbsolutePath, v))
}

// AbsolutePathGTE applies the GTE predicate on the "absolute_path" field.
func AbsolutePathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldAbsolutePath, v))
}

// AbsolutePathLT applies the LT predicate on the "absolute_path" field.
func AbsolutePathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldAbsolutePath, v))
}

// AbsolutePathLTE applies the LTE predicate on the "absolute_path" field.
func AbsolutePathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldAbsolutePath, v))
}

// AbsolutePathContains applies the Contains predicate on the "absolute_path" field.
func AbsolutePathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldAbsolutePath, v))
}

// AbsolutePathHasPrefix applies the HasPrefix predicate on the "absolute_path" field.
func AbsolutePathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldAbsolutePath, v))
}

// AbsolutePathHasSuffix applies the HasSuffix predicate on the "absolute_path" field.
func AbsolutePathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldAbsolutePath, v))
}

// AbsolutePathEqualFold applies the EqualFold predicate on the "absolute_path" field.
func AbsolutePathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldAbsolutePath, v))
}

// AbsolutePathContainsFold applies the ContainsFold predicate on the "absolute_path" field.
func AbsolutePathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldAbsolutePath, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v Language) predicate.File {
	return predicate.File(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v Language) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...Language) predicate.File {
	return predicate.File(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...Language) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldLanguage, vs...))
}

// ContentHashEQ applies the EQ predicate on the "content_hash" field.
func ContentHashEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContentHash, v))
}

// ContentHashNEQ applies the NEQ predicate on the "content_hash" field.
func ContentHashNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldContentHash, v))
}

// ContentHashIn applies the In predicate on the "content_hash" field.
func ContentHashIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldContentHash, vs...))
}

// ContentHashNotIn applies the NotIn predicate on the "content_hash" field.
func ContentHashNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldContentHash, vs...))
}

// ContentHashGT applies the GT predicate on the "content_hash" field.
func ContentHashGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldContentHash, v))
}

// ContentHashGTE applies the GTE predicate on the "content_hash" field.
func ContentHashGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldContentHash, v))
}

// ContentHashLT applies the LT predicate on the "content_hash" field.
func ContentHashLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldContentHash, v))
}

// ContentHashLTE applies the LTE predicate on the "content_hash" field.
func ContentHashLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldContentHash, v))
}

// ContentHashContains applies the Contains predicate on the "content_hash" field.
func ContentHashContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldContentHash, v))
}

// ContentHashHasPrefix applies the HasPrefix predicate on the "content_hash" field.
func ContentHashHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldContentHash, v))
}

// ContentHashHasSuffix applies the HasSuffix predicate on the "content_hash" field.
func ContentHashHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldContentHash, v))
}

// ContentHashEqualFold applies the EqualFold predicate on the "content_hash" field.
func ContentHashEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldContentHash, v))
}

// ContentHashContainsFold applies the ContainsFold predicate on the "content_hash" field.
func ContentHashContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldContentHash, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSizeBytes, v))
}

// LineCountEQ applies the EQ predicate on the "line_count" field.
func LineCountEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldLineCount, v))
}

// LineCountNEQ applies the NEQ predicate on the "line_count" field.
func LineCountNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldLineCount, v))
}

// LineCountIn applies the In predicate on the "line_count" field.
func LineCountIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldLineCount, vs...))
}

// LineCountNotIn applies the NotIn predicate on the "line_count" field.
func LineCountNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldLineCount, vs...))
}

// LineCountGT applies the GT predicate on the "line_count" field.
func LineCountGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldLineCount, v))
}

// LineCountGTE applies the GTE predicate on the "line_count" field.
func LineCountGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldLineCount, v))
}

// LineCountLT applies the LT predicate on the "line_count" field.
func LineCountLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldLineCount, v))
}

// LineCountLTE applies the LTE predicate on the "line_count" field.
func LineCountLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldLineCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAstNodes applies the HasEdge predicate on the "ast_nodes" edge.
func HasAstNodes() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AstNodesTable, AstNodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAstNodesWith applies the HasEdge predicate on the "ast_nodes" edge with a given conditions (other predicates).
func HasAstNodesWith(preds ...predicate.ASTNode) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newAstNodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymbols applies the HasEdge predicate on the "symbols" edge.
func HasSymbols() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SymbolsTable, SymbolsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymbolsWith applies the HasEdge predicate on the "symbols" edge with a given conditions (other predicates).
func HasSymbolsWith(preds ...predicate.Symbol) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newSymbolsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImports applies the HasEdge predicate on the "imports" edge.
func HasImports() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImportsTable, ImportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImportsWith applies the HasEdge predicate on the "imports" edge with a given conditions (other predicates).
func HasImportsWith(preds ...predicate.ImportStatement) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newImportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallSites applies the HasEdge predicate on the "call_sites" edge.
func HasCallSites() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CallSitesTable, CallSitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallSitesWith applies the HasEdge predicate on the "call_sites" edge with a given conditions (other predicates).
func HasCallSitesWith(preds ...predicate.CallRelationship) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newCallSitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInheritanceSites applies the HasEdge predicate on the "inheritance_sites" edge.
func HasInheritanceSites() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InheritanceSitesTable, InheritanceSitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInheritanceSitesWith applies the HasEdge predicate on the "inheritance_sites" edge with a given conditions (other predicates).
func HasInheritanceSitesWith(preds ...predicate.InheritanceRelationship) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newInheritanceSitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymbolReferences applies the HasEdge predicate on the "symbol_references" edge.
func HasSymbolReferences() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SymbolReferencesTable, SymbolReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymbolReferencesWith applies the HasEdge predicate on the "symbol_references" edge with a given conditions (other predicates).
func HasSymbolReferencesWith(preds ...predicate.SymbolReference) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newSymbolReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
