// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AstNodesColumns holds the columns for the "ast_nodes" table.
	AstNodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "node_type", Type: field.TypeEnum, Enums: []string{"module", "class", "function", "method", "variable", "import", "call", "assignment", "if_statement", "for_loop", "while_loop", "try_catch", "expression", "literal", "identifier"}},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "qualified_name", Type: field.TypeString, Nullable: true},
		{Name: "start_line", Type: field.TypeInt},
		{Name: "end_line", Type: field.TypeInt},
		{Name: "start_column", Type: field.TypeInt},
		{Name: "end_column", Type: field.TypeInt},
		{Name: "content", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "tree_sitter_type", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "ast_node_children", Type: field.TypeInt, Nullable: true},
		{Name: "file_ast_nodes", Type: field.TypeInt, Nullable: true},
	}
	// AstNodesTable holds the schema information for the "ast_nodes" table.
	AstNodesTable = &schema.Table{
		Name:       "ast_nodes",
		Columns:    AstNodesColumns,
		PrimaryKey: []*schema.Column{AstNodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ast_nodes_ast_nodes_children",
				Columns:    []*schema.Column{AstNodesColumns[12]},
				RefColumns: []*schema.Column{AstNodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ast_nodes_files_ast_nodes",
				Columns:    []*schema.Column{AstNodesColumns[13]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "astnode_node_type_name",
				Unique:  false,
				Columns: []*schema.Column{AstNodesColumns[1], AstNodesColumns[2]},
			},
			{
				Name:    "astnode_qualified_name",
				Unique:  false,
				Columns: []*schema.Column{AstNodesColumns[3]},
			},
			{
				Name:    "astnode_start_line_end_line",
				Unique:  false,
				Columns: []*schema.Column{AstNodesColumns[4], AstNodesColumns[5]},
			},
		},
	}
	// CallRelationshipsColumns holds the columns for the "call_relationships" table.
	CallRelationshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "call_site_line", Type: field.TypeInt},
		{Name: "call_site_column", Type: field.TypeInt},
		{Name: "call_type", Type: field.TypeEnum, Enums: []string{"direct", "method", "constructor", "dynamic", "async"}},
		{Name: "is_conditional", Type: field.TypeBool, Default: false},
		{Name: "arguments", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "call_site_file_id", Type: field.TypeInt, Nullable: true},
		{Name: "caller_id", Type: field.TypeInt, Nullable: true},
		{Name: "callee_id", Type: field.TypeInt, Nullable: true},
	}
	// CallRelationshipsTable holds the schema information for the "call_relationships" table.
	CallRelationshipsTable = &schema.Table{
		Name:       "call_relationships",
		Columns:    CallRelationshipsColumns,
		PrimaryKey: []*schema.Column{CallRelationshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "call_relationships_files_call_sites",
				Columns:    []*schema.Column{CallRelationshipsColumns[7]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "call_relationships_symbols_calls_made",
				Columns:    []*schema.Column{CallRelationshipsColumns[8]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "call_relationships_symbols_calls_received",
				Columns:    []*schema.Column{CallRelationshipsColumns[9]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "callrelationship_call_type",
				Unique:  false,
				Columns: []*schema.Column{CallRelationshipsColumns[3]},
			},
			{
				Name:    "callrelationship_call_site_line",
				Unique:  false,
				Columns: []*schema.Column{CallRelationshipsColumns[1]},
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "relative_path", Type: field.TypeString},
		{Name: "absolute_path", Type: field.TypeString},
		{Name: "language", Type: field.TypeEnum, Enums: []string{"go", "python", "java", "javascript", "typescript"}},
		{Name: "content_hash", Type: field.TypeString},
		{Name: "size_bytes", Type: field.TypeInt},
		{Name: "line_count", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "project_files", Type: field.TypeInt, Nullable: true},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_projects_files",
				Columns:    []*schema.Column{FilesColumns[9]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "file_relative_path_language",
				Unique:  false,
				Columns: []*schema.Column{FilesColumns[1], FilesColumns[3]},
			},
			{
				Name:    "file_content_hash",
				Unique:  false,
				Columns: []*schema.Column{FilesColumns[4]},
			},
		},
	}
	// ImportStatementsColumns holds the columns for the "import_statements" table.
	ImportStatementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "module_name", Type: field.TypeString},
		{Name: "import_alias", Type: field.TypeString, Nullable: true},
		{Name: "import_type", Type: field.TypeEnum, Enums: []string{"default", "named", "namespace", "wildcard"}},
		{Name: "line_number", Type: field.TypeInt},
		{Name: "is_dynamic", Type: field.TypeBool, Default: false},
		{Name: "imported_names", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "file_imports", Type: field.TypeInt, Nullable: true},
		{Name: "imported_symbol_id", Type: field.TypeInt, Nullable: true},
	}
	// ImportStatementsTable holds the schema information for the "import_statements" table.
	ImportStatementsTable = &schema.Table{
		Name:       "import_statements",
		Columns:    ImportStatementsColumns,
		PrimaryKey: []*schema.Column{ImportStatementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "import_statements_files_imports",
				Columns:    []*schema.Column{ImportStatementsColumns[8]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "import_statements_symbols_import_references",
				Columns:    []*schema.Column{ImportStatementsColumns[9]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "importstatement_module_name",
				Unique:  false,
				Columns: []*schema.Column{ImportStatementsColumns[1]},
			},
			{
				Name:    "importstatement_import_type",
				Unique:  false,
				Columns: []*schema.Column{ImportStatementsColumns[3]},
			},
		},
	}
	// InheritanceRelationshipsColumns holds the columns for the "inheritance_relationships" table.
	InheritanceRelationshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "relationship_type", Type: field.TypeEnum, Enums: []string{"extends", "implements", "inherits", "mixin"}},
		{Name: "line_number", Type: field.TypeInt},
		{Name: "is_direct_inheritance", Type: field.TypeBool, Default: true},
		{Name: "inheritance_depth", Type: field.TypeInt, Default: 1},
		{Name: "module_name", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "file_inheritance_sites", Type: field.TypeInt, Nullable: true},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
		{Name: "child_id", Type: field.TypeInt, Nullable: true},
	}
	// InheritanceRelationshipsTable holds the schema information for the "inheritance_relationships" table.
	InheritanceRelationshipsTable = &schema.Table{
		Name:       "inheritance_relationships",
		Columns:    InheritanceRelationshipsColumns,
		PrimaryKey: []*schema.Column{InheritanceRelationshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "inheritance_relationships_files_inheritance_sites",
				Columns:    []*schema.Column{InheritanceRelationshipsColumns[7]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "inheritance_relationships_symbols_child_classes",
				Columns:    []*schema.Column{InheritanceRelationshipsColumns[8]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "inheritance_relationships_symbols_parent_classes",
				Columns:    []*schema.Column{InheritanceRelationshipsColumns[9]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "inheritancerelationship_relationship_type",
				Unique:  false,
				Columns: []*schema.Column{InheritanceRelationshipsColumns[1]},
			},
			{
				Name:    "inheritancerelationship_inheritance_depth",
				Unique:  false,
				Columns: []*schema.Column{InheritanceRelationshipsColumns[4]},
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "root_path", Type: field.TypeString},
		{Name: "git_hash", Type: field.TypeString, Nullable: true},
		{Name: "scanned_at", Type: field.TypeTime},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// SymbolsColumns holds the columns for the "symbols" table.
	SymbolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "qualified_name", Type: field.TypeString},
		{Name: "symbol_type", Type: field.TypeEnum, Enums: []string{"function", "class", "method", "variable", "module", "interface", "enum"}},
		{Name: "scope_type", Type: field.TypeEnum, Enums: []string{"global", "class", "function", "block", "module"}},
		{Name: "access_modifier", Type: field.TypeEnum, Nullable: true, Enums: []string{"public", "private", "protected", "package"}},
		{Name: "is_static", Type: field.TypeBool, Default: false},
		{Name: "is_abstract", Type: field.TypeBool, Default: false},
		{Name: "is_async", Type: field.TypeBool, Default: false},
		{Name: "line_number", Type: field.TypeInt},
		{Name: "column_number", Type: field.TypeInt},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "ast_node_symbol", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "file_symbols", Type: field.TypeInt, Nullable: true},
	}
	// SymbolsTable holds the schema information for the "symbols" table.
	SymbolsTable = &schema.Table{
		Name:       "symbols",
		Columns:    SymbolsColumns,
		PrimaryKey: []*schema.Column{SymbolsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "symbols_ast_nodes_symbol",
				Columns:    []*schema.Column{SymbolsColumns[13]},
				RefColumns: []*schema.Column{AstNodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "symbols_files_symbols",
				Columns:    []*schema.Column{SymbolsColumns[14]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "symbol_qualified_name",
				Unique:  false,
				Columns: []*schema.Column{SymbolsColumns[2]},
			},
			{
				Name:    "symbol_symbol_type_scope_type",
				Unique:  false,
				Columns: []*schema.Column{SymbolsColumns[3], SymbolsColumns[4]},
			},
			{
				Name:    "idx_symbol_name",
				Unique:  false,
				Columns: []*schema.Column{SymbolsColumns[1]},
			},
		},
	}
	// SymbolReferencesColumns holds the columns for the "symbol_references" table.
	SymbolReferencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "line_number", Type: field.TypeInt},
		{Name: "column_number", Type: field.TypeInt},
		{Name: "reference_type", Type: field.TypeEnum, Enums: []string{"read", "write", "call", "declaration", "type_annotation"}},
		{Name: "context", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "context_node_id", Type: field.TypeInt, Nullable: true},
		{Name: "file_symbol_references", Type: field.TypeInt, Nullable: true},
		{Name: "symbol_references", Type: field.TypeInt, Nullable: true},
	}
	// SymbolReferencesTable holds the schema information for the "symbol_references" table.
	SymbolReferencesTable = &schema.Table{
		Name:       "symbol_references",
		Columns:    SymbolReferencesColumns,
		PrimaryKey: []*schema.Column{SymbolReferencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "symbol_references_ast_nodes_references",
				Columns:    []*schema.Column{SymbolReferencesColumns[6]},
				RefColumns: []*schema.Column{AstNodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "symbol_references_files_symbol_references",
				Columns:    []*schema.Column{SymbolReferencesColumns[7]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "symbol_references_symbols_references",
				Columns:    []*schema.Column{SymbolReferencesColumns[8]},
				RefColumns: []*schema.Column{SymbolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "symbolreference_reference_type",
				Unique:  false,
				Columns: []*schema.Column{SymbolReferencesColumns[3]},
			},
			{
				Name:    "symbolreference_line_number",
				Unique:  false,
				Columns: []*schema.Column{SymbolReferencesColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AstNodesTable,
		CallRelationshipsTable,
		FilesTable,
		ImportStatementsTable,
		InheritanceRelationshipsTable,
		ProjectsTable,
		SymbolsTable,
		SymbolReferencesTable,
	}
)

func init() {
	AstNodesTable.ForeignKeys[0].RefTable = AstNodesTable
	AstNodesTable.ForeignKeys[1].RefTable = FilesTable
	CallRelationshipsTable.ForeignKeys[0].RefTable = FilesTable
	CallRelationshipsTable.ForeignKeys[1].RefTable = SymbolsTable
	CallRelationshipsTable.ForeignKeys[2].RefTable = SymbolsTable
	FilesTable.ForeignKeys[0].RefTable = ProjectsTable
	ImportStatementsTable.ForeignKeys[0].RefTable = FilesTable
	ImportStatementsTable.ForeignKeys[1].RefTable = SymbolsTable
	InheritanceRelationshipsTable.ForeignKeys[0].RefTable = FilesTable
	InheritanceRelationshipsTable.ForeignKeys[1].RefTable = SymbolsTable
	InheritanceRelationshipsTable.ForeignKeys[2].RefTable = SymbolsTable
	SymbolsTable.ForeignKeys[0].RefTable = AstNodesTable
	SymbolsTable.ForeignKeys[1].RefTable = FilesTable
	SymbolReferencesTable.ForeignKeys[0].RefTable = AstNodesTable
	SymbolReferencesTable.ForeignKeys[1].RefTable = FilesTable
	SymbolReferencesTable.ForeignKeys[2].RefTable = SymbolsTable
}
