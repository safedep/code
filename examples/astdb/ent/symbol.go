// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// Symbol is the model entity for the Symbol schema.
type Symbol struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// QualifiedName holds the value of the "qualified_name" field.
	QualifiedName string `json:"qualified_name,omitempty"`
	// SymbolType holds the value of the "symbol_type" field.
	SymbolType symbol.SymbolType `json:"symbol_type,omitempty"`
	// ScopeType holds the value of the "scope_type" field.
	ScopeType symbol.ScopeType `json:"scope_type,omitempty"`
	// AccessModifier holds the value of the "access_modifier" field.
	AccessModifier symbol.AccessModifier `json:"access_modifier,omitempty"`
	// IsStatic holds the value of the "is_static" field.
	IsStatic bool `json:"is_static,omitempty"`
	// IsAbstract holds the value of the "is_abstract" field.
	IsAbstract bool `json:"is_abstract,omitempty"`
	// IsAsync holds the value of the "is_async" field.
	IsAsync bool `json:"is_async,omitempty"`
	// LineNumber holds the value of the "line_number" field.
	LineNumber int `json:"line_number,omitempty"`
	// ColumnNumber holds the value of the "column_number" field.
	ColumnNumber int `json:"column_number,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SymbolQuery when eager-loading is set.
	Edges           SymbolEdges `json:"edges"`
	ast_node_symbol *int
	file_symbols    *int
	selectValues    sql.SelectValues
}

// SymbolEdges holds the relations/edges for other nodes in the graph.
type SymbolEdges struct {
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// AstNode holds the value of the ast_node edge.
	AstNode *ASTNode `json:"ast_node,omitempty"`
	// CallsMade holds the value of the calls_made edge.
	CallsMade []*CallRelationship `json:"calls_made,omitempty"`
	// CallsReceived holds the value of the calls_received edge.
	CallsReceived []*CallRelationship `json:"calls_received,omitempty"`
	// References holds the value of the references edge.
	References []*SymbolReference `json:"references,omitempty"`
	// ChildClasses holds the value of the child_classes edge.
	ChildClasses []*InheritanceRelationship `json:"child_classes,omitempty"`
	// ParentClasses holds the value of the parent_classes edge.
	ParentClasses []*InheritanceRelationship `json:"parent_classes,omitempty"`
	// ImportReferences holds the value of the import_references edge.
	ImportReferences []*ImportStatement `json:"import_references,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SymbolEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// AstNodeOrErr returns the AstNode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SymbolEdges) AstNodeOrErr() (*ASTNode, error) {
	if e.AstNode != nil {
		return e.AstNode, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: astnode.Label}
	}
	return nil, &NotLoadedError{edge: "ast_node"}
}

// CallsMadeOrErr returns the CallsMade value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) CallsMadeOrErr() ([]*CallRelationship, error) {
	if e.loadedTypes[2] {
		return e.CallsMade, nil
	}
	return nil, &NotLoadedError{edge: "calls_made"}
}

// CallsReceivedOrErr returns the CallsReceived value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) CallsReceivedOrErr() ([]*CallRelationship, error) {
	if e.loadedTypes[3] {
		return e.CallsReceived, nil
	}
	return nil, &NotLoadedError{edge: "calls_received"}
}

// ReferencesOrErr returns the References value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) ReferencesOrErr() ([]*SymbolReference, error) {
	if e.loadedTypes[4] {
		return e.References, nil
	}
	return nil, &NotLoadedError{edge: "references"}
}

// ChildClassesOrErr returns the ChildClasses value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) ChildClassesOrErr() ([]*InheritanceRelationship, error) {
	if e.loadedTypes[5] {
		return e.ChildClasses, nil
	}
	return nil, &NotLoadedError{edge: "child_classes"}
}

// ParentClassesOrErr returns the ParentClasses value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) ParentClassesOrErr() ([]*InheritanceRelationship, error) {
	if e.loadedTypes[6] {
		return e.ParentClasses, nil
	}
	return nil, &NotLoadedError{edge: "parent_classes"}
}

// ImportReferencesOrErr returns the ImportReferences value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) ImportReferencesOrErr() ([]*ImportStatement, error) {
	if e.loadedTypes[7] {
		return e.ImportReferences, nil
	}
	return nil, &NotLoadedError{edge: "import_references"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Symbol) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case symbol.FieldMetadata:
			values[i] = new([]byte)
		case symbol.FieldIsStatic, symbol.FieldIsAbstract, symbol.FieldIsAsync:
			values[i] = new(sql.NullBool)
		case symbol.FieldID, symbol.FieldLineNumber, symbol.FieldColumnNumber:
			values[i] = new(sql.NullInt64)
		case symbol.FieldName, symbol.FieldQualifiedName, symbol.FieldSymbolType, symbol.FieldScopeType, symbol.FieldAccessModifier:
			values[i] = new(sql.NullString)
		case symbol.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case symbol.ForeignKeys[0]: // ast_node_symbol
			values[i] = new(sql.NullInt64)
		case symbol.ForeignKeys[1]: // file_symbols
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Symbol fields.
func (_m *Symbol) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case symbol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case symbol.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case symbol.FieldQualifiedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qualified_name", values[i])
			} else if value.Valid {
				_m.QualifiedName = value.String
			}
		case symbol.FieldSymbolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol_type", values[i])
			} else if value.Valid {
				_m.SymbolType = symbol.SymbolType(value.String)
			}
		case symbol.FieldScopeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_type", values[i])
			} else if value.Valid {
				_m.ScopeType = symbol.ScopeType(value.String)
			}
		case symbol.FieldAccessModifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_modifier", values[i])
			} else if value.Valid {
				_m.AccessModifier = symbol.AccessModifier(value.String)
			}
		case symbol.FieldIsStatic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_static", values[i])
			} else if value.Valid {
				_m.IsStatic = value.Bool
			}
		case symbol.FieldIsAbstract:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_abstract", values[i])
			} else if value.Valid {
				_m.IsAbstract = value.Bool
			}
		case symbol.FieldIsAsync:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_async", values[i])
			} else if value.Valid {
				_m.IsAsync = value.Bool
			}
		case symbol.FieldLineNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_number", values[i])
			} else if value.Valid {
				_m.LineNumber = int(value.Int64)
			}
		case symbol.FieldColumnNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field column_number", values[i])
			} else if value.Valid {
				_m.ColumnNumber = int(value.Int64)
			}
		case symbol.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case symbol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case symbol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ast_node_symbol", value)
			} else if value.Valid {
				_m.ast_node_symbol = new(int)
				*_m.ast_node_symbol = int(value.Int64)
			}
		case symbol.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_symbols", value)
			} else if value.Valid {
				_m.file_symbols = new(int)
				*_m.file_symbols = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Symbol.
// This includes values selected through modifiers, order, etc.
func (_m *Symbol) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the Symbol entity.
func (_m *Symbol) QueryFile() *FileQuery {
	return NewSymbolClient(_m.config).QueryFile(_m)
}

// QueryAstNode queries the "ast_node" edge of the Symbol entity.
func (_m *Symbol) QueryAstNode() *ASTNodeQuery {
	return NewSymbolClient(_m.config).QueryAstNode(_m)
}

// QueryCallsMade queries the "calls_made" edge of the Symbol entity.
func (_m *Symbol) QueryCallsMade() *CallRelationshipQuery {
	return NewSymbolClient(_m.config).QueryCallsMade(_m)
}

// QueryCallsReceived queries the "calls_received" edge of the Symbol entity.
func (_m *Symbol) QueryCallsReceived() *CallRelationshipQuery {
	return NewSymbolClient(_m.config).QueryCallsReceived(_m)
}

// QueryReferences queries the "references" edge of the Symbol entity.
func (_m *Symbol) QueryReferences() *SymbolReferenceQuery {
	return NewSymbolClient(_m.config).QueryReferences(_m)
}

// QueryChildClasses queries the "child_classes" edge of the Symbol entity.
func (_m *Symbol) QueryChildClasses() *InheritanceRelationshipQuery {
	return NewSymbolClient(_m.config).QueryChildClasses(_m)
}

// QueryParentClasses queries the "parent_classes" edge of the Symbol entity.
func (_m *Symbol) QueryParentClasses() *InheritanceRelationshipQuery {
	return NewSymbolClient(_m.config).QueryParentClasses(_m)
}

// QueryImportReferences queries the "import_references" edge of the Symbol entity.
func (_m *Symbol) QueryImportReferences() *ImportStatementQuery {
	return NewSymbolClient(_m.config).QueryImportReferences(_m)
}

// Update returns a builder for updating this Symbol.
// Note that you need to call Symbol.Unwrap() before calling this method if this Symbol
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Symbol) Update() *SymbolUpdateOne {
	return NewSymbolClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Symbol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Symbol) Unwrap() *Symbol {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Symbol is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Symbol) String() string {
	var builder strings.Builder
	builder.WriteString("Symbol(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("qualified_name=")
	builder.WriteString(_m.QualifiedName)
	builder.WriteString(", ")
	builder.WriteString("symbol_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.SymbolType))
	builder.WriteString(", ")
	builder.WriteString("scope_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ScopeType))
	builder.WriteString(", ")
	builder.WriteString("access_modifier=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccessModifier))
	builder.WriteString(", ")
	builder.WriteString("is_static=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsStatic))
	builder.WriteString(", ")
	builder.WriteString("is_abstract=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsAbstract))
	builder.WriteString(", ")
	builder.WriteString("is_async=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsAsync))
	builder.WriteString(", ")
	builder.WriteString("line_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.LineNumber))
	builder.WriteString(", ")
	builder.WriteString("column_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.ColumnNumber))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Symbols is a parsable slice of Symbol.
type Symbols []*Symbol
