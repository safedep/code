// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/project"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RelativePath holds the value of the "relative_path" field.
	RelativePath string `json:"relative_path,omitempty"`
	// AbsolutePath holds the value of the "absolute_path" field.
	AbsolutePath string `json:"absolute_path,omitempty"`
	// Language holds the value of the "language" field.
	Language file.Language `json:"language,omitempty"`
	// ContentHash holds the value of the "content_hash" field.
	ContentHash string `json:"content_hash,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int `json:"size_bytes,omitempty"`
	// LineCount holds the value of the "line_count" field.
	LineCount int `json:"line_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges         FileEdges `json:"edges"`
	project_files *int
	selectValues  sql.SelectValues
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// AstNodes holds the value of the ast_nodes edge.
	AstNodes []*ASTNode `json:"ast_nodes,omitempty"`
	// Symbols holds the value of the symbols edge.
	Symbols []*Symbol `json:"symbols,omitempty"`
	// Imports holds the value of the imports edge.
	Imports []*ImportStatement `json:"imports,omitempty"`
	// CallSites holds the value of the call_sites edge.
	CallSites []*CallRelationship `json:"call_sites,omitempty"`
	// InheritanceSites holds the value of the inheritance_sites edge.
	InheritanceSites []*InheritanceRelationship `json:"inheritance_sites,omitempty"`
	// SymbolReferences holds the value of the symbol_references edge.
	SymbolReferences []*SymbolReference `json:"symbol_references,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// AstNodesOrErr returns the AstNodes value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) AstNodesOrErr() ([]*ASTNode, error) {
	if e.loadedTypes[1] {
		return e.AstNodes, nil
	}
	return nil, &NotLoadedError{edge: "ast_nodes"}
}

// SymbolsOrErr returns the Symbols value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) SymbolsOrErr() ([]*Symbol, error) {
	if e.loadedTypes[2] {
		return e.Symbols, nil
	}
	return nil, &NotLoadedError{edge: "symbols"}
}

// ImportsOrErr returns the Imports value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ImportsOrErr() ([]*ImportStatement, error) {
	if e.loadedTypes[3] {
		return e.Imports, nil
	}
	return nil, &NotLoadedError{edge: "imports"}
}

// CallSitesOrErr returns the CallSites value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) CallSitesOrErr() ([]*CallRelationship, error) {
	if e.loadedTypes[4] {
		return e.CallSites, nil
	}
	return nil, &NotLoadedError{edge: "call_sites"}
}

// InheritanceSitesOrErr returns the InheritanceSites value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) InheritanceSitesOrErr() ([]*InheritanceRelationship, error) {
	if e.loadedTypes[5] {
		return e.InheritanceSites, nil
	}
	return nil, &NotLoadedError{edge: "inheritance_sites"}
}

// SymbolReferencesOrErr returns the SymbolReferences value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) SymbolReferencesOrErr() ([]*SymbolReference, error) {
	if e.loadedTypes[6] {
		return e.SymbolReferences, nil
	}
	return nil, &NotLoadedError{edge: "symbol_references"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldID, file.FieldSizeBytes, file.FieldLineCount:
			values[i] = new(sql.NullInt64)
		case file.FieldRelativePath, file.FieldAbsolutePath, file.FieldLanguage, file.FieldContentHash:
			values[i] = new(sql.NullString)
		case file.FieldCreatedAt, file.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case file.ForeignKeys[0]: // project_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (_m *File) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case file.FieldRelativePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relative_path", values[i])
			} else if value.Valid {
				_m.RelativePath = value.String
			}
		case file.FieldAbsolutePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field absolute_path", values[i])
			} else if value.Valid {
				_m.AbsolutePath = value.String
			}
		case file.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				_m.Language = file.Language(value.String)
			}
		case file.FieldContentHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_hash", values[i])
			} else if value.Valid {
				_m.ContentHash = value.String
			}
		case file.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				_m.SizeBytes = int(value.Int64)
			}
		case file.FieldLineCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_count", values[i])
			} else if value.Valid {
				_m.LineCount = int(value.Int64)
			}
		case file.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case file.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case file.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_files", value)
			} else if value.Valid {
				_m.project_files = new(int)
				*_m.project_files = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the File.
// This includes values selected through modifiers, order, etc.
func (_m *File) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the File entity.
func (_m *File) QueryProject() *ProjectQuery {
	return NewFileClient(_m.config).QueryProject(_m)
}

// QueryAstNodes queries the "ast_nodes" edge of the File entity.
func (_m *File) QueryAstNodes() *ASTNodeQuery {
	return NewFileClient(_m.config).QueryAstNodes(_m)
}

// QuerySymbols queries the "symbols" edge of the File entity.
func (_m *File) QuerySymbols() *SymbolQuery {
	return NewFileClient(_m.config).QuerySymbols(_m)
}

// QueryImports queries the "imports" edge of the File entity.
func (_m *File) QueryImports() *ImportStatementQuery {
	return NewFileClient(_m.config).QueryImports(_m)
}

// QueryCallSites queries the "call_sites" edge of the File entity.
func (_m *File) QueryCallSites() *CallRelationshipQuery {
	return NewFileClient(_m.config).QueryCallSites(_m)
}

// QueryInheritanceSites queries the "inheritance_sites" edge of the File entity.
func (_m *File) QueryInheritanceSites() *InheritanceRelationshipQuery {
	return NewFileClient(_m.config).QueryInheritanceSites(_m)
}

// QuerySymbolReferences queries the "symbol_references" edge of the File entity.
func (_m *File) QuerySymbolReferences() *SymbolReferenceQuery {
	return NewFileClient(_m.config).QuerySymbolReferences(_m)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *File) Update() *FileUpdateOne {
	return NewFileClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *File) Unwrap() *File {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("relative_path=")
	builder.WriteString(_m.RelativePath)
	builder.WriteString(", ")
	builder.WriteString("absolute_path=")
	builder.WriteString(_m.AbsolutePath)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fmt.Sprintf("%v", _m.Language))
	builder.WriteString(", ")
	builder.WriteString("content_hash=")
	builder.WriteString(_m.ContentHash)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", _m.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("line_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LineCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File
