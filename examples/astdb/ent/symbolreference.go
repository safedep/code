// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// SymbolReference is the model entity for the SymbolReference schema.
type SymbolReference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LineNumber holds the value of the "line_number" field.
	LineNumber int `json:"line_number,omitempty"`
	// ColumnNumber holds the value of the "column_number" field.
	ColumnNumber int `json:"column_number,omitempty"`
	// ReferenceType holds the value of the "reference_type" field.
	ReferenceType symbolreference.ReferenceType `json:"reference_type,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SymbolReferenceQuery when eager-loading is set.
	Edges                  SymbolReferenceEdges `json:"edges"`
	context_node_id        *int
	file_symbol_references *int
	symbol_references      *int
	selectValues           sql.SelectValues
}

// SymbolReferenceEdges holds the relations/edges for other nodes in the graph.
type SymbolReferenceEdges struct {
	// Symbol holds the value of the symbol edge.
	Symbol *Symbol `json:"symbol,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// ContextNode holds the value of the context_node edge.
	ContextNode *ASTNode `json:"context_node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SymbolOrErr returns the Symbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SymbolReferenceEdges) SymbolOrErr() (*Symbol, error) {
	if e.Symbol != nil {
		return e.Symbol, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "symbol"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SymbolReferenceEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// ContextNodeOrErr returns the ContextNode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SymbolReferenceEdges) ContextNodeOrErr() (*ASTNode, error) {
	if e.ContextNode != nil {
		return e.ContextNode, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: astnode.Label}
	}
	return nil, &NotLoadedError{edge: "context_node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SymbolReference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case symbolreference.FieldID, symbolreference.FieldLineNumber, symbolreference.FieldColumnNumber:
			values[i] = new(sql.NullInt64)
		case symbolreference.FieldReferenceType, symbolreference.FieldContext:
			values[i] = new(sql.NullString)
		case symbolreference.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case symbolreference.ForeignKeys[0]: // context_node_id
			values[i] = new(sql.NullInt64)
		case symbolreference.ForeignKeys[1]: // file_symbol_references
			values[i] = new(sql.NullInt64)
		case symbolreference.ForeignKeys[2]: // symbol_references
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SymbolReference fields.
func (_m *SymbolReference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case symbolreference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case symbolreference.FieldLineNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_number", values[i])
			} else if value.Valid {
				_m.LineNumber = int(value.Int64)
			}
		case symbolreference.FieldColumnNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field column_number", values[i])
			} else if value.Valid {
				_m.ColumnNumber = int(value.Int64)
			}
		case symbolreference.FieldReferenceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_type", values[i])
			} else if value.Valid {
				_m.ReferenceType = symbolreference.ReferenceType(value.String)
			}
		case symbolreference.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				_m.Context = value.String
			}
		case symbolreference.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case symbolreference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field context_node_id", value)
			} else if value.Valid {
				_m.context_node_id = new(int)
				*_m.context_node_id = int(value.Int64)
			}
		case symbolreference.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_symbol_references", value)
			} else if value.Valid {
				_m.file_symbol_references = new(int)
				*_m.file_symbol_references = int(value.Int64)
			}
		case symbolreference.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field symbol_references", value)
			} else if value.Valid {
				_m.symbol_references = new(int)
				*_m.symbol_references = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SymbolReference.
// This includes values selected through modifiers, order, etc.
func (_m *SymbolReference) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySymbol queries the "symbol" edge of the SymbolReference entity.
func (_m *SymbolReference) QuerySymbol() *SymbolQuery {
	return NewSymbolReferenceClient(_m.config).QuerySymbol(_m)
}

// QueryFile queries the "file" edge of the SymbolReference entity.
func (_m *SymbolReference) QueryFile() *FileQuery {
	return NewSymbolReferenceClient(_m.config).QueryFile(_m)
}

// QueryContextNode queries the "context_node" edge of the SymbolReference entity.
func (_m *SymbolReference) QueryContextNode() *ASTNodeQuery {
	return NewSymbolReferenceClient(_m.config).QueryContextNode(_m)
}

// Update returns a builder for updating this SymbolReference.
// Note that you need to call SymbolReference.Unwrap() before calling this method if this SymbolReference
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SymbolReference) Update() *SymbolReferenceUpdateOne {
	return NewSymbolReferenceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SymbolReference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SymbolReference) Unwrap() *SymbolReference {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SymbolReference is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SymbolReference) String() string {
	var builder strings.Builder
	builder.WriteString("SymbolReference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("line_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.LineNumber))
	builder.WriteString(", ")
	builder.WriteString("column_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.ColumnNumber))
	builder.WriteString(", ")
	builder.WriteString("reference_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReferenceType))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(_m.Context)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SymbolReferences is a parsable slice of SymbolReference.
type SymbolReferences []*SymbolReference
