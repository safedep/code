// Code generated by ent, DO NOT EDIT.

package inheritancerelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLTE(FieldID, id))
}

// LineNumber applies equality check predicate on the "line_number" field. It's identical to LineNumberEQ.
func LineNumber(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldLineNumber, v))
}

// IsDirectInheritance applies equality check predicate on the "is_direct_inheritance" field. It's identical to IsDirectInheritanceEQ.
func IsDirectInheritance(v bool) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldIsDirectInheritance, v))
}

// InheritanceDepth applies equality check predicate on the "inheritance_depth" field. It's identical to InheritanceDepthEQ.
func InheritanceDepth(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldInheritanceDepth, v))
}

// ModuleName applies equality check predicate on the "module_name" field. It's identical to ModuleNameEQ.
func ModuleName(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldModuleName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// RelationshipTypeEQ applies the EQ predicate on the "relationship_type" field.
func RelationshipTypeEQ(v RelationshipType) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldRelationshipType, v))
}

// RelationshipTypeNEQ applies the NEQ predicate on the "relationship_type" field.
func RelationshipTypeNEQ(v RelationshipType) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldRelationshipType, v))
}

// RelationshipTypeIn applies the In predicate on the "relationship_type" field.
func RelationshipTypeIn(vs ...RelationshipType) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldRelationshipType, vs...))
}

// RelationshipTypeNotIn applies the NotIn predicate on the "relationship_type" field.
func RelationshipTypeNotIn(vs ...RelationshipType) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldRelationshipType, vs...))
}

// LineNumberEQ applies the EQ predicate on the "line_number" field.
func LineNumberEQ(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldLineNumber, v))
}

// LineNumberNEQ applies the NEQ predicate on the "line_number" field.
func LineNumberNEQ(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldLineNumber, v))
}

// LineNumberIn applies the In predicate on the "line_number" field.
func LineNumberIn(vs ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldLineNumber, vs...))
}

// LineNumberNotIn applies the NotIn predicate on the "line_number" field.
func LineNumberNotIn(vs ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldLineNumber, vs...))
}

// LineNumberGT applies the GT predicate on the "line_number" field.
func LineNumberGT(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGT(FieldLineNumber, v))
}

// LineNumberGTE applies the GTE predicate on the "line_number" field.
func LineNumberGTE(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGTE(FieldLineNumber, v))
}

// LineNumberLT applies the LT predicate on the "line_number" field.
func LineNumberLT(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLT(FieldLineNumber, v))
}

// LineNumberLTE applies the LTE predicate on the "line_number" field.
func LineNumberLTE(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLTE(FieldLineNumber, v))
}

// IsDirectInheritanceEQ applies the EQ predicate on the "is_direct_inheritance" field.
func IsDirectInheritanceEQ(v bool) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldIsDirectInheritance, v))
}

// IsDirectInheritanceNEQ applies the NEQ predicate on the "is_direct_inheritance" field.
func IsDirectInheritanceNEQ(v bool) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldIsDirectInheritance, v))
}

// InheritanceDepthEQ applies the EQ predicate on the "inheritance_depth" field.
func InheritanceDepthEQ(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldInheritanceDepth, v))
}

// InheritanceDepthNEQ applies the NEQ predicate on the "inheritance_depth" field.
func InheritanceDepthNEQ(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldInheritanceDepth, v))
}

// InheritanceDepthIn applies the In predicate on the "inheritance_depth" field.
func InheritanceDepthIn(vs ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldInheritanceDepth, vs...))
}

// InheritanceDepthNotIn applies the NotIn predicate on the "inheritance_depth" field.
func InheritanceDepthNotIn(vs ...int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldInheritanceDepth, vs...))
}

// InheritanceDepthGT applies the GT predicate on the "inheritance_depth" field.
func InheritanceDepthGT(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGT(FieldInheritanceDepth, v))
}

// InheritanceDepthGTE applies the GTE predicate on the "inheritance_depth" field.
func InheritanceDepthGTE(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGTE(FieldInheritanceDepth, v))
}

// InheritanceDepthLT applies the LT predicate on the "inheritance_depth" field.
func InheritanceDepthLT(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLT(FieldInheritanceDepth, v))
}

// InheritanceDepthLTE applies the LTE predicate on the "inheritance_depth" field.
func InheritanceDepthLTE(v int) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLTE(FieldInheritanceDepth, v))
}

// ModuleNameEQ applies the EQ predicate on the "module_name" field.
func ModuleNameEQ(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldModuleName, v))
}

// ModuleNameNEQ applies the NEQ predicate on the "module_name" field.
func ModuleNameNEQ(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldModuleName, v))
}

// ModuleNameIn applies the In predicate on the "module_name" field.
func ModuleNameIn(vs ...string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldModuleName, vs...))
}

// ModuleNameNotIn applies the NotIn predicate on the "module_name" field.
func ModuleNameNotIn(vs ...string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldModuleName, vs...))
}

// ModuleNameGT applies the GT predicate on the "module_name" field.
func ModuleNameGT(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGT(FieldModuleName, v))
}

// ModuleNameGTE applies the GTE predicate on the "module_name" field.
func ModuleNameGTE(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGTE(FieldModuleName, v))
}

// ModuleNameLT applies the LT predicate on the "module_name" field.
func ModuleNameLT(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLT(FieldModuleName, v))
}

// ModuleNameLTE applies the LTE predicate on the "module_name" field.
func ModuleNameLTE(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLTE(FieldModuleName, v))
}

// ModuleNameContains applies the Contains predicate on the "module_name" field.
func ModuleNameContains(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldContains(FieldModuleName, v))
}

// ModuleNameHasPrefix applies the HasPrefix predicate on the "module_name" field.
func ModuleNameHasPrefix(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldHasPrefix(FieldModuleName, v))
}

// ModuleNameHasSuffix applies the HasSuffix predicate on the "module_name" field.
func ModuleNameHasSuffix(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldHasSuffix(FieldModuleName, v))
}

// ModuleNameIsNil applies the IsNil predicate on the "module_name" field.
func ModuleNameIsNil() predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIsNull(FieldModuleName))
}

// ModuleNameNotNil applies the NotNil predicate on the "module_name" field.
func ModuleNameNotNil() predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotNull(FieldModuleName))
}

// ModuleNameEqualFold applies the EqualFold predicate on the "module_name" field.
func ModuleNameEqualFold(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEqualFold(FieldModuleName, v))
}

// ModuleNameContainsFold applies the ContainsFold predicate on the "module_name" field.
func ModuleNameContainsFold(v string) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldContainsFold(FieldModuleName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// HasChild applies the HasEdge predicate on the "child" edge.
func HasChild() predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWith applies the HasEdge predicate on the "child" edge with a given conditions (other predicates).
func HasChildWith(preds ...predicate.Symbol) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := newChildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Symbol) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InheritanceRelationship) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InheritanceRelationship) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InheritanceRelationship) predicate.InheritanceRelationship {
	return predicate.InheritanceRelationship(sql.NotPredicates(p))
}
