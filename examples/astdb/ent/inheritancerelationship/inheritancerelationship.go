// Code generated by ent, DO NOT EDIT.

package inheritancerelationship

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inheritancerelationship type in the database.
	Label = "inheritance_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRelationshipType holds the string denoting the relationship_type field in the database.
	FieldRelationshipType = "relationship_type"
	// FieldLineNumber holds the string denoting the line_number field in the database.
	FieldLineNumber = "line_number"
	// FieldIsDirectInheritance holds the string denoting the is_direct_inheritance field in the database.
	FieldIsDirectInheritance = "is_direct_inheritance"
	// FieldInheritanceDepth holds the string denoting the inheritance_depth field in the database.
	FieldInheritanceDepth = "inheritance_depth"
	// FieldModuleName holds the string denoting the module_name field in the database.
	FieldModuleName = "module_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeChild holds the string denoting the child edge name in mutations.
	EdgeChild = "child"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// Table holds the table name of the inheritancerelationship in the database.
	Table = "inheritance_relationships"
	// ChildTable is the table that holds the child relation/edge.
	ChildTable = "inheritance_relationships"
	// ChildInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	ChildInverseTable = "symbols"
	// ChildColumn is the table column denoting the child relation/edge.
	ChildColumn = "child_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "inheritance_relationships"
	// ParentInverseTable is the table name for the Symbol entity.
	// It exists in this package in order to avoid circular dependency with the "symbol" package.
	ParentInverseTable = "symbols"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "inheritance_relationships"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_inheritance_sites"
)

// Columns holds all SQL columns for inheritancerelationship fields.
var Columns = []string{
	FieldID,
	FieldRelationshipType,
	FieldLineNumber,
	FieldIsDirectInheritance,
	FieldInheritanceDepth,
	FieldModuleName,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inheritance_relationships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"file_inheritance_sites",
	"parent_id",
	"child_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LineNumberValidator is a validator for the "line_number" field. It is called by the builders before save.
	LineNumberValidator func(int) error
	// DefaultIsDirectInheritance holds the default value on creation for the "is_direct_inheritance" field.
	DefaultIsDirectInheritance bool
	// DefaultInheritanceDepth holds the default value on creation for the "inheritance_depth" field.
	DefaultInheritanceDepth int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// RelationshipType defines the type for the "relationship_type" enum field.
type RelationshipType string

// RelationshipType values.
const (
	RelationshipTypeExtends    RelationshipType = "extends"
	RelationshipTypeImplements RelationshipType = "implements"
	RelationshipTypeInherits   RelationshipType = "inherits"
	RelationshipTypeMixin      RelationshipType = "mixin"
)

func (rt RelationshipType) String() string {
	return string(rt)
}

// RelationshipTypeValidator is a validator for the "relationship_type" field enum values. It is called by the builders before save.
func RelationshipTypeValidator(rt RelationshipType) error {
	switch rt {
	case RelationshipTypeExtends, RelationshipTypeImplements, RelationshipTypeInherits, RelationshipTypeMixin:
		return nil
	default:
		return fmt.Errorf("inheritancerelationship: invalid enum value for relationship_type field: %q", rt)
	}
}

// OrderOption defines the ordering options for the InheritanceRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRelationshipType orders the results by the relationship_type field.
func ByRelationshipType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationshipType, opts...).ToFunc()
}

// ByLineNumber orders the results by the line_number field.
func ByLineNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineNumber, opts...).ToFunc()
}

// ByIsDirectInheritance orders the results by the is_direct_inheritance field.
func ByIsDirectInheritance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDirectInheritance, opts...).ToFunc()
}

// ByInheritanceDepth orders the results by the inheritance_depth field.
func ByInheritanceDepth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInheritanceDepth, opts...).ToFunc()
}

// ByModuleName orders the results by the module_name field.
func ByModuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByChildField orders the results by child field.
func ByChildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}
func newChildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
