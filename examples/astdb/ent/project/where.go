// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/code/examples/astdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// RootPath applies equality check predicate on the "root_path" field. It's identical to RootPathEQ.
func RootPath(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRootPath, v))
}

// GitHash applies equality check predicate on the "git_hash" field. It's identical to GitHashEQ.
func GitHash(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitHash, v))
}

// ScannedAt applies equality check predicate on the "scanned_at" field. It's identical to ScannedAtEQ.
func ScannedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldScannedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// RootPathEQ applies the EQ predicate on the "root_path" field.
func RootPathEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRootPath, v))
}

// RootPathNEQ applies the NEQ predicate on the "root_path" field.
func RootPathNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRootPath, v))
}

// RootPathIn applies the In predicate on the "root_path" field.
func RootPathIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRootPath, vs...))
}

// RootPathNotIn applies the NotIn predicate on the "root_path" field.
func RootPathNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRootPath, vs...))
}

// RootPathGT applies the GT predicate on the "root_path" field.
func RootPathGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRootPath, v))
}

// RootPathGTE applies the GTE predicate on the "root_path" field.
func RootPathGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRootPath, v))
}

// RootPathLT applies the LT predicate on the "root_path" field.
func RootPathLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRootPath, v))
}

// RootPathLTE applies the LTE predicate on the "root_path" field.
func RootPathLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRootPath, v))
}

// RootPathContains applies the Contains predicate on the "root_path" field.
func RootPathContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldRootPath, v))
}

// RootPathHasPrefix applies the HasPrefix predicate on the "root_path" field.
func RootPathHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldRootPath, v))
}

// RootPathHasSuffix applies the HasSuffix predicate on the "root_path" field.
func RootPathHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldRootPath, v))
}

// RootPathEqualFold applies the EqualFold predicate on the "root_path" field.
func RootPathEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldRootPath, v))
}

// RootPathContainsFold applies the ContainsFold predicate on the "root_path" field.
func RootPathContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldRootPath, v))
}

// GitHashEQ applies the EQ predicate on the "git_hash" field.
func GitHashEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitHash, v))
}

// GitHashNEQ applies the NEQ predicate on the "git_hash" field.
func GitHashNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitHash, v))
}

// GitHashIn applies the In predicate on the "git_hash" field.
func GitHashIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitHash, vs...))
}

// GitHashNotIn applies the NotIn predicate on the "git_hash" field.
func GitHashNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitHash, vs...))
}

// GitHashGT applies the GT predicate on the "git_hash" field.
func GitHashGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitHash, v))
}

// GitHashGTE applies the GTE predicate on the "git_hash" field.
func GitHashGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitHash, v))
}

// GitHashLT applies the LT predicate on the "git_hash" field.
func GitHashLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitHash, v))
}

// GitHashLTE applies the LTE predicate on the "git_hash" field.
func GitHashLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitHash, v))
}

// GitHashContains applies the Contains predicate on the "git_hash" field.
func GitHashContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitHash, v))
}

// GitHashHasPrefix applies the HasPrefix predicate on the "git_hash" field.
func GitHashHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitHash, v))
}

// GitHashHasSuffix applies the HasSuffix predicate on the "git_hash" field.
func GitHashHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitHash, v))
}

// GitHashIsNil applies the IsNil predicate on the "git_hash" field.
func GitHashIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGitHash))
}

// GitHashNotNil applies the NotNil predicate on the "git_hash" field.
func GitHashNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGitHash))
}

// GitHashEqualFold applies the EqualFold predicate on the "git_hash" field.
func GitHashEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitHash, v))
}

// GitHashContainsFold applies the ContainsFold predicate on the "git_hash" field.
func GitHashContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitHash, v))
}

// ScannedAtEQ applies the EQ predicate on the "scanned_at" field.
func ScannedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldScannedAt, v))
}

// ScannedAtNEQ applies the NEQ predicate on the "scanned_at" field.
func ScannedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldScannedAt, v))
}

// ScannedAtIn applies the In predicate on the "scanned_at" field.
func ScannedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldScannedAt, vs...))
}

// ScannedAtNotIn applies the NotIn predicate on the "scanned_at" field.
func ScannedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldScannedAt, vs...))
}

// ScannedAtGT applies the GT predicate on the "scanned_at" field.
func ScannedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldScannedAt, v))
}

// ScannedAtGTE applies the GTE predicate on the "scanned_at" field.
func ScannedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldScannedAt, v))
}

// ScannedAtLT applies the LT predicate on the "scanned_at" field.
func ScannedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldScannedAt, v))
}

// ScannedAtLTE applies the LTE predicate on the "scanned_at" field.
func ScannedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldScannedAt, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldMetadata))
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
