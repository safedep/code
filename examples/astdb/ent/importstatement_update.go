// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/predicate"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// ImportStatementUpdate is the builder for updating ImportStatement entities.
type ImportStatementUpdate struct {
	config
	hooks    []Hook
	mutation *ImportStatementMutation
}

// Where appends a list predicates to the ImportStatementUpdate builder.
func (_u *ImportStatementUpdate) Where(ps ...predicate.ImportStatement) *ImportStatementUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetModuleName sets the "module_name" field.
func (_u *ImportStatementUpdate) SetModuleName(v string) *ImportStatementUpdate {
	_u.mutation.SetModuleName(v)
	return _u
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableModuleName(v *string) *ImportStatementUpdate {
	if v != nil {
		_u.SetModuleName(*v)
	}
	return _u
}

// SetImportAlias sets the "import_alias" field.
func (_u *ImportStatementUpdate) SetImportAlias(v string) *ImportStatementUpdate {
	_u.mutation.SetImportAlias(v)
	return _u
}

// SetNillableImportAlias sets the "import_alias" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableImportAlias(v *string) *ImportStatementUpdate {
	if v != nil {
		_u.SetImportAlias(*v)
	}
	return _u
}

// ClearImportAlias clears the value of the "import_alias" field.
func (_u *ImportStatementUpdate) ClearImportAlias() *ImportStatementUpdate {
	_u.mutation.ClearImportAlias()
	return _u
}

// SetImportType sets the "import_type" field.
func (_u *ImportStatementUpdate) SetImportType(v importstatement.ImportType) *ImportStatementUpdate {
	_u.mutation.SetImportType(v)
	return _u
}

// SetNillableImportType sets the "import_type" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableImportType(v *importstatement.ImportType) *ImportStatementUpdate {
	if v != nil {
		_u.SetImportType(*v)
	}
	return _u
}

// SetLineNumber sets the "line_number" field.
func (_u *ImportStatementUpdate) SetLineNumber(v int) *ImportStatementUpdate {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableLineNumber(v *int) *ImportStatementUpdate {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *ImportStatementUpdate) AddLineNumber(v int) *ImportStatementUpdate {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetIsDynamic sets the "is_dynamic" field.
func (_u *ImportStatementUpdate) SetIsDynamic(v bool) *ImportStatementUpdate {
	_u.mutation.SetIsDynamic(v)
	return _u
}

// SetNillableIsDynamic sets the "is_dynamic" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableIsDynamic(v *bool) *ImportStatementUpdate {
	if v != nil {
		_u.SetIsDynamic(*v)
	}
	return _u
}

// SetImportedNames sets the "imported_names" field.
func (_u *ImportStatementUpdate) SetImportedNames(v []string) *ImportStatementUpdate {
	_u.mutation.SetImportedNames(v)
	return _u
}

// AppendImportedNames appends value to the "imported_names" field.
func (_u *ImportStatementUpdate) AppendImportedNames(v []string) *ImportStatementUpdate {
	_u.mutation.AppendImportedNames(v)
	return _u
}

// ClearImportedNames clears the value of the "imported_names" field.
func (_u *ImportStatementUpdate) ClearImportedNames() *ImportStatementUpdate {
	_u.mutation.ClearImportedNames()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ImportStatementUpdate) SetCreatedAt(v time.Time) *ImportStatementUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableCreatedAt(v *time.Time) *ImportStatementUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *ImportStatementUpdate) SetFileID(id int) *ImportStatementUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableFileID(id *int) *ImportStatementUpdate {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *ImportStatementUpdate) SetFile(v *File) *ImportStatementUpdate {
	return _u.SetFileID(v.ID)
}

// SetImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID.
func (_u *ImportStatementUpdate) SetImportedSymbolID(id int) *ImportStatementUpdate {
	_u.mutation.SetImportedSymbolID(id)
	return _u
}

// SetNillableImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *ImportStatementUpdate) SetNillableImportedSymbolID(id *int) *ImportStatementUpdate {
	if id != nil {
		_u = _u.SetImportedSymbolID(*id)
	}
	return _u
}

// SetImportedSymbol sets the "imported_symbol" edge to the Symbol entity.
func (_u *ImportStatementUpdate) SetImportedSymbol(v *Symbol) *ImportStatementUpdate {
	return _u.SetImportedSymbolID(v.ID)
}

// Mutation returns the ImportStatementMutation object of the builder.
func (_u *ImportStatementUpdate) Mutation() *ImportStatementMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ImportStatementUpdate) ClearFile() *ImportStatementUpdate {
	_u.mutation.ClearFile()
	return _u
}

// ClearImportedSymbol clears the "imported_symbol" edge to the Symbol entity.
func (_u *ImportStatementUpdate) ClearImportedSymbol() *ImportStatementUpdate {
	_u.mutation.ClearImportedSymbol()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImportStatementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImportStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImportStatementUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImportStatementUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImportStatementUpdate) check() error {
	if v, ok := _u.mutation.ModuleName(); ok {
		if err := importstatement.ModuleNameValidator(v); err != nil {
			return &ValidationError{Name: "module_name", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.module_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImportType(); ok {
		if err := importstatement.ImportTypeValidator(v); err != nil {
			return &ValidationError{Name: "import_type", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.import_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := importstatement.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.line_number": %w`, err)}
		}
	}
	return nil
}

func (_u *ImportStatementUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(importstatement.Table, importstatement.Columns, sqlgraph.NewFieldSpec(importstatement.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ModuleName(); ok {
		_spec.SetField(importstatement.FieldModuleName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImportAlias(); ok {
		_spec.SetField(importstatement.FieldImportAlias, field.TypeString, value)
	}
	if _u.mutation.ImportAliasCleared() {
		_spec.ClearField(importstatement.FieldImportAlias, field.TypeString)
	}
	if value, ok := _u.mutation.ImportType(); ok {
		_spec.SetField(importstatement.FieldImportType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(importstatement.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(importstatement.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsDynamic(); ok {
		_spec.SetField(importstatement.FieldIsDynamic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ImportedNames(); ok {
		_spec.SetField(importstatement.FieldImportedNames, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImportedNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, importstatement.FieldImportedNames, value)
		})
	}
	if _u.mutation.ImportedNamesCleared() {
		_spec.ClearField(importstatement.FieldImportedNames, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(importstatement.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.FileTable,
			Columns: []string{importstatement.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.FileTable,
			Columns: []string{importstatement.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImportedSymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.ImportedSymbolTable,
			Columns: []string{importstatement.ImportedSymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImportedSymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.ImportedSymbolTable,
			Columns: []string{importstatement.ImportedSymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{importstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImportStatementUpdateOne is the builder for updating a single ImportStatement entity.
type ImportStatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImportStatementMutation
}

// SetModuleName sets the "module_name" field.
func (_u *ImportStatementUpdateOne) SetModuleName(v string) *ImportStatementUpdateOne {
	_u.mutation.SetModuleName(v)
	return _u
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableModuleName(v *string) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetModuleName(*v)
	}
	return _u
}

// SetImportAlias sets the "import_alias" field.
func (_u *ImportStatementUpdateOne) SetImportAlias(v string) *ImportStatementUpdateOne {
	_u.mutation.SetImportAlias(v)
	return _u
}

// SetNillableImportAlias sets the "import_alias" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableImportAlias(v *string) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetImportAlias(*v)
	}
	return _u
}

// ClearImportAlias clears the value of the "import_alias" field.
func (_u *ImportStatementUpdateOne) ClearImportAlias() *ImportStatementUpdateOne {
	_u.mutation.ClearImportAlias()
	return _u
}

// SetImportType sets the "import_type" field.
func (_u *ImportStatementUpdateOne) SetImportType(v importstatement.ImportType) *ImportStatementUpdateOne {
	_u.mutation.SetImportType(v)
	return _u
}

// SetNillableImportType sets the "import_type" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableImportType(v *importstatement.ImportType) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetImportType(*v)
	}
	return _u
}

// SetLineNumber sets the "line_number" field.
func (_u *ImportStatementUpdateOne) SetLineNumber(v int) *ImportStatementUpdateOne {
	_u.mutation.ResetLineNumber()
	_u.mutation.SetLineNumber(v)
	return _u
}

// SetNillableLineNumber sets the "line_number" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableLineNumber(v *int) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetLineNumber(*v)
	}
	return _u
}

// AddLineNumber adds value to the "line_number" field.
func (_u *ImportStatementUpdateOne) AddLineNumber(v int) *ImportStatementUpdateOne {
	_u.mutation.AddLineNumber(v)
	return _u
}

// SetIsDynamic sets the "is_dynamic" field.
func (_u *ImportStatementUpdateOne) SetIsDynamic(v bool) *ImportStatementUpdateOne {
	_u.mutation.SetIsDynamic(v)
	return _u
}

// SetNillableIsDynamic sets the "is_dynamic" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableIsDynamic(v *bool) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetIsDynamic(*v)
	}
	return _u
}

// SetImportedNames sets the "imported_names" field.
func (_u *ImportStatementUpdateOne) SetImportedNames(v []string) *ImportStatementUpdateOne {
	_u.mutation.SetImportedNames(v)
	return _u
}

// AppendImportedNames appends value to the "imported_names" field.
func (_u *ImportStatementUpdateOne) AppendImportedNames(v []string) *ImportStatementUpdateOne {
	_u.mutation.AppendImportedNames(v)
	return _u
}

// ClearImportedNames clears the value of the "imported_names" field.
func (_u *ImportStatementUpdateOne) ClearImportedNames() *ImportStatementUpdateOne {
	_u.mutation.ClearImportedNames()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ImportStatementUpdateOne) SetCreatedAt(v time.Time) *ImportStatementUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableCreatedAt(v *time.Time) *ImportStatementUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *ImportStatementUpdateOne) SetFileID(id int) *ImportStatementUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableFileID(id *int) *ImportStatementUpdateOne {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *ImportStatementUpdateOne) SetFile(v *File) *ImportStatementUpdateOne {
	return _u.SetFileID(v.ID)
}

// SetImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID.
func (_u *ImportStatementUpdateOne) SetImportedSymbolID(id int) *ImportStatementUpdateOne {
	_u.mutation.SetImportedSymbolID(id)
	return _u
}

// SetNillableImportedSymbolID sets the "imported_symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_u *ImportStatementUpdateOne) SetNillableImportedSymbolID(id *int) *ImportStatementUpdateOne {
	if id != nil {
		_u = _u.SetImportedSymbolID(*id)
	}
	return _u
}

// SetImportedSymbol sets the "imported_symbol" edge to the Symbol entity.
func (_u *ImportStatementUpdateOne) SetImportedSymbol(v *Symbol) *ImportStatementUpdateOne {
	return _u.SetImportedSymbolID(v.ID)
}

// Mutation returns the ImportStatementMutation object of the builder.
func (_u *ImportStatementUpdateOne) Mutation() *ImportStatementMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ImportStatementUpdateOne) ClearFile() *ImportStatementUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// ClearImportedSymbol clears the "imported_symbol" edge to the Symbol entity.
func (_u *ImportStatementUpdateOne) ClearImportedSymbol() *ImportStatementUpdateOne {
	_u.mutation.ClearImportedSymbol()
	return _u
}

// Where appends a list predicates to the ImportStatementUpdate builder.
func (_u *ImportStatementUpdateOne) Where(ps ...predicate.ImportStatement) *ImportStatementUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImportStatementUpdateOne) Select(field string, fields ...string) *ImportStatementUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImportStatement entity.
func (_u *ImportStatementUpdateOne) Save(ctx context.Context) (*ImportStatement, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImportStatementUpdateOne) SaveX(ctx context.Context) *ImportStatement {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImportStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImportStatementUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImportStatementUpdateOne) check() error {
	if v, ok := _u.mutation.ModuleName(); ok {
		if err := importstatement.ModuleNameValidator(v); err != nil {
			return &ValidationError{Name: "module_name", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.module_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ImportType(); ok {
		if err := importstatement.ImportTypeValidator(v); err != nil {
			return &ValidationError{Name: "import_type", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.import_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LineNumber(); ok {
		if err := importstatement.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "ImportStatement.line_number": %w`, err)}
		}
	}
	return nil
}

func (_u *ImportStatementUpdateOne) sqlSave(ctx context.Context) (_node *ImportStatement, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(importstatement.Table, importstatement.Columns, sqlgraph.NewFieldSpec(importstatement.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImportStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, importstatement.FieldID)
		for _, f := range fields {
			if !importstatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != importstatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ModuleName(); ok {
		_spec.SetField(importstatement.FieldModuleName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImportAlias(); ok {
		_spec.SetField(importstatement.FieldImportAlias, field.TypeString, value)
	}
	if _u.mutation.ImportAliasCleared() {
		_spec.ClearField(importstatement.FieldImportAlias, field.TypeString)
	}
	if value, ok := _u.mutation.ImportType(); ok {
		_spec.SetField(importstatement.FieldImportType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LineNumber(); ok {
		_spec.SetField(importstatement.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLineNumber(); ok {
		_spec.AddField(importstatement.FieldLineNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsDynamic(); ok {
		_spec.SetField(importstatement.FieldIsDynamic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ImportedNames(); ok {
		_spec.SetField(importstatement.FieldImportedNames, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImportedNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, importstatement.FieldImportedNames, value)
		})
	}
	if _u.mutation.ImportedNamesCleared() {
		_spec.ClearField(importstatement.FieldImportedNames, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(importstatement.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.FileTable,
			Columns: []string{importstatement.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.FileTable,
			Columns: []string{importstatement.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImportedSymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.ImportedSymbolTable,
			Columns: []string{importstatement.ImportedSymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImportedSymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   importstatement.ImportedSymbolTable,
			Columns: []string{importstatement.ImportedSymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImportStatement{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{importstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
