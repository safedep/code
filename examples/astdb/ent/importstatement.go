// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/symbol"
)

// ImportStatement is the model entity for the ImportStatement schema.
type ImportStatement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ModuleName holds the value of the "module_name" field.
	ModuleName string `json:"module_name,omitempty"`
	// ImportAlias holds the value of the "import_alias" field.
	ImportAlias string `json:"import_alias,omitempty"`
	// ImportType holds the value of the "import_type" field.
	ImportType importstatement.ImportType `json:"import_type,omitempty"`
	// LineNumber holds the value of the "line_number" field.
	LineNumber int `json:"line_number,omitempty"`
	// IsDynamic holds the value of the "is_dynamic" field.
	IsDynamic bool `json:"is_dynamic,omitempty"`
	// ImportedNames holds the value of the "imported_names" field.
	ImportedNames []string `json:"imported_names,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImportStatementQuery when eager-loading is set.
	Edges              ImportStatementEdges `json:"edges"`
	file_imports       *int
	imported_symbol_id *int
	selectValues       sql.SelectValues
}

// ImportStatementEdges holds the relations/edges for other nodes in the graph.
type ImportStatementEdges struct {
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// ImportedSymbol holds the value of the imported_symbol edge.
	ImportedSymbol *Symbol `json:"imported_symbol,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImportStatementEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// ImportedSymbolOrErr returns the ImportedSymbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImportStatementEdges) ImportedSymbolOrErr() (*Symbol, error) {
	if e.ImportedSymbol != nil {
		return e.ImportedSymbol, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: symbol.Label}
	}
	return nil, &NotLoadedError{edge: "imported_symbol"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImportStatement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case importstatement.FieldImportedNames:
			values[i] = new([]byte)
		case importstatement.FieldIsDynamic:
			values[i] = new(sql.NullBool)
		case importstatement.FieldID, importstatement.FieldLineNumber:
			values[i] = new(sql.NullInt64)
		case importstatement.FieldModuleName, importstatement.FieldImportAlias, importstatement.FieldImportType:
			values[i] = new(sql.NullString)
		case importstatement.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case importstatement.ForeignKeys[0]: // file_imports
			values[i] = new(sql.NullInt64)
		case importstatement.ForeignKeys[1]: // imported_symbol_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImportStatement fields.
func (_m *ImportStatement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case importstatement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case importstatement.FieldModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_name", values[i])
			} else if value.Valid {
				_m.ModuleName = value.String
			}
		case importstatement.FieldImportAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field import_alias", values[i])
			} else if value.Valid {
				_m.ImportAlias = value.String
			}
		case importstatement.FieldImportType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field import_type", values[i])
			} else if value.Valid {
				_m.ImportType = importstatement.ImportType(value.String)
			}
		case importstatement.FieldLineNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_number", values[i])
			} else if value.Valid {
				_m.LineNumber = int(value.Int64)
			}
		case importstatement.FieldIsDynamic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_dynamic", values[i])
			} else if value.Valid {
				_m.IsDynamic = value.Bool
			}
		case importstatement.FieldImportedNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field imported_names", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ImportedNames); err != nil {
					return fmt.Errorf("unmarshal field imported_names: %w", err)
				}
			}
		case importstatement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case importstatement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_imports", value)
			} else if value.Valid {
				_m.file_imports = new(int)
				*_m.file_imports = int(value.Int64)
			}
		case importstatement.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field imported_symbol_id", value)
			} else if value.Valid {
				_m.imported_symbol_id = new(int)
				*_m.imported_symbol_id = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImportStatement.
// This includes values selected through modifiers, order, etc.
func (_m *ImportStatement) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the ImportStatement entity.
func (_m *ImportStatement) QueryFile() *FileQuery {
	return NewImportStatementClient(_m.config).QueryFile(_m)
}

// QueryImportedSymbol queries the "imported_symbol" edge of the ImportStatement entity.
func (_m *ImportStatement) QueryImportedSymbol() *SymbolQuery {
	return NewImportStatementClient(_m.config).QueryImportedSymbol(_m)
}

// Update returns a builder for updating this ImportStatement.
// Note that you need to call ImportStatement.Unwrap() before calling this method if this ImportStatement
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImportStatement) Update() *ImportStatementUpdateOne {
	return NewImportStatementClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImportStatement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImportStatement) Unwrap() *ImportStatement {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImportStatement is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImportStatement) String() string {
	var builder strings.Builder
	builder.WriteString("ImportStatement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("module_name=")
	builder.WriteString(_m.ModuleName)
	builder.WriteString(", ")
	builder.WriteString("import_alias=")
	builder.WriteString(_m.ImportAlias)
	builder.WriteString(", ")
	builder.WriteString("import_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImportType))
	builder.WriteString(", ")
	builder.WriteString("line_number=")
	builder.WriteString(fmt.Sprintf("%v", _m.LineNumber))
	builder.WriteString(", ")
	builder.WriteString("is_dynamic=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDynamic))
	builder.WriteString(", ")
	builder.WriteString("imported_names=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImportedNames))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ImportStatements is a parsable slice of ImportStatement.
type ImportStatements []*ImportStatement
