// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/callrelationship"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/importstatement"
	"github.com/safedep/code/examples/astdb/ent/inheritancerelationship"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// SymbolCreate is the builder for creating a Symbol entity.
type SymbolCreate struct {
	config
	mutation *SymbolMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *SymbolCreate) SetName(v string) *SymbolCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetQualifiedName sets the "qualified_name" field.
func (_c *SymbolCreate) SetQualifiedName(v string) *SymbolCreate {
	_c.mutation.SetQualifiedName(v)
	return _c
}

// SetSymbolType sets the "symbol_type" field.
func (_c *SymbolCreate) SetSymbolType(v symbol.SymbolType) *SymbolCreate {
	_c.mutation.SetSymbolType(v)
	return _c
}

// SetScopeType sets the "scope_type" field.
func (_c *SymbolCreate) SetScopeType(v symbol.ScopeType) *SymbolCreate {
	_c.mutation.SetScopeType(v)
	return _c
}

// SetAccessModifier sets the "access_modifier" field.
func (_c *SymbolCreate) SetAccessModifier(v symbol.AccessModifier) *SymbolCreate {
	_c.mutation.SetAccessModifier(v)
	return _c
}

// SetNillableAccessModifier sets the "access_modifier" field if the given value is not nil.
func (_c *SymbolCreate) SetNillableAccessModifier(v *symbol.AccessModifier) *SymbolCreate {
	if v != nil {
		_c.SetAccessModifier(*v)
	}
	return _c
}

// SetIsStatic sets the "is_static" field.
func (_c *SymbolCreate) SetIsStatic(v bool) *SymbolCreate {
	_c.mutation.SetIsStatic(v)
	return _c
}

// SetNillableIsStatic sets the "is_static" field if the given value is not nil.
func (_c *SymbolCreate) SetNillableIsStatic(v *bool) *SymbolCreate {
	if v != nil {
		_c.SetIsStatic(*v)
	}
	return _c
}

// SetIsAbstract sets the "is_abstract" field.
func (_c *SymbolCreate) SetIsAbstract(v bool) *SymbolCreate {
	_c.mutation.SetIsAbstract(v)
	return _c
}

// SetNillableIsAbstract sets the "is_abstract" field if the given value is not nil.
func (_c *SymbolCreate) SetNillableIsAbstract(v *bool) *SymbolCreate {
	if v != nil {
		_c.SetIsAbstract(*v)
	}
	return _c
}

// SetIsAsync sets the "is_async" field.
func (_c *SymbolCreate) SetIsAsync(v bool) *SymbolCreate {
	_c.mutation.SetIsAsync(v)
	return _c
}

// SetNillableIsAsync sets the "is_async" field if the given value is not nil.
func (_c *SymbolCreate) SetNillableIsAsync(v *bool) *SymbolCreate {
	if v != nil {
		_c.SetIsAsync(*v)
	}
	return _c
}

// SetLineNumber sets the "line_number" field.
func (_c *SymbolCreate) SetLineNumber(v int) *SymbolCreate {
	_c.mutation.SetLineNumber(v)
	return _c
}

// SetColumnNumber sets the "column_number" field.
func (_c *SymbolCreate) SetColumnNumber(v int) *SymbolCreate {
	_c.mutation.SetColumnNumber(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SymbolCreate) SetMetadata(v map[string]interface{}) *SymbolCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SymbolCreate) SetCreatedAt(v time.Time) *SymbolCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SymbolCreate) SetNillableCreatedAt(v *time.Time) *SymbolCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *SymbolCreate) SetFileID(id int) *SymbolCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *SymbolCreate) SetNillableFileID(id *int) *SymbolCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *SymbolCreate) SetFile(v *File) *SymbolCreate {
	return _c.SetFileID(v.ID)
}

// SetAstNodeID sets the "ast_node" edge to the ASTNode entity by ID.
func (_c *SymbolCreate) SetAstNodeID(id int) *SymbolCreate {
	_c.mutation.SetAstNodeID(id)
	return _c
}

// SetNillableAstNodeID sets the "ast_node" edge to the ASTNode entity by ID if the given value is not nil.
func (_c *SymbolCreate) SetNillableAstNodeID(id *int) *SymbolCreate {
	if id != nil {
		_c = _c.SetAstNodeID(*id)
	}
	return _c
}

// SetAstNode sets the "ast_node" edge to the ASTNode entity.
func (_c *SymbolCreate) SetAstNode(v *ASTNode) *SymbolCreate {
	return _c.SetAstNodeID(v.ID)
}

// AddCallsMadeIDs adds the "calls_made" edge to the CallRelationship entity by IDs.
func (_c *SymbolCreate) AddCallsMadeIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddCallsMadeIDs(ids...)
	return _c
}

// AddCallsMade adds the "calls_made" edges to the CallRelationship entity.
func (_c *SymbolCreate) AddCallsMade(v ...*CallRelationship) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCallsMadeIDs(ids...)
}

// AddCallsReceivedIDs adds the "calls_received" edge to the CallRelationship entity by IDs.
func (_c *SymbolCreate) AddCallsReceivedIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddCallsReceivedIDs(ids...)
	return _c
}

// AddCallsReceived adds the "calls_received" edges to the CallRelationship entity.
func (_c *SymbolCreate) AddCallsReceived(v ...*CallRelationship) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCallsReceivedIDs(ids...)
}

// AddReferenceIDs adds the "references" edge to the SymbolReference entity by IDs.
func (_c *SymbolCreate) AddReferenceIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddReferenceIDs(ids...)
	return _c
}

// AddReferences adds the "references" edges to the SymbolReference entity.
func (_c *SymbolCreate) AddReferences(v ...*SymbolReference) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReferenceIDs(ids...)
}

// AddChildClassIDs adds the "child_classes" edge to the InheritanceRelationship entity by IDs.
func (_c *SymbolCreate) AddChildClassIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddChildClassIDs(ids...)
	return _c
}

// AddChildClasses adds the "child_classes" edges to the InheritanceRelationship entity.
func (_c *SymbolCreate) AddChildClasses(v ...*InheritanceRelationship) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildClassIDs(ids...)
}

// AddParentClassIDs adds the "parent_classes" edge to the InheritanceRelationship entity by IDs.
func (_c *SymbolCreate) AddParentClassIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddParentClassIDs(ids...)
	return _c
}

// AddParentClasses adds the "parent_classes" edges to the InheritanceRelationship entity.
func (_c *SymbolCreate) AddParentClasses(v ...*InheritanceRelationship) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddParentClassIDs(ids...)
}

// AddImportReferenceIDs adds the "import_references" edge to the ImportStatement entity by IDs.
func (_c *SymbolCreate) AddImportReferenceIDs(ids ...int) *SymbolCreate {
	_c.mutation.AddImportReferenceIDs(ids...)
	return _c
}

// AddImportReferences adds the "import_references" edges to the ImportStatement entity.
func (_c *SymbolCreate) AddImportReferences(v ...*ImportStatement) *SymbolCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddImportReferenceIDs(ids...)
}

// Mutation returns the SymbolMutation object of the builder.
func (_c *SymbolCreate) Mutation() *SymbolMutation {
	return _c.mutation
}

// Save creates the Symbol in the database.
func (_c *SymbolCreate) Save(ctx context.Context) (*Symbol, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SymbolCreate) SaveX(ctx context.Context) *Symbol {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SymbolCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SymbolCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SymbolCreate) defaults() {
	if _, ok := _c.mutation.IsStatic(); !ok {
		v := symbol.DefaultIsStatic
		_c.mutation.SetIsStatic(v)
	}
	if _, ok := _c.mutation.IsAbstract(); !ok {
		v := symbol.DefaultIsAbstract
		_c.mutation.SetIsAbstract(v)
	}
	if _, ok := _c.mutation.IsAsync(); !ok {
		v := symbol.DefaultIsAsync
		_c.mutation.SetIsAsync(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := symbol.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SymbolCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Symbol.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := symbol.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Symbol.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.QualifiedName(); !ok {
		return &ValidationError{Name: "qualified_name", err: errors.New(`ent: missing required field "Symbol.qualified_name"`)}
	}
	if v, ok := _c.mutation.QualifiedName(); ok {
		if err := symbol.QualifiedNameValidator(v); err != nil {
			return &ValidationError{Name: "qualified_name", err: fmt.Errorf(`ent: validator failed for field "Symbol.qualified_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SymbolType(); !ok {
		return &ValidationError{Name: "symbol_type", err: errors.New(`ent: missing required field "Symbol.symbol_type"`)}
	}
	if v, ok := _c.mutation.SymbolType(); ok {
		if err := symbol.SymbolTypeValidator(v); err != nil {
			return &ValidationError{Name: "symbol_type", err: fmt.Errorf(`ent: validator failed for field "Symbol.symbol_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ScopeType(); !ok {
		return &ValidationError{Name: "scope_type", err: errors.New(`ent: missing required field "Symbol.scope_type"`)}
	}
	if v, ok := _c.mutation.ScopeType(); ok {
		if err := symbol.ScopeTypeValidator(v); err != nil {
			return &ValidationError{Name: "scope_type", err: fmt.Errorf(`ent: validator failed for field "Symbol.scope_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AccessModifier(); ok {
		if err := symbol.AccessModifierValidator(v); err != nil {
			return &ValidationError{Name: "access_modifier", err: fmt.Errorf(`ent: validator failed for field "Symbol.access_modifier": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsStatic(); !ok {
		return &ValidationError{Name: "is_static", err: errors.New(`ent: missing required field "Symbol.is_static"`)}
	}
	if _, ok := _c.mutation.IsAbstract(); !ok {
		return &ValidationError{Name: "is_abstract", err: errors.New(`ent: missing required field "Symbol.is_abstract"`)}
	}
	if _, ok := _c.mutation.IsAsync(); !ok {
		return &ValidationError{Name: "is_async", err: errors.New(`ent: missing required field "Symbol.is_async"`)}
	}
	if _, ok := _c.mutation.LineNumber(); !ok {
		return &ValidationError{Name: "line_number", err: errors.New(`ent: missing required field "Symbol.line_number"`)}
	}
	if v, ok := _c.mutation.LineNumber(); ok {
		if err := symbol.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "Symbol.line_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ColumnNumber(); !ok {
		return &ValidationError{Name: "column_number", err: errors.New(`ent: missing required field "Symbol.column_number"`)}
	}
	if v, ok := _c.mutation.ColumnNumber(); ok {
		if err := symbol.ColumnNumberValidator(v); err != nil {
			return &ValidationError{Name: "column_number", err: fmt.Errorf(`ent: validator failed for field "Symbol.column_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Symbol.created_at"`)}
	}
	return nil
}

func (_c *SymbolCreate) sqlSave(ctx context.Context) (*Symbol, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SymbolCreate) createSpec() (*Symbol, *sqlgraph.CreateSpec) {
	var (
		_node = &Symbol{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(symbol.Table, sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(symbol.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.QualifiedName(); ok {
		_spec.SetField(symbol.FieldQualifiedName, field.TypeString, value)
		_node.QualifiedName = value
	}
	if value, ok := _c.mutation.SymbolType(); ok {
		_spec.SetField(symbol.FieldSymbolType, field.TypeEnum, value)
		_node.SymbolType = value
	}
	if value, ok := _c.mutation.ScopeType(); ok {
		_spec.SetField(symbol.FieldScopeType, field.TypeEnum, value)
		_node.ScopeType = value
	}
	if value, ok := _c.mutation.AccessModifier(); ok {
		_spec.SetField(symbol.FieldAccessModifier, field.TypeEnum, value)
		_node.AccessModifier = value
	}
	if value, ok := _c.mutation.IsStatic(); ok {
		_spec.SetField(symbol.FieldIsStatic, field.TypeBool, value)
		_node.IsStatic = value
	}
	if value, ok := _c.mutation.IsAbstract(); ok {
		_spec.SetField(symbol.FieldIsAbstract, field.TypeBool, value)
		_node.IsAbstract = value
	}
	if value, ok := _c.mutation.IsAsync(); ok {
		_spec.SetField(symbol.FieldIsAsync, field.TypeBool, value)
		_node.IsAsync = value
	}
	if value, ok := _c.mutation.LineNumber(); ok {
		_spec.SetField(symbol.FieldLineNumber, field.TypeInt, value)
		_node.LineNumber = value
	}
	if value, ok := _c.mutation.ColumnNumber(); ok {
		_spec.SetField(symbol.FieldColumnNumber, field.TypeInt, value)
		_node.ColumnNumber = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(symbol.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(symbol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbol.FileTable,
			Columns: []string{symbol.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_symbols = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AstNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   symbol.AstNodeTable,
			Columns: []string{symbol.AstNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ast_node_symbol = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CallsMadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.CallsMadeTable,
			Columns: []string{symbol.CallsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CallsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.CallsReceivedTable,
			Columns: []string{symbol.CallsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ReferencesTable,
			Columns: []string{symbol.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ChildClassesTable,
			Columns: []string{symbol.ChildClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ParentClassesTable,
			Columns: []string{symbol.ParentClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inheritancerelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImportReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ImportReferencesTable,
			Columns: []string{symbol.ImportReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(importstatement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SymbolCreateBulk is the builder for creating many Symbol entities in bulk.
type SymbolCreateBulk struct {
	config
	err      error
	builders []*SymbolCreate
}

// Save creates the Symbol entities in the database.
func (_c *SymbolCreateBulk) Save(ctx context.Context) ([]*Symbol, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Symbol, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SymbolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SymbolCreateBulk) SaveX(ctx context.Context) []*Symbol {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SymbolCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SymbolCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
