// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// ASTNodeCreate is the builder for creating a ASTNode entity.
type ASTNodeCreate struct {
	config
	mutation *ASTNodeMutation
	hooks    []Hook
}

// SetNodeType sets the "node_type" field.
func (_c *ASTNodeCreate) SetNodeType(v astnode.NodeType) *ASTNodeCreate {
	_c.mutation.SetNodeType(v)
	return _c
}

// SetName sets the "name" field.
func (_c *ASTNodeCreate) SetName(v string) *ASTNodeCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableName(v *string) *ASTNodeCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetQualifiedName sets the "qualified_name" field.
func (_c *ASTNodeCreate) SetQualifiedName(v string) *ASTNodeCreate {
	_c.mutation.SetQualifiedName(v)
	return _c
}

// SetNillableQualifiedName sets the "qualified_name" field if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableQualifiedName(v *string) *ASTNodeCreate {
	if v != nil {
		_c.SetQualifiedName(*v)
	}
	return _c
}

// SetStartLine sets the "start_line" field.
func (_c *ASTNodeCreate) SetStartLine(v int) *ASTNodeCreate {
	_c.mutation.SetStartLine(v)
	return _c
}

// SetEndLine sets the "end_line" field.
func (_c *ASTNodeCreate) SetEndLine(v int) *ASTNodeCreate {
	_c.mutation.SetEndLine(v)
	return _c
}

// SetStartColumn sets the "start_column" field.
func (_c *ASTNodeCreate) SetStartColumn(v int) *ASTNodeCreate {
	_c.mutation.SetStartColumn(v)
	return _c
}

// SetEndColumn sets the "end_column" field.
func (_c *ASTNodeCreate) SetEndColumn(v int) *ASTNodeCreate {
	_c.mutation.SetEndColumn(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *ASTNodeCreate) SetContent(v string) *ASTNodeCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableContent(v *string) *ASTNodeCreate {
	if v != nil {
		_c.SetContent(*v)
	}
	return _c
}

// SetTreeSitterType sets the "tree_sitter_type" field.
func (_c *ASTNodeCreate) SetTreeSitterType(v string) *ASTNodeCreate {
	_c.mutation.SetTreeSitterType(v)
	return _c
}

// SetNillableTreeSitterType sets the "tree_sitter_type" field if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableTreeSitterType(v *string) *ASTNodeCreate {
	if v != nil {
		_c.SetTreeSitterType(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *ASTNodeCreate) SetMetadata(v map[string]interface{}) *ASTNodeCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ASTNodeCreate) SetCreatedAt(v time.Time) *ASTNodeCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableCreatedAt(v *time.Time) *ASTNodeCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *ASTNodeCreate) SetFileID(id int) *ASTNodeCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableFileID(id *int) *ASTNodeCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *ASTNodeCreate) SetFile(v *File) *ASTNodeCreate {
	return _c.SetFileID(v.ID)
}

// AddChildIDs adds the "children" edge to the ASTNode entity by IDs.
func (_c *ASTNodeCreate) AddChildIDs(ids ...int) *ASTNodeCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the ASTNode entity.
func (_c *ASTNodeCreate) AddChildren(v ...*ASTNode) *ASTNodeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the ASTNode entity by ID.
func (_c *ASTNodeCreate) SetParentID(id int) *ASTNodeCreate {
	_c.mutation.SetParentID(id)
	return _c
}

// SetNillableParentID sets the "parent" edge to the ASTNode entity by ID if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableParentID(id *int) *ASTNodeCreate {
	if id != nil {
		_c = _c.SetParentID(*id)
	}
	return _c
}

// SetParent sets the "parent" edge to the ASTNode entity.
func (_c *ASTNodeCreate) SetParent(v *ASTNode) *ASTNodeCreate {
	return _c.SetParentID(v.ID)
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_c *ASTNodeCreate) SetSymbolID(id int) *ASTNodeCreate {
	_c.mutation.SetSymbolID(id)
	return _c
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_c *ASTNodeCreate) SetNillableSymbolID(id *int) *ASTNodeCreate {
	if id != nil {
		_c = _c.SetSymbolID(*id)
	}
	return _c
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_c *ASTNodeCreate) SetSymbol(v *Symbol) *ASTNodeCreate {
	return _c.SetSymbolID(v.ID)
}

// AddReferenceIDs adds the "references" edge to the SymbolReference entity by IDs.
func (_c *ASTNodeCreate) AddReferenceIDs(ids ...int) *ASTNodeCreate {
	_c.mutation.AddReferenceIDs(ids...)
	return _c
}

// AddReferences adds the "references" edges to the SymbolReference entity.
func (_c *ASTNodeCreate) AddReferences(v ...*SymbolReference) *ASTNodeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReferenceIDs(ids...)
}

// Mutation returns the ASTNodeMutation object of the builder.
func (_c *ASTNodeCreate) Mutation() *ASTNodeMutation {
	return _c.mutation
}

// Save creates the ASTNode in the database.
func (_c *ASTNodeCreate) Save(ctx context.Context) (*ASTNode, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ASTNodeCreate) SaveX(ctx context.Context) *ASTNode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ASTNodeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ASTNodeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ASTNodeCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := astnode.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ASTNodeCreate) check() error {
	if _, ok := _c.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "ASTNode.node_type"`)}
	}
	if v, ok := _c.mutation.NodeType(); ok {
		if err := astnode.NodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "node_type", err: fmt.Errorf(`ent: validator failed for field "ASTNode.node_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StartLine(); !ok {
		return &ValidationError{Name: "start_line", err: errors.New(`ent: missing required field "ASTNode.start_line"`)}
	}
	if v, ok := _c.mutation.StartLine(); ok {
		if err := astnode.StartLineValidator(v); err != nil {
			return &ValidationError{Name: "start_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_line": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EndLine(); !ok {
		return &ValidationError{Name: "end_line", err: errors.New(`ent: missing required field "ASTNode.end_line"`)}
	}
	if v, ok := _c.mutation.EndLine(); ok {
		if err := astnode.EndLineValidator(v); err != nil {
			return &ValidationError{Name: "end_line", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_line": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StartColumn(); !ok {
		return &ValidationError{Name: "start_column", err: errors.New(`ent: missing required field "ASTNode.start_column"`)}
	}
	if v, ok := _c.mutation.StartColumn(); ok {
		if err := astnode.StartColumnValidator(v); err != nil {
			return &ValidationError{Name: "start_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.start_column": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EndColumn(); !ok {
		return &ValidationError{Name: "end_column", err: errors.New(`ent: missing required field "ASTNode.end_column"`)}
	}
	if v, ok := _c.mutation.EndColumn(); ok {
		if err := astnode.EndColumnValidator(v); err != nil {
			return &ValidationError{Name: "end_column", err: fmt.Errorf(`ent: validator failed for field "ASTNode.end_column": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ASTNode.created_at"`)}
	}
	return nil
}

func (_c *ASTNodeCreate) sqlSave(ctx context.Context) (*ASTNode, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ASTNodeCreate) createSpec() (*ASTNode, *sqlgraph.CreateSpec) {
	var (
		_node = &ASTNode{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(astnode.Table, sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.NodeType(); ok {
		_spec.SetField(astnode.FieldNodeType, field.TypeEnum, value)
		_node.NodeType = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(astnode.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.QualifiedName(); ok {
		_spec.SetField(astnode.FieldQualifiedName, field.TypeString, value)
		_node.QualifiedName = value
	}
	if value, ok := _c.mutation.StartLine(); ok {
		_spec.SetField(astnode.FieldStartLine, field.TypeInt, value)
		_node.StartLine = value
	}
	if value, ok := _c.mutation.EndLine(); ok {
		_spec.SetField(astnode.FieldEndLine, field.TypeInt, value)
		_node.EndLine = value
	}
	if value, ok := _c.mutation.StartColumn(); ok {
		_spec.SetField(astnode.FieldStartColumn, field.TypeInt, value)
		_node.StartColumn = value
	}
	if value, ok := _c.mutation.EndColumn(); ok {
		_spec.SetField(astnode.FieldEndColumn, field.TypeInt, value)
		_node.EndColumn = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(astnode.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.TreeSitterType(); ok {
		_spec.SetField(astnode.FieldTreeSitterType, field.TypeString, value)
		_node.TreeSitterType = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(astnode.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(astnode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.FileTable,
			Columns: []string{astnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_ast_nodes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ChildrenTable,
			Columns: []string{astnode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astnode.ParentTable,
			Columns: []string{astnode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ast_node_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astnode.SymbolTable,
			Columns: []string{astnode.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astnode.ReferencesTable,
			Columns: []string{astnode.ReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ASTNodeCreateBulk is the builder for creating many ASTNode entities in bulk.
type ASTNodeCreateBulk struct {
	config
	err      error
	builders []*ASTNodeCreate
}

// Save creates the ASTNode entities in the database.
func (_c *ASTNodeCreateBulk) Save(ctx context.Context) ([]*ASTNode, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ASTNode, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ASTNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ASTNodeCreateBulk) SaveX(ctx context.Context) []*ASTNode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ASTNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ASTNodeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
