// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/code/examples/astdb/ent/astnode"
	"github.com/safedep/code/examples/astdb/ent/file"
	"github.com/safedep/code/examples/astdb/ent/symbol"
	"github.com/safedep/code/examples/astdb/ent/symbolreference"
)

// SymbolReferenceCreate is the builder for creating a SymbolReference entity.
type SymbolReferenceCreate struct {
	config
	mutation *SymbolReferenceMutation
	hooks    []Hook
}

// SetLineNumber sets the "line_number" field.
func (_c *SymbolReferenceCreate) SetLineNumber(v int) *SymbolReferenceCreate {
	_c.mutation.SetLineNumber(v)
	return _c
}

// SetColumnNumber sets the "column_number" field.
func (_c *SymbolReferenceCreate) SetColumnNumber(v int) *SymbolReferenceCreate {
	_c.mutation.SetColumnNumber(v)
	return _c
}

// SetReferenceType sets the "reference_type" field.
func (_c *SymbolReferenceCreate) SetReferenceType(v symbolreference.ReferenceType) *SymbolReferenceCreate {
	_c.mutation.SetReferenceType(v)
	return _c
}

// SetContext sets the "context" field.
func (_c *SymbolReferenceCreate) SetContext(v string) *SymbolReferenceCreate {
	_c.mutation.SetContext(v)
	return _c
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_c *SymbolReferenceCreate) SetNillableContext(v *string) *SymbolReferenceCreate {
	if v != nil {
		_c.SetContext(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SymbolReferenceCreate) SetCreatedAt(v time.Time) *SymbolReferenceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SymbolReferenceCreate) SetNillableCreatedAt(v *time.Time) *SymbolReferenceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetSymbolID sets the "symbol" edge to the Symbol entity by ID.
func (_c *SymbolReferenceCreate) SetSymbolID(id int) *SymbolReferenceCreate {
	_c.mutation.SetSymbolID(id)
	return _c
}

// SetNillableSymbolID sets the "symbol" edge to the Symbol entity by ID if the given value is not nil.
func (_c *SymbolReferenceCreate) SetNillableSymbolID(id *int) *SymbolReferenceCreate {
	if id != nil {
		_c = _c.SetSymbolID(*id)
	}
	return _c
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (_c *SymbolReferenceCreate) SetSymbol(v *Symbol) *SymbolReferenceCreate {
	return _c.SetSymbolID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *SymbolReferenceCreate) SetFileID(id int) *SymbolReferenceCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *SymbolReferenceCreate) SetNillableFileID(id *int) *SymbolReferenceCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *SymbolReferenceCreate) SetFile(v *File) *SymbolReferenceCreate {
	return _c.SetFileID(v.ID)
}

// SetContextNodeID sets the "context_node" edge to the ASTNode entity by ID.
func (_c *SymbolReferenceCreate) SetContextNodeID(id int) *SymbolReferenceCreate {
	_c.mutation.SetContextNodeID(id)
	return _c
}

// SetNillableContextNodeID sets the "context_node" edge to the ASTNode entity by ID if the given value is not nil.
func (_c *SymbolReferenceCreate) SetNillableContextNodeID(id *int) *SymbolReferenceCreate {
	if id != nil {
		_c = _c.SetContextNodeID(*id)
	}
	return _c
}

// SetContextNode sets the "context_node" edge to the ASTNode entity.
func (_c *SymbolReferenceCreate) SetContextNode(v *ASTNode) *SymbolReferenceCreate {
	return _c.SetContextNodeID(v.ID)
}

// Mutation returns the SymbolReferenceMutation object of the builder.
func (_c *SymbolReferenceCreate) Mutation() *SymbolReferenceMutation {
	return _c.mutation
}

// Save creates the SymbolReference in the database.
func (_c *SymbolReferenceCreate) Save(ctx context.Context) (*SymbolReference, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SymbolReferenceCreate) SaveX(ctx context.Context) *SymbolReference {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SymbolReferenceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SymbolReferenceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SymbolReferenceCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := symbolreference.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SymbolReferenceCreate) check() error {
	if _, ok := _c.mutation.LineNumber(); !ok {
		return &ValidationError{Name: "line_number", err: errors.New(`ent: missing required field "SymbolReference.line_number"`)}
	}
	if v, ok := _c.mutation.LineNumber(); ok {
		if err := symbolreference.LineNumberValidator(v); err != nil {
			return &ValidationError{Name: "line_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.line_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ColumnNumber(); !ok {
		return &ValidationError{Name: "column_number", err: errors.New(`ent: missing required field "SymbolReference.column_number"`)}
	}
	if v, ok := _c.mutation.ColumnNumber(); ok {
		if err := symbolreference.ColumnNumberValidator(v); err != nil {
			return &ValidationError{Name: "column_number", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.column_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ReferenceType(); !ok {
		return &ValidationError{Name: "reference_type", err: errors.New(`ent: missing required field "SymbolReference.reference_type"`)}
	}
	if v, ok := _c.mutation.ReferenceType(); ok {
		if err := symbolreference.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "SymbolReference.reference_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SymbolReference.created_at"`)}
	}
	return nil
}

func (_c *SymbolReferenceCreate) sqlSave(ctx context.Context) (*SymbolReference, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SymbolReferenceCreate) createSpec() (*SymbolReference, *sqlgraph.CreateSpec) {
	var (
		_node = &SymbolReference{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(symbolreference.Table, sqlgraph.NewFieldSpec(symbolreference.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.LineNumber(); ok {
		_spec.SetField(symbolreference.FieldLineNumber, field.TypeInt, value)
		_node.LineNumber = value
	}
	if value, ok := _c.mutation.ColumnNumber(); ok {
		_spec.SetField(symbolreference.FieldColumnNumber, field.TypeInt, value)
		_node.ColumnNumber = value
	}
	if value, ok := _c.mutation.ReferenceType(); ok {
		_spec.SetField(symbolreference.FieldReferenceType, field.TypeEnum, value)
		_node.ReferenceType = value
	}
	if value, ok := _c.mutation.Context(); ok {
		_spec.SetField(symbolreference.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(symbolreference.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.SymbolTable,
			Columns: []string{symbolreference.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.symbol_references = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.FileTable,
			Columns: []string{symbolreference.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_symbol_references = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ContextNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   symbolreference.ContextNodeTable,
			Columns: []string{symbolreference.ContextNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(astnode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.context_node_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SymbolReferenceCreateBulk is the builder for creating many SymbolReference entities in bulk.
type SymbolReferenceCreateBulk struct {
	config
	err      error
	builders []*SymbolReferenceCreate
}

// Save creates the SymbolReference entities in the database.
func (_c *SymbolReferenceCreateBulk) Save(ctx context.Context) ([]*SymbolReference, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SymbolReference, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SymbolReferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SymbolReferenceCreateBulk) SaveX(ctx context.Context) []*SymbolReference {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SymbolReferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SymbolReferenceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
