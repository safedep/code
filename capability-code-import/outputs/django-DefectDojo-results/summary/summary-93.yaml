
django:
  django.db.migrations:
    - migrations.AddField(\n            model_name='ipscan',\n            name='scan',\n            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Scan'),\n        )
    - migrations.AddField(\n            model_name='findingimageaccesstoken',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='defect_review_requested_by',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='defect_review_requested_by', to='dojo.Dojo_User'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='duplicate_finding',\n            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='original_finding', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='duplicate_list',\n            field=models.ManyToManyField(blank=True, editable=False, related_name='_finding_duplicate_list_+', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='endpoints',\n            field=models.ManyToManyField(blank=True, to='dojo.Endpoint'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='found_by',\n            field=models.ManyToManyField(editable=False, to='dojo.Test_Type'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='images',\n            field=models.ManyToManyField(blank=True, to='dojo.FindingImage'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='last_reviewed_by',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_reviewed_by', to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='mitigated_by',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mitigated_by', to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='notes',\n            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='reporter',\n            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='reporter', to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='review_requested_by',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review_requested_by', to='dojo.Dojo_User'),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='reviewers',\n            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='finding',\n            name='test',\n            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Test'),\n        )
    - migrations.AddField(\n            model_name='engagement_presets',\n            name='network_locations',\n            field=models.ManyToManyField(blank=True, default=None, to='dojo.Network_Locations'),\n        )
    - migrations.AddField(\n            model_name='engagement_presets',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='engagement_presets',\n            name='test_type',\n            field=models.ManyToManyField(blank=True, default=None, to='dojo.Test_Type'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='build_server',\n            field=models.ForeignKey(blank=True, help_text='Build server responsible for CI/CD test', null=...
    - migrations.AddField(\n            model_name='engagement',\n            name='eng_type',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement_Type'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='lead',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='orchestration_engine',\n            field=models.ForeignKey(blank=True, help_text='Orchestration service responsible for C...
    - migrations.AddField(\n            model_name='engagement',\n            name='preset',\n            field=models.ForeignKey(blank=True, help_text='Settings and notes for performing this engagement.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement_Presets'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='report_type',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Report_Type'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='requester',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Contact'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='risk_acceptance',\n            field=models.ManyToManyField(blank=True, default=None, editable=False, to='dojo.Risk_Acceptance'),\n        )
    - migrations.AddField(\n            model_name='engagement',\n            name='source_code_management_server',\n            field=models.ForeignKey(blank=True, help_text='Source code server for CI/CD t...
    - migrations.AddField(\n            model_name='endpoint',\n            name='endpoint_params',\n            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Endpoint_Params'),\n        )
    - migrations.AddField(\n            model_name='endpoint',\n            name='product',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='dojometa',\n            name='endpoint',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='endpoint_meta', to='dojo.Endpoint'),\n        )
    - migrations.AddField(\n            model_name='dojometa',\n            name='product',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_meta', to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='cred_user',\n            name='environment',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Development_Environment'),\n        )
    - migrations.AddField(\n            model_name='cred_user',\n            name='notes',\n            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),\n        )
    - migrations.AddField(\n            model_name='cred_mapping',\n            name='cred_id',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cred_user', to='dojo.Cred_User', verbose_name='Credential'),\n        )
    - migrations.AddField(\n            model_name='cred_mapping',\n            name='engagement',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='engagement', to='dojo.Engagement'),\n        )
    - migrations.AddField(\n            model_name='cred_mapping',\n            name='finding',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='finding', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='cred_mapping',\n            name='product',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product', to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='cred_mapping',\n            name='test',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test', to='dojo.Test'),\n        )
    - migrations.AddField(\n            model_name='child_rule',\n            name='parent_rule',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Rule'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='auth_issues',\n            field=models.ManyToManyField(blank=True, related_name='auth_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='author_issues',\n            field=models.ManyToManyField(blank=True, related_name='author_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='config_issues',\n            field=models.ManyToManyField(blank=True, related_name='config_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='crypto_issues',\n            field=models.ManyToManyField(blank=True, related_name='crypto_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='data_issues',\n            field=models.ManyToManyField(blank=True, related_name='data_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='engagement',\n            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='eng_for_check', to='dojo.Engagement'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='other_issues',\n            field=models.ManyToManyField(blank=True, related_name='other_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='sensitive_issues',\n            field=models.ManyToManyField(blank=True, related_name='sensitive_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='check_list',\n            name='session_issues',\n            field=models.ManyToManyField(blank=True, related_name='session_issues', to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='burprawrequestresponse',\n            name='finding',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Finding'),\n        )
    - migrations.AddField(\n            model_name='benchmark_requirement',\n            name='cwe_mapping',\n            field=models.ManyToManyField(blank=True, to='dojo.CWE'),\n        )
    - migrations.AddField(\n            model_name='benchmark_requirement',\n            name='testing_guide',\n            field=models.ManyToManyField(blank=True, to='dojo.Testing_Guide'),\n        )
    - migrations.AddField(\n            model_name='benchmark_product_summary',\n            name='benchmark_type',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Type'),\n        )
    - migrations.AddField(\n            model_name='benchmark_product_summary',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='benchmark_product',\n            name='control',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Requirement'),\n        )
    - migrations.AddField(\n            model_name='benchmark_product',\n            name='notes',\n            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),\n        )
    - migrations.AddField(\n            model_name='benchmark_product',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='benchmark_category',\n            name='type',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Type', verbose_name='Benchmark Type'),\n        )
    - migrations.AddField(\n            model_name='app_analysis',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),\n        )
    - migrations.AddField(\n            model_name='app_analysis',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='alerts',\n            name='user_id',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AlterUniqueTogether(\n            name='languages',\n            unique_together=set([('language', 'product')]),\n        )
    - migrations.AlterUniqueTogether(\n            name='dojometa',\n            unique_together=set([('product', 'name'), ('endpoint', 'name')]),\n        )
    - migrations.AlterUniqueTogether(\n            name='benchmark_product_summary',\n            unique_together=set([('product', 'benchmark_type')]),\n        )
    - migrations.AlterUniqueTogether(\n            name='benchmark_product',\n            unique_together=set([('product', 'control')]),\n        )
    - class Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('dojo', '0006_django2_upgrade'),\n    ]\n\n    operations =...
    - migrations.swappable_dependency(settings.AUTH_USER_MODEL)
    - migrations.AddField(\n            model_name='notes',\n            name='edit_time',\n            field=models.DateTimeField(default=dojo.models.get_current_datetime, editable=False, null=True),\n        )
    - migrations.AddField(\n            model_name='notes',\n            name='edited',\n            field=models.BooleanField(default=False),\n        )
    - migrations.AddField(\n            model_name='notes',\n            name='editor',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_notes_set', to=settings.AUTH_USER_MODEL),\n        )
    - migrations.AddField(\n            model_name='notes',\n            name='private',\n            field=models.BooleanField(default=False),\n        )
    - migrations.AlterField(\n            model_name='notes',\n            name='author',\n            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='editor_notes_set', to=settings.AUTH_USER_MODEL),\n        )
    - migrations.CreateModel(\n            name='NoteHistory',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n    ...
    - migrations.AddField(\n            model_name='notes',\n            name='history',\n            field=models.ManyToManyField(blank=True, editable=False, to='dojo.NoteHistory'),\n        )
    - class Migration(migrations.Migration):\n\n    dependencies = [\n        ('dojo', '0007_note_additions'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='finding',\n...
    - migrations.AddField(\n            model_name='finding',\n            name='is_Mitigated',\n            field=models.BooleanField(default=False),\n        )
    - migrations.AlterField(\n            model_name='child_rule',\n            name='match_field',\n            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', '...
    - migrations.AlterField(\n            model_name='rule',\n            name='applied_field',\n            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'...
    - migrations.AlterField(\n            model_name='rule',\n            name='match_field',\n            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'),...
  django.forms.HiddenInput:
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
    - HiddenInput()
  django.db.models.functions.ExtractDay:
    - ExtractDay(Coalesce("mitigated", Now()) - F("date"))
  django.core.cache.backends.base.BaseCache:
    - BaseCache.__init__(self, params={})
  django.utils.timezone aliased as tz:
    - tz.now()
    - tz.now()
    - tz.now()
    - tz.now()
  django.dispatch.receiver:
    - receiver(post_save, sender=Dojo_User)
    - receiver(post_save, sender=Announcement)
    - receiver(pre_delete, sender=Cred_User)
    - receiver(post_delete, sender=Endpoint)
    - receiver(pre_save, sender=Engagement)
    - receiver(post_save, sender=Engagement)
    - receiver(pre_save, sender=Engagement)
    - receiver(post_delete, sender=Engagement)
    - receiver(pre_delete, sender=Engagement)
    - receiver(pre_delete, sender=Finding)
    - receiver(post_delete, sender=Finding)
    - receiver(pre_delete, sender=Test)
    - receiver(post_delete, sender=Test)
    - receiver(pre_delete, sender=Engagement)
    - receiver(post_delete, sender=Engagement)
    - receiver(post_save, sender=Dojo_Group)
    - receiver(post_delete, sender=Dojo_Group)
    - receiver(post_save, sender=Dojo_Group_Member)
    - receiver(post_delete, sender=Dojo_Group_Member)
    - receiver(pre_delete, sender=Notes)
    - receiver(post_save, sender=Product)
    - receiver(post_delete, sender=Product)
    - receiver(post_save, sender=Product_Type)
    - receiver(post_delete, sender=Product_Type)
    - receiver(pre_delete, sender=Risk_Acceptance)
    - receiver(signals.m2m_changed, sender=Product.tags.through)
    - receiver(signals.m2m_changed, sender=Endpoint.tags.through)
    - receiver(signals.m2m_changed, sender=Engagement.tags.through)
    - receiver(signals.m2m_changed, sender=Test.tags.through)
    - receiver(signals.m2m_changed, sender=Finding.tags.through)
    - receiver(signals.post_save, sender=Endpoint)
    - receiver(signals.post_save, sender=Engagement)
    - receiver(signals.post_save, sender=Test)
    - receiver(signals.post_save, sender=Finding)
    - receiver(post_delete, sender=Test)
    - receiver(pre_save, sender=Test)
    - receiver(pre_delete, sender=Test)
    - receiver(pre_delete, sender=Tool_Product_Settings)
    - receiver(post_save, sender=User)
    - receiver(post_save, sender=Dojo_User)
    - receiver(user_logged_in)
    - receiver(user_logged_out)
    - receiver(user_login_failed)
  django.db.models.Q:
    - Q(active=True)
    - Q(duplicate=True)
