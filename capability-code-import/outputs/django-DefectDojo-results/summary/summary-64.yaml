
django:
  django.db.models:
    - models.CharField(blank=True, max_length=200, null=True)
    - models.URLField(blank=True, max_length=400, null=True)
    - models.URLField(blank=True, max_length=400, null=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=300)
    - models.TextField()
    - models.TextField(blank=True, null=True)
    - models.BooleanField(default=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.BooleanField(default=False, help_text='Does the product meet the requirement?', verbose_name='Pass')
    - models.BooleanField(default=True, help_text='Applicable for this specific product.')
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(choices=[('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3')], default='Level 1', max_length=15)
    - models.CharField(blank=True, choices=[('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3')], default='None', max_length=15, null=True)
    - models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.')
    - models.IntegerField(default=0, help_text='ASVS Level 1 Score')
    - models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.')
    - models.IntegerField(default=0, help_text='ASVS Level 2 Score')
    - models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.')
    - models.IntegerField(default=0, help_text='ASVS Level 3 Score')
    - models.BooleanField(default=False, help_text='Publish score to Product.')
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=15, null=True)
    - models.TextField()
    - models.TextField(blank=True, null=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Category')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Category')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=300)
    - models.CharField(max_length=15)
    - models.CharField(choices=[('PCI', 'PCI'), ('OWASP ASVS', 'OWASP ASVS'), ('OWASP Mobile ASVS', 'OWASP Mobile ASVS')], default='OWASP ASVS', max_length=20, null=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.BooleanField(default=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.BinaryField()
    - models.BinaryField()
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.CharField(default='none', max_length=50)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(choices=[('Matches', 'Matches'), ('Contains', 'Contains')], max_length=30)
    - models.CharField(choices=[('Finding', 'Finding')], max_length=30)
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('...
    - models.TextField()
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=100)
    - models.EmailField(max_length=254)
    - models.CharField(max_length=100)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.DateTimeField(editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.BooleanField(default=False, verbose_name='Authentication Provider')
    - models.URLField(blank=True, max_length=2000, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=600)
    - models.CharField(max_length=200)
    - models.CharField(choices=[('Form', 'Form Authentication'), ('SSO', 'SSO Redirect')], default='Form', max_length=15)
    - models.CharField(blank=True, choices=[('Basic', 'Basic'), ('NTLM', 'NTLM')], max_length=15, null=True)
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.URLField(max_length=2000)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.BooleanField(default=True, verbose_name='Login is valid')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=1000)
    - models.CharField(max_length=2000)
    - models.IntegerField()
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=120)
    - models.CharField(max_length=300)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, help_text=b"The communication protocol such as 'http', 'ftp', etc.", max_length=10, null=True)
    - models.CharField(blank=True, help_text=b"The host name or IP address, you can also include the port number. For example'127.0.0.1', '127.0.0.1:8080', 'localhost', 'yourdomain.com'.", max_length=500, null=True)
    - models.CharField(blank=True, max_length=500, null=True)
    - models.IntegerField(blank=True, help_text='The network port associated with the endpoint.', null=True)
    - models.CharField(blank=True, help_text=b"The location of the resource, it should start with a '/'. For example/endpoint/420/edit", max_length=500, null=True)
    - models.CharField(blank=True, help_text=b"The query string, the question mark should be omitted.For example 'group=4&team=8'", max_length=1000, null=True)
    - models.CharField(blank=True, help_text=b"The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.", max_length=500, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=150)
    - models.CharField(max_length=150)
    - models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], max_length=20, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, max_length=300, null=True)
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.CharField(blank=True, help_text='Version of the product the engagement tested.', max_length=100, null=True)
    - models.DateField(blank=True, null=True)
    - models.DateField()
    - models.DateField()
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.DateTimeField(auto_now=True, null=True)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.BooleanField(default=True, editable=False)
    - models.URLField(blank=True, help_text='Link to epic or ticket system with changes to version.', null=True)
    - models.URLField(blank=True, null=True)
    - models.BooleanField(default=True)
    - models.BooleanField(default=True)
    - models.BooleanField(default=True)
    - models.BooleanField(default=True)
    - models.CharField(choices=[('Not Started', 'Not Started'), ('Blocked', 'Blocked'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Waiting for Resource', 'Waiting for Resource')], default='', max_length=2000, null=True)
    - models.CharField(default='threat_model', editable=False, max_length=100)
    - models.CharField(blank=True, default='none', editable=False, max_length=1000, null=True)
    - models.CharField(blank=True, default='none', editable=False, max_length=1000, null=True)
    - models.BooleanField(default=False, editable=False)
    - models.CharField(choices=[('Interactive', 'Interactive'), ('CI/CD', 'CI/CD')], default='Interactive', max_length=30, null=True)
    - models.CharField(blank=True, help_text='Build ID of the product the engagement tested.', max_length=150, null=True, verbose_name='Build ID')
    - models.CharField(blank=True, help_text='Commit hash from repo', max_length=150, null=True, verbose_name='Commit Hash')
    - models.CharField(blank=True, help_text='Tag or branch of the product the engagement tested.', max_length=150, null=True, verbose_name='Branch/Tag')
    - models.CharField(blank=True, help_text='Resource link to source code', max_length=600, null=True, verbose_name='Repo')
    - models.BooleanField(default=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(default=None, help_text='Brief description of preset.', max_length=500)
    - models.CharField(blank=True, help_text='Description of what needs to be tested or setting up environment for testing', max_length=2000, null=True)
    - models.CharField(blank=True, default=None, help_text=b"Scope of Engagement testing, IP's/Resources/URL's)", max_length=800)
    - models.DateTimeField(auto_now_add=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(choices=[('Append', 'Append'), ('Replace', 'Replace')], max_length=30)
    - models.CharField(max_length=200)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(max_length=1000)
    - models.DateField(default=dojo.models.get_current_date)
    - models.DateField(default=dojo.models.get_current_date)
    - models.IntegerField(blank=True, default=0, null=True)
    - models.TextField(blank=True, editable=False, null=True)
    - models.CharField(help_text='The severity level of this flaw (Critical, High, Medium, Low, Informational)', max_length=200)
    - models.TextField()
    - models.TextField()
    - models.TextField()
    - models.TextField(blank=True, null=True)
    - models.TextField(blank=True, null=True)
    - models.TextField(blank=True, db_column='refs', null=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=True)
    - models.BooleanField(default=True)
    - models.BooleanField(default=False, verbose_name='False Positive')
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.IntegerField(default=0, editable=False)
    - models.DateTimeField(blank=True, editable=False, null=True)
    - models.CharField(max_length=4)
    - models.DateTimeField(editable=False, null=True)
    - models.CharField(blank=True, editable=False, max_length=200, null=True)
    - models.TextField(blank=True, editable=False, null=True)
    - models.TextField(blank=True, editable=False, null=True)
    - models.TextField(blank=True, editable=False, null=True)
    - models.TextField(blank=True, editable=False, null=True)
    - models.TextField(blank=True, null=True)
    - models.IntegerField(blank=True, null=True, verbose_name='Line number')
    - models.CharField(blank=True, max_length=1000, null=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.IntegerField(blank=True, default=None, editable=False, help_text='Confidence level of vulnerability which is supplied by the scannner.', null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(max_length=1000)
    - models.IntegerField(blank=True, default=None, null=True)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.TextField(blank=True, null=True)
    - models.TextField(blank=True, null=True)
    - models.TextField(blank=True, null=True)
    - models.TextField(blank=True, db_column='refs', null=True)
    - models.CharField(blank=True, editable=False, max_length=4, null=True)
    - models.BooleanField(default=False, help_text='Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.', verbose_name='Template Match Enabled')
    - models.BooleanField(default=False, help_text='Matches by title text (contains search) and CWE.', verbose_name='Match Template by Title and CWE')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.ImageField(null=True, upload_to='finding_images')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=255)
    - models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('thumbnail', 'Thumbnail'), ('original', 'Original')], default='medium', max_length=9)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.FindingImage')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.FindingImage')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(default='none', editable=False)
    - models.CharField(max_length=800, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.URLField(help_text='For more information how to configure Jira, read the DefectDojo documentation.', max_length=2000, verbose_name='JIRA URL')
    - models.CharField(max_length=2000)
    - models.CharField(max_length=2000)
    - models.CharField(choices=[('Task', 'Task'), ('Story', 'Story'), ('Epic', 'Epic'), ('Spike', 'Spike'), ('Bug', 'Bug')], default='Bug', max_length=9)
    - models.IntegerField(help_text=b"To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.")
    - models.IntegerField(help_text=b"Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance")
    - models.IntegerField(help_text=b"Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance")
    - models.CharField(help_text=b"Maps to the 'Priority' field in Jira. For example: Low", max_length=200)
    - models.CharField(help_text=b"Maps to the 'Priority' field in Jira. For example: Medium", max_length=200)
    - models.CharField(help_text=b"Maps to the 'Priority' field in Jira. For example: High", max_length=200)
    - models.CharField(help_text=b"Maps to the 'Priority' field in Jira. For example: Critical", max_length=200)
    - models.TextField(blank=True, help_text='Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.', null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200, unique=True)
    - models.CharField(max_length=200)
    - models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Finding')
    - models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Finding')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, max_length=200)
    - models.CharField(blank=True, max_length=200)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.JIRA_Conf', verbose_name='JIRA Configuration')
    - models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.JIRA_Conf', verbose_name='JIRA Configuration')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=100)
    - models.CharField(max_length=7, null=True, verbose_name='HTML color')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.IntegerField(blank=True, null=True, verbose_name='Number of files')
    - models.IntegerField(blank=True, null=True, verbose_name='Number of blank lines')
    - models.IntegerField(blank=True, null=True, verbose_name='Number of comment lines')
    - models.IntegerField(blank=True, null=True, verbose_name='Number of code lines')
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Language_Type')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Language_Type')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(help_text='Location of network testing: Examples: VPN, Internet or Internal.', max_length=500)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField()
    - models.DateTimeField(default=dojo.models.get_current_datetime, editable=False)
