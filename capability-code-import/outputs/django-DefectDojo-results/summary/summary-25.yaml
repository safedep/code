
dojo:
  dojo.models.Finding:
    - def parse_status(self, finding: Finding, value: str) -> None:\n        # Possible values (best guess): unfixed (the initial value), fixed, false_positive, and acceptable_risk\n        value = value.lo...
    - def parse_components(self, finding: Finding, value: list[str]) -> None:\n        # Only use the first entry\n        finding.component_name, finding.component_version = self.parse_cpe(value[0])
    - def append_description(self, finding: Finding, addendum: dict[str, str]) -> None:\n        if addendum:\n            if finding.description:\n                finding.description += "\n\n"\n           ...
    - def parse_notes(self, finding: Finding, value: str) -> None:\n        self.append_description(finding, {"Notes": value})
    - def parse_details(self, finding: Finding, value: dict[str, str | dict[str, list[str]]]) -> None:\n        self.append_description(finding, self.extract_details(value))
    - def set_endpoints(self, finding: Finding, item: Any) -> None:\n        endpoints = self.parse_endpoints(item)\n        finding.unsaved_endpoints.extend(endpoints)
    - if (severity := cvss.CVSS4(value).severity) in Finding.SEVERITIES:\n                return severity
    - if (severity := cvss_obj[0].severities()[0].title()) in Finding.SEVERITIES:\n                return severity
    - def set_severity(self, finding: Finding, item: Any) -> None:\n        for base_score_entry, cvss_version in [\n            ("cvss_v4_base_score", 4),\n            ("cvss_v3_base_score", 3),\n         ...
    - def process_whole_item(self, finding: Finding, item: Any) -> None:\n        self.set_severity(finding, item)\n        self.set_endpoints(finding, item)
    - def get_finding_key(self, finding: Finding) -> tuple:\n        return (\n            finding.severity,\n            finding.title,\n            tuple(sorted([(e.host, e.port) for e in finding.unsaved_endpoints])),\n            self.SCANNING_ENGINE,\n        )
    - def parse_finding(self, item: dict[str, Any]) -> tuple[Finding, tuple]:\n        finding = Finding()\n        for field, field_handler in self.get_engine_fields().items():\n            # Check first w...
    - Finding()
    - Finding(\n                    title=title,\n                    test=test,\n                    description=html2text.html2text(description),\n                    severity=severity,\n                 ...
    - Finding(\n        title=vulnerability_id\n        + " - "\n        + resource_name\n        + " ("\n        + resource_version\n        + ") ",\n        test=test,\n        severity=severity,\n       ...
    - Finding(\n        title=str(vulnerability_id) + ": " + str(file_path),\n        description=description,\n        url=url,\n        cwe=0,\n        test=test,\n        severity=severity,\n        impact=severity,\n        mitigation=mitigation,\n    )
    - Finding(\n        title=vulnerability_id\n        + " - "\n        + resource_name\n        + " ("\n        + resource_path\n        + ") ",\n        test=test,\n        severity="Info",\n        description=description.strip(),\n        component_name=resource.get("name"),\n    )
    - Finding(\n            title=item_node["name"],\n            date=report_date,\n            severity=severity,\n            description=description,\n            mitigation=remediation,\n            re...
    - Finding(\n                title=item.get("Title"),\n                description=full_description,\n                date=dateutil.parser.parse(item.get("CreatedAt")),\n                mitigation=mitiga...
    - Finding(\n                        title=title,\n                        test=test,\n                        cwe=cwe,\n                        cvssv3=cvss_vector,\n                        cvssv3_score=...
    - def get_base_finding(self, raw_finding: dict) -> Finding:\n        # basic fields\n        finding_id = raw_finding.get("findingArn")\n        title = raw_finding.get("title", "The title could not be ...
    - Finding(\n            title=title,\n            test=self.test,\n            description=description,\n            severity=self.get_severity(raw_finding.get("severity", "Info")),\n            unique_...
    - def get_package_vulnerability(self, finding: Finding, raw_finding: dict) -> Finding:\n        vulnerability_details = raw_finding.get("packageVulnerabilityDetails", {})\n        vulnerability_packages...
    - def get_package_vulnerability(self, finding: Finding, raw_finding: dict) -> Finding:\n        vulnerability_details = raw_finding.get("packageVulnerabilityDetails", {})\n        vulnerability_packages...
    - def get_code_vulnerability(self, finding: Finding, raw_finding: dict) -> Finding:\n        cwes = raw_finding.get("cwes", [])\n        detector_id = raw_finding.get("detectorId", "N/A")\n        detec...
    - def get_code_vulnerability(self, finding: Finding, raw_finding: dict) -> Finding:\n        cwes = raw_finding.get("cwes", [])\n        detector_id = raw_finding.get("detectorId", "N/A")\n        detec...
    - def get_network_reachability(self, finding: Finding, raw_finding: dict) -> Finding:\n        network_path_info = raw_finding.get("networkPath", {})\n        network_path_steps = network_path_info.get(...
    - def get_network_reachability(self, finding: Finding, raw_finding: dict) -> Finding:\n        network_path_info = raw_finding.get("networkPath", {})\n        network_path_steps = network_path_info.get(...
    - def process_endpoints(self, finding: Finding, raw_finding: dict) -> Finding:\n        impact = []\n        endpoints = []\n        for resource_info in raw_finding.get("resources", {}):\n            r...
    - def process_endpoints(self, finding: Finding, raw_finding: dict) -> Finding:\n        impact = []\n        endpoints = []\n        for resource_info in raw_finding.get("resources", {}):\n            r...
    - Finding(\n                    active=active,\n                    title=textwrap.shorten(result_extended, 150),\n                    cwe=1032,  # Security Configuration Weaknesses, would like to fine ...
    - Finding(\n                    title=textwrap.shorten(result_extended, 150),\n                    cwe=1032,  # Security Configuration Weaknesses, would like to fine tune\n                    test=test,...
    - Finding(\n                    title=textwrap.shorten(result_extended, 150),\n                    cwe=1032,  # Security Configuration Weaknesses, would like to fine tune\n                    test=test,...
    - Finding(\n                    title=textwrap.shorten(result_extended, 150),\n                    cwe=1032,  # Security Configuration Weaknesses, would like to fine tune\n                    test=test,...
    - Finding(\n            title=f"{title}{title_suffix}",\n            test=test,\n            description=description,\n            mitigation=mitigation,\n            references="\n".join(references),\n...
    - Finding(\n            title=f"{title}{title_suffix}",\n            test=test,\n            description=description,\n            mitigation=mitigation,\n            references="\n".join(references),\n...
    - Finding(\n            title=f"{title}{title_suffix}",\n            test=test,\n            description=description,\n            mitigation=mitigation,\n            references="\n".join(references),\n...
    - Finding(\n                        title=title,\n                        cwe=1032,  # Security Configuration Weaknesses\n                        test=test,\n                        description=descript...
    - Finding(\n                title=item["issue_text"],\n                test=test,\n                description=findingdetail,\n                severity=item["issue_severity"].title(),\n                f...
    - Finding(\n                    title=bearerfinding["title"] + " in " + bearerfinding["filename"] + ":" + str(bearerfinding["line_number"]),\n                    test=test,\n                    descript...
    - Finding(\n                    title=title,\n                    cwe=int(cwe),\n                    test=test,\n                    description=description,\n                    severity=severity,\n   ...
    - Finding(\n                    title=title,\n                    test=test,\n                    cvssv3_score=cvss_score,\n                    severity=severity,\n                    description=descri...
    - Finding(\n                    title=title,\n                    test=test,\n                    description=description,\n                    severity=severity,\n                    mitigation=mitigat...
    - Finding(\n                    title=title,\n                    test=test,\n                    description=description,\n                    severity=severity,\n                    mitigation=mitigat...
    - Finding(\n                title=title,\n                test=test,\n                description=description,\n                severity=severity,\n                mitigation=mitigation,\n              ...
    - Finding(\n                    title=title,\n                    test=test,\n                    description=findingdetail,\n                    severity=sev,\n                    impact=impact,\n     ...
    - Finding(test=test)
    - Finding(\n                    title=title,\n                    test=test,\n                    description=findingdetail,\n                    severity=sev,\n                    mitigation=mitigation...
    - Finding(\n        title=item_node.findall("name")[0].text,\n        url=url,\n        test=test,\n        severity=severity,\n        param=parameter,\n        scanner_confidence=scanner_confidence,\n...
    - Finding(\n                    title=title,\n                    severity=severity,\n                    description=description_formated,\n                    mitigation="No mitigation provided",\n   ...
    - Finding(\n                            title=title,\n                            url=name,\n                            test=test,\n                            severity=severity,\n                     ...
    - Finding(\n                test=test,\n                false_p=False,\n                duplicate=False,\n                out_of_scope=False,\n                mitigated=None,\n                static_finding=False,\n                dynamic_finding=True,\n                **finding_dict,\n            )
    - Finding(\n                title=issue.get("Title"),\n                description=issue.get("Description"),\n                test=test,\n                severity=issue.get("Severity"),\n               ...
    - Finding(\n                        title=title,\n                        test=test,\n                        severity=severity,\n                        tags=tags,\n                        description=...
    - Finding(\n                title=title,\n                cwe=int(cwe),\n                test=test,\n                # active, verified and false_p may be overwritten later by\n                # another...
    - Finding(\n                title=title,\n                cwe=int(cwe),\n                test=test,\n                active=self.isActive(state),\n                verified=self.isVerified(state),\n     ...
    - Finding(\n                                description=descriptiondetails,\n                                title=title,\n                                date=self._parse_date(\n                       ...
    - Finding(\n                            title=f"{component_name}:{component_version} | {cve}",\n                            description=vulnerability.get("description"),\n                            dat...
    - Finding(\n                            title=f'{name} | {vulnerability.get("issueType")}',\n                            description=vulnerability.get("description"),\n                            date=s...
    - Finding(\n                        title=vulnerability.replace("_", " ") + " " + detail.sink.file.split("/")[\n                            -1] if detail.sink is not None else "",\n                     ...
    - def parse_vulnerabilities_from_scan_list(\n        self,\n        test: Test,\n        data: dict,\n    ) -> list[Finding]:\n        findings = []\n        cwe_store = data.get("vulnerabilityDetails",...
    - def parse_iac_vulnerabilities(\n        self,\n        test: Test,\n        results: list,\n        cwe_store: list,\n    ) -> list[Finding]:\n        findings = []\n        for technology in results:...
    - Finding(\n                        severity=instance.get("severity").title(),\n                        date=date,\n                        file_path=instance.get("fileName"),\n                        m...
    - def parse_sca_vulnerabilities(\n        self,\n        test: Test,\n        results: list,\n        cwe_store: list,\n    ) -> list[Finding]:\n        # Not implemented yet\n        return []
    - def parse_sast_vulnerabilities(\n        self,\n        test: Test,\n        results: list,\n        cwe_store: list,\n    ) -> list[Finding]:\n        def get_cwe_store_entry(cwe_store: list, cwe: in...
    - Finding(\n                    severity=instance.get("severity").title(),\n                    date=date,\n                    file_path=instance.get("destinationFileName"),\n                    line=i...
    - def parse_vulnerabilities(\n        self,\n        test: Test,\n        results: list,\n    ) -> list[Finding]:\n        findings = []\n        for result in results:\n            id = result.get("ide...
    - Finding(\n                unique_id_from_tool=id,\n                file_path=locations_uri,\n                line=locations_startLine,\n                title=id + "_" + locations_uri,\n               ...
    - def parse_results(\n        self,\n        test: Test,\n        results: list,\n    ) -> list[Finding]:\n        findings = []\n        for vulnerability in results:\n            result_type = vulnera...
    - def get_results_sast(\n        self,\n        test: Test,\n        vulnerability: dict,\n    ) -> Finding:\n        description = vulnerability.get("description")\n        file_path = vulnerability.ge...
    - Finding(\n            description=description,\n            title=description,\n            file_path=file_path,\n            severity=vulnerability.get("severity").title(),\n            test=test,\n            static_finding=True,\n            unique_id_from_tool=unique_id_from_tool,\n        )
    - def get_results_kics(\n        self,\n        test: Test,\n        vulnerability: dict,\n    ) -> Finding:\n        description = vulnerability.get("description")\n        file_path = vulnerability.ge...
    - Finding(\n            title=description,\n            description=description,\n            severity=vulnerability.get("severity").title(),\n            verified=vulnerability.get("state") != "TO_VERI...
    - def get_results_sca(\n        self,\n        test: Test,\n        vulnerability: dict,\n    ) -> Finding:\n        description = vulnerability.get("description")\n        unique_id_from_tool = vulnera...
    - Finding(\n            title=description,\n            description=description,\n            severity=vulnerability.get("severity").title(),\n            verified=vulnerability.get("state") != "TO_VERI...
    - Finding(\n                title="{} {} | {}".format(\n                    library["name"], library["version"], vulnerability_id,\n                ),\n                severity=item["severity"]["name"],...
    - Finding(\n        title=title,\n        test=test,\n        description=description,\n        severity=severity,\n        mitigation=mitigation,\n        references=references,\n        file_path=file...
    - Finding(\n                        title=json_object.get("title"),\n                        description=description,\n                        severity=self.convert_score(json_object.get("impact")),\n                        active=True,\n                    )
    - Finding(\n            title=item_node["vulnerability"]\n            + " - "\n            + "("\n            + item_node["featurename"]\n            + ", "\n            + item_node["featureversion"]\n ...
    - Finding(\n            title=item_node["Name"]\n            + " - "\n            + "("\n            + item_node["FeatureName"]\n            + ", "\n            + item_node["FeatureVersion"]\n          ...
    - Finding(\n                title=title,\n                test=test,\n                description=description,\n                component_name=item["resource"],\n                severity=severity,\n    ...
    - Finding(test=test)
    - Finding(\n        title=title,\n        description=description,\n        severity=severity,\n        unique_id_from_tool=unique_id_from_tool,\n        file_path=file_path,\n        line=line,\n      ...
    - Finding(\n                title=title.split(" from")[0],\n                date=date_raw,\n                cwe=cwe,\n                test=test,\n                description=description,\n              ...
    - Finding()
    - Finding(\n                test=test,\n                title=checker_properties.get("subcategoryShortDescription"),\n                severity=self.SEVERITY_MAPPING[checker_properties.get("impact")],\n ...
    - Finding(\n            title=description["title"],\n            description=finding["information"],\n            test=test,\n            severity=severity,\n            mitigation=description["how_to_f...
    - Finding(\n            title=cve_finding["cve_id"],\n            description=cve_finding["information"],\n            test=test,\n            severity=severity,\n            references=references,\n   ...
    - Finding(\n                title=title,\n                description=description,\n                test=test,\n                severity=severity,\n                mitigation="No mitigation provided",\n...
    - Finding(\n                title=row["Searcher"],\n                description=description,\n                severity="Info",\n                nb_occurences=1,\n                file_path=row["Source"],\n                line=row["Line"],\n            )
    - Finding(\n            unique_id_from_tool=fingerprint,\n            title=title,\n            test=test,\n            severity=severity,\n            description="**fingerprint**: " + str(fingerprint)...
    - Finding(\n                    title=f"{component_name}:{component_version} | {vulnerability.get('id')}",\n                    test=test,\n                    description=description,\n                ...
    - Finding(\n            title=f"{component_name}:{component_version} | {vuln_id}",\n            description=description,\n            severity=severity,\n            references=references,\n            ...
    - Finding(\n                title=f"{component_name}:{component_version} | {vuln_id}",\n                description=description,\n                severity=severity,\n                mitigation=vulnerabi...
    - Finding(\n                title=item["name"],\n                test=test,\n                description=findingdetail,\n                severity=item["severity"].capitalize(),\n                mitigati...
    - Finding(\n            title="Threatmapper_Compliance_Report-" + test_number,\n            description=description,\n            severity=self.compliance_severity(status),\n            static_finding=False,\n            dynamic_finding=True,\n            test=test,\n        )
    - Finding(\n            title=Rule_Name,\n            description=description,\n            file_path=File_Name,\n            severity=self.severity(Severity),\n            static_finding=False,\n            dynamic_finding=True,\n            test=test,\n        )
