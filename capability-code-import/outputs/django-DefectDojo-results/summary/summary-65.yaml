
django:
  django.db.models:
    - models.DateTimeField(default=dojo.models.get_current_datetime, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, max_length=100, null=True)
    - models.CharField(blank=True, max_length=600, null=True, verbose_name='Full file path')
    - models.CharField(blank=True, max_length=400, null=True, verbose_name='Folder')
    - models.CharField(blank=True, max_length=400, null=True, verbose_name='Artifact')
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=150, null=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.URLField(blank=True, max_length=400, null=True)
    - models.CharField(max_length=30, null=True)
    - models.CharField(max_length=10, null=True)
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Objects')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Objects')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=100, null=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=255, unique=True)
    - models.CharField(max_length=4000)
    - models.CharField(blank=True, default=0, max_length=200, null=True)
    - models.CharField(blank=True, default=0, max_length=200, null=True)
    - models.CharField(blank=True, default=0, max_length=200, null=True)
    - models.DateTimeField(blank=True, editable=False, null=True)
    - models.DateTimeField(blank=True, editable=False, null=True)
    - models.IntegerField(default=0, editable=False)
    - models.IntegerField(blank=True, null=True)
    - models.CharField(blank=True, choices=[('very high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('very low', 'Very Low'), ('none', 'None')], max_length=9, null=True)
    - models.CharField(blank=True, choices=[('web service', 'API'), ('desktop', 'Desktop'), ('iot', 'Internet of Things'), ('mobile', 'Mobile'), ('we', 'We')], max_length=11, null=True)
    - models.CharField(blank=True, choices=[('construction', 'Construction'), ('production', 'Production'), ('retirement', 'Retirement')], max_length=12, null=True)
    - models.CharField(blank=True, choices=[('third party library', 'Third Party Library'), ('purchased', 'Purchased'), ('contractor', 'Contractor Developed'), ('internal', 'Internally Developed'), ('open source', 'Open Source'), ('outsourced', 'Outsourced')], max_length=19, null=True)
    - models.PositiveIntegerField(blank=True, help_text='Estimate the number of user records within the application.', null=True)
    - models.DecimalField(blank=True, decimal_places=2, help_text=b"Estimate the application's revenue.", max_digits=15, null=True)
    - models.BooleanField(default=False, help_text='Specify if the application is used by people outside the organization.')
    - models.BooleanField(default=False, help_text='Specify if the application is accessible from the public internet.')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=300)
    - models.CharField(max_length=2000)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=255, unique=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.DateTimeField(auto_now=True, null=True)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(help_text='The name of the legislation.', max_length=128)
    - models.CharField(help_text='A shortened representation of the name.', max_length=20, unique=True)
    - models.CharField(choices=[('privacy', 'Privacy'), ('finance', 'Finance'), ('education', 'Education'), ('medical', 'Medical'), ('other', 'Other')], help_text='The subject of the regulation.', max_length=9)
    - models.CharField(help_text='The territory over which the regulation applies.', max_length=64)
    - models.TextField(blank=True, help_text=b"Information about the regulation's purpose.")
    - models.URLField(blank=True, help_text='An external URL for more information.')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(default='Finding', max_length=100)
    - models.CharField(default='AsciiDoc', max_length=15)
    - models.CharField(max_length=50)
    - models.FileField(null=True, upload_to='reports/%Y/%m/%d', verbose_name='Report File')
    - models.CharField(default='requested', max_length=10)
    - models.TextField()
    - models.DateTimeField(auto_now_add=True)
    - models.DateTimeField(null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=255)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.FileField(editable=False, upload_to='risk/%Y/%m/%d', verbose_name='Risk Acceptance File')
    - models.DateTimeField(blank=True, default=None, null=True)
    - models.CharField(blank=True, default=None, help_text='The entity or person that accepts the risk.', max_length=200, null=True, verbose_name='Accepted By')
    - models.TextField(blank=True, default=None, help_text='If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).', null=True)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.ManyToManyField(to='dojo.Finding')
    - models.ManyToManyField(editable=False, to='dojo.Notes')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.BooleanField(default=True)
    - models.TextField()
    - models.CharField(choices=[('Matches', 'Matches'), ('Contains', 'Contains')], max_length=30)
    - models.CharField(choices=[('Finding', 'Finding')], max_length=30)
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('...
    - models.TextField()
    - models.CharField(choices=[('Append', 'Append'), ('Replace', 'Replace')], max_length=200)
    - models.CharField(choices=[('Finding', 'Finding')], max_length=30)
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('...
    - models.ManyToManyField(editable=False, related_name='_rule_child_rules_+', to='dojo.Rule')
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Rule')
    - models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Rule')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)
    - models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)
    - models.CharField(default='TCP', max_length=10)
    - models.CharField(default='Pending', editable=False, max_length=10)
    - models.BooleanField(default=False, verbose_name='Current Baseline')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(default='none')
    - models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)
    - models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)
    - models.CharField(blank=True, max_length=10000, null=True)
    - models.CharField(max_length=512)
    - models.CharField(default='TCP', max_length=10)
    - models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')
    - models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(max_length=1000)
    - models.DateField(default=dojo.models.get_current_date)
    - models.DateField(default=dojo.models.get_current_date)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.TextField(blank=True, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.BooleanField(default=False, help_text='With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE ...
    - models.BooleanField(default=False)
    - models.IntegerField(blank=True, help_text='When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted.', null=True, verbose_name='Max Duplicates')
    - models.BooleanField(default=False, verbose_name='Enable JIRA integration')
    - models.BooleanField(default=False, verbose_name='Enable JIRA web hook. Please note: It is strongly recommended to whitelist the Jira server using a proxy such as Nginx.')
    - models.CharField(blank=True, choices=[('Critical', 'Critical'), ('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='None', max_length=20, null=True)
    - models.CharField(blank=True, help_text='JIRA issue labels space seperated', max_length=200, null=True)
    - models.BooleanField(default=False, verbose_name='Enable Slack notifications')
    - models.CharField(blank=True, default='', max_length=100)
    - models.CharField(blank=True, default='', help_text='Token required for interacting with Slack. Get one at https://api.slack.com/tokens', max_length=100)
    - models.CharField(blank=True, default='', max_length=100)
    - models.BooleanField(default=False, verbose_name='Enable HipChat notifications')
    - models.CharField(blank=True, default='', help_text='The full fqdn of your hipchat site, e.g. "yoursite.hipchat.com"', max_length=100)
    - models.CharField(blank=True, default='', max_length=100)
    - models.CharField(blank=True, default='', help_text='Token required for interacting with HipChat. Get one at https://patriktest.hipchat.com/addons/', max_length=100)
    - models.BooleanField(default=False)
    - models.CharField(blank=True, default='from@example.com', max_length=200)
    - models.CharField(blank=True, default='', max_length=200)
    - models.BooleanField(default=False, help_text='With this setting turned on, Dojo will display S0, S1, S2, etc in most places, whereas if turned off Critical, High, Medium, etc will be displayed.')
    - models.BooleanField(default=False, help_text='DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive.')
    - models.CharField(blank=True, default='', help_text=b"URL prefix if DefectDojo is installed in it's own virtual subdirectory.", max_length=300)
    - models.CharField(blank=True, default='', max_length=100)
    - models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', ...
    - models.BooleanField(default=False, help_text='Displays the full endpoint URI in the endpoint view.', verbose_name='Display Endpoint Full URI')
    - models.BooleanField(default=False, help_text='Displays a grade letter next to a product to show the overall health.', verbose_name='Enable Product Grading')
    - models.CharField(blank=True, max_length=800)
    - models.IntegerField(default=90, help_text=b"Percentage score for an 'A' >=", verbose_name='Grade A')
    - models.IntegerField(default=80, help_text=b"Percentage score for a '' >=", verbose_name='Grade ')
    - models.IntegerField(default=70, help_text=b"Percentage score for a 'C' >=", verbose_name='Grade C')
    - models.IntegerField(default=60, help_text=b"Percentage score for a 'D' >=", verbose_name='Grade D')
    - models.IntegerField(default=59, help_text=b"Percentage score for an 'F' <=", verbose_name='Grade F')
    - models.BooleanField(default=True, help_text='Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)', verbose_name='Enable Benchmarks')
    - models.BooleanField(default=False, help_text='Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for ...
    - models.BooleanField(default=False, help_text='Closes an engagement after 3 days (default) past due date including last update.', verbose_name='Enable Engagement Auto-Close')
    - models.IntegerField(default=3, help_text='Closes an engagement after the specified number of days past due date including last update.', verbose_name='Engagement Auto-Close Days')
    - models.BooleanField(default=True, help_text=b"Enables Finding SLA's for time to remediate.", verbose_name=b"Enable Finding SLA's")
    - models.IntegerField(default=7, help_text='# of days to remediate a critical finding.', verbose_name='Critical Finding SLA Days')
    - models.IntegerField(default=30, help_text='# of days to remediate a high finding.', verbose_name='High Finding SLA Days')
    - models.IntegerField(default=90, help_text='# of days to remediate a medium finding.', verbose_name='Medium Finding SLA Days')
    - models.IntegerField(default=120, help_text='# of days to remediate a low finding.', verbose_name='Low Finding SLA Days')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.TextField(blank=True, null=True)
    - models.DateTimeField()
    - models.DateTimeField()
    - models.TimeField(blank=True, editable=False, null=True)
    - models.TimeField(blank=True, editable=False, null=True)
    - models.IntegerField(blank=True, null=True)
    - models.DateTimeField(auto_now=True, null=True)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')
    - models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Development_Environment')
    - models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Development_Environment')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200, unique=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, help_text='Test Unique Identifier', max_length=20, null=True)
    - models.CharField(help_text='Name of the test', max_length=400)
    - models.CharField(help_text='Summary of the test', max_length=800)
    - models.CharField(help_text='Objective of the test', max_length=800)
    - models.TextField(default=None, help_text='How to test the objective')
    - models.CharField(help_text='What the results look like for a test', max_length=800)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=300)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.CharField(max_length=2000, null=True)
    - models.CharField(blank=True, choices=[('API', 'API Key'), ('Password', 'Username/Password'), ('SSH', 'SSH')], max_length=15, null=True)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.CharField(blank=True, max_length=600, null=True)
    - models.CharField(blank=True, max_length=200, null=True, verbose_name='Title for SSH/API Key')
    - models.CharField(blank=True, max_length=6000, null=True)
    - models.CharField(blank=True, max_length=600, null=True, verbose_name='API Key')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.DateTimeField(default=django.utils.timezone.now, editable=False)
    - models.BooleanField(default=True, verbose_name='Succesfully')
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.CharField(blank=True, max_length=2000, null=True)
    - models.CharField(blank=True, max_length=200, null=True)
    - models.ManyToManyField(blank=True, editable=False, to='dojo.Notes')
    - models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')
    - models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_configuration', to='dojo.Tool_Configuration')
    - models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_configuration', to='dojo.Tool_Configuration')
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(max_length=200)
    - models.CharField(max_length=2000, null=True)
    - models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')
    - models.CharField(blank=True, max_length=150, null=True)
    - models.CharField(blank=True, help_text=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message=b...
    - models.CharField(blank=True, help_text=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message=b...
    - models.CharField(blank=True, max_length=150, null=True)
    - models.CharField(blank=True, max_length=150, null=True)
    - models.CharField(blank=True, help_text='Email address associated with your slack account', max_length=150, null=True, verbose_name='Slack Email Address')
    - models.CharField(blank=True, max_length=25, null=True)
    - models.CharField(blank=True, max_length=150, null=True)
