
django_filters:
  django_filters.ModelMultipleChoiceFilter:
    - ModelMultipleChoiceFilter(\n        field_name="test__engagement__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Engagement without tags",\n        queryset=Engagem...
    - ModelMultipleChoiceFilter(\n        field_name="test__engagement__product__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Product without tags",\n        queryset=P...
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        exclude=True,\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"),\n        # label='tags', # doesn't work with tagulous, need to set in __init__ below\n    )
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        exclude=True,\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"),\n        # label='tags', # doesn't work with tagulous, need to set in __init__ below\n    )
    - ModelMultipleChoiceFilter(\n        queryset=Product_Type.objects.none(),\n        label="Product Type")
    - ModelMultipleChoiceFilter(\n        queryset=Engagement.objects.none(),\n        label="Engagement")
    - ModelMultipleChoiceFilter(\n        field_name="endpoint__tags__name",\n        to_field_name="name",\n        label="Endpoint tags",\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__tags__name",\n        to_field_name="name",\n        label="Finding tags",\n        queryset=Finding.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__tags__name",\n        to_field_name="name",\n        label="Test tags",\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__engagement__tags__name",\n        to_field_name="name",\n        label="Engagement tags",\n        queryset=Engagement.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__engagement__product__tags__name",\n        to_field_name="name",\n        label="Product tags",\n        queryset=Product.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="endpoint__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Endpoint without tags",\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Finding without tags",\n        queryset=Finding.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Test without tags",\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__engagement__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Engagement without tags",\n        queryset=Engagement.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="finding__test__engagement__product__tags__name",\n        to_field_name="name",\n        exclude=True,\n        label="Product without tags",\n        queryset=Product.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        queryset=Product.objects.none(),\n        label="Product")
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        label="Endpoint Tags",\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__tags__name",\n        to_field_name="name",\n        label="Finding Tags",\n        queryset=Finding.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__tags__name",\n        to_field_name="name",\n        label="Test Tags",\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__engagement__tags__name",\n        to_field_name="name",\n        label="Engagement Tags",\n        queryset=Engagement.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__engagement__product__tags__name",\n        to_field_name="name",\n        label="Product Tags",\n        queryset=Product.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        label="Not Endpoint Tags",\n        exclude=True,\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__tags__name",\n        to_field_name="name",\n        label="Not Finding Tags",\n        exclude=True,\n        queryset=Finding.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__tags__name",\n        to_field_name="name",\n        label="Not Test Tags",\n        exclude=True,\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__engagement__tags__name",\n        to_field_name="name",\n        label="Not Engagement Tags",\n        exclude=True,\n        queryset=Engagement.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="findings__test__engagement__product__tags__name",\n        to_field_name="name",\n        label="Not Product Tags",\n        exclude=True,\n        queryset=Product.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        exclude=True,\n        queryset=Test.tags.tag_model.objects.all().order_by("name"))
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"),\n        # label='tags', # doesn't work with tagulous, need to set in __init__ below\n    )
    - ModelMultipleChoiceFilter(\n        field_name="tags__name",\n        to_field_name="name",\n        exclude=True,\n        queryset=Endpoint.tags.tag_model.objects.all().order_by("name"),\n        # label='tags', # doesn't work with tagulous, need to set in __init__ below\n    )
    - ModelMultipleChoiceFilter(\n        queryset=Product.objects.none(), label="Product")
    - ModelMultipleChoiceFilter(\n        queryset=Product_Type.objects.none(),\n        label="Product Type")
    - ModelMultipleChoiceFilter(queryset=Engagement.objects.none(), label="Engagement")
    - ModelMultipleChoiceFilter(queryset=Dojo_User.objects.none())
  django_filters.DateFilter:
    - DateFilter(field_name="date", lookup_expr="exact")
    - DateFilter(field_name="date", lookup_expr="lt")
    - DateFilter(field_name="date", lookup_expr="gt")
    - DateFilter(field_name="date", lookup_expr="exact", label="Discovered On")
    - DateFilter(field_name="date", lookup_expr="lt", label="Discovered Before")
    - DateFilter(field_name="date", lookup_expr="gt", label="Discovered After")
    - DateFilter(field_name="date", label="Start Date", lookup_expr=("gt"))
    - DateFilter(field_name="date", label="End Date", lookup_expr=("lt"))
    - DateFilter(field_name="date", label="Start Date", lookup_expr=("gt"))
    - DateFilter(field_name="date", label="End Date", lookup_expr=("lt"))
    - DateFilter(field_name="date", label="Start Date", lookup_expr=("gt"))
    - DateFilter(field_name="date", label="End Date", lookup_expr=("lt"))
  django_filters.DateTimeFilter:
    - DateTimeFilter(field_name="mitigated", lookup_expr="exact", method="filter_mitigated_on")
    - DateTimeFilter(field_name="mitigated", lookup_expr="lt")
    - DateTimeFilter(field_name="mitigated", lookup_expr="gt", label="Mitigated After", method="filter_mitigated_after")
    - DateTimeFilter(field_name="mitigated", lookup_expr="exact", label="Mitigated On", method="filter_mitigated_on")
    - DateTimeFilter(field_name="mitigated", lookup_expr="lt", label="Mitigated Before")
    - DateTimeFilter(field_name="mitigated", lookup_expr="gt", label="Mitigated After", method="filter_mitigated_after")
  django_filters.rest_framework aliased as filters:
    - class NumberInFilter(filters.BaseInFilter, filters.NumberFilter):\n    pass
    - class NumberInFilter(filters.BaseInFilter, filters.NumberFilter):\n    pass
    - class CharFieldInFilter(filters.BaseInFilter, filters.CharFilter):\n    def __init__(self, *args, **kwargs):\n        super(CharFilter, self).__init__(*args, **kwargs)
    - class CharFieldInFilter(filters.BaseInFilter, filters.CharFilter):\n    def __init__(self, *args, **kwargs):\n        super(CharFilter, self).__init__(*args, **kwargs)
    - tags_filter = self.filters["tags"]
  django_filters.NumberFilter:
    - class NumberInFilter(filters.BaseInFilter, filters.NumberFilter):\n    pass
    - NumberFilter()
    - class PercentageFilter(NumberFilter):\n    def __init__(self, *args, **kwargs):\n        kwargs["method"] = self.filter_percentage\n        super().__init__(*args, **kwargs)\n\n    def filter_percenta...
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter()
    - NumberFilter(widget=HiddenInput())
    - NumberFilter()
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
    - NumberFilter(widget=HiddenInput())
  django_filters.CharFilter:
    - class CharFieldInFilter(filters.BaseInFilter, filters.CharFilter):\n    def __init__(self, *args, **kwargs):\n        super(CharFilter, self).__init__(*args, **kwargs)
    - super(CharFilter, self)
    - CharFilter(\n        field_name="tags__name",\n        lookup_expr="icontains",\n        label="Tag name contains",\n        help_text="Search for tags on a Finding that contain a given pattern")
    - CharFilter(\n        label="Finding Tag Contains",\n        field_name="tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Finding that contain a given pattern")
    - CharFilter(\n        label="Finding Tag",\n        field_name="tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Finding that are an exact match")
    - CharFilter(\n        label="Test Tag Contains",\n        field_name="test__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Finding that contain a given pattern")
    - CharFilter(\n        label="Test Tag",\n        field_name="test__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Finding that are an exact match")
    - CharFilter(\n        label="Engagement Tag Contains",\n        field_name="test__engagement__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Finding that contain a given pattern")
    - CharFilter(\n        label="Engagement Tag",\n        field_name="test__engagement__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Finding that are an exact match")
    - CharFilter(\n        label="Product Tag Contains",\n        field_name="test__engagement__product__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Finding that contain a given pattern")
    - CharFilter(\n        label="Product Tag",\n        field_name="test__engagement__product__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Finding that are an exact match")
    - CharFilter(\n        label="Finding Tag Does Not Contain",\n        field_name="tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Finding that contain a given pattern, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Not Finding Tag",\n        field_name="tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Finding that are an exact match, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Test Tag Does Not Contain",\n        field_name="test__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Test that contain a given pattern, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Not Test Tag",\n        field_name="test__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Test that are an exact match, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Engagement Tag Does Not Contain",\n        field_name="test__engagement__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Engagement that contain a given pattern, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Not Engagement Tag",\n        field_name="test__engagement__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Engagement that are an exact match, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Product Tag Does Not Contain",\n        field_name="test__engagement__product__tags__name",\n        lookup_expr="icontains",\n        help_text="Search for tags on a Product that contain a given pattern, and exclude them",\n        exclude=True)
    - CharFilter(\n        label="Not Product Tag",\n        field_name="test__engagement__product__tags__name",\n        lookup_expr="iexact",\n        help_text="Search for tags on a Product that are an exact match, and exclude them",\n        exclude=True)
    - CharFilter(lookup_expr="icontains", label="Module Name")
    - CharFilter(lookup_expr="icontains", label="Module Version")
    - CharFilter(\n        field_name="test__engagement__product__prod_type__name",\n        lookup_expr="iexact",\n        label="Product Type Name",\n        help_text="Search for Product Type names that are an exact match")
    - CharFilter(\n        field_name="test__engagement__product__prod_type__name",\n        lookup_expr="icontains",\n        label="Product Type Name Contains",\n        help_text="Search for Product Type names that contain a given pattern")
    - CharFilter(\n        field_name="test__engagement__product__name",\n        lookup_expr="iexact",\n        label="Product Name",\n        help_text="Search for Product names that are an exact match")
    - CharFilter(\n        field_name="test__engagement__product__name",\n        lookup_expr="icontains",\n        label="Product Name Contains",\n        help_text="Search for Product names that contain a given pattern")
    - CharFilter(lookup_expr="icontains", label="Engagement name contains")
    - CharFilter(field_name="version", lookup_expr="icontains", label="Engagement version")
    - CharFilter(field_name="test__version", lookup_expr="icontains", label="Test version")
    - CharFilter(lookup_expr="icontains", label="Product name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Not tag name contains", exclude=True)
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="iexact",\n        label="Lead Username",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="icontains",\n        label="Lead Username Contains",\n        help_text="Search for Lead username that contain a given pattern")
    - CharFilter(\n        field_name="product__prod_type__name",\n        lookup_expr="iexact",\n        label="Product Type Name",\n        help_text="Search for Product Type names that are an exact match")
    - CharFilter(\n        field_name="product__prod_type__name",\n        lookup_expr="icontains",\n        label="Product Type Name Contains",\n        help_text="Search for Product Type names that contain a given pattern")
    - CharFilter(lookup_expr="icontains", label="Product name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Not tag name contains", exclude=True)
    - CharFilter(lookup_expr="icontains", label="Engagement name contains")
    - CharFilter(field_name="engagement__version", lookup_expr="icontains", label="Engagement version")
    - CharFilter(field_name="engagement__test__version", lookup_expr="icontains", label="Test version")
    - CharFilter(field_name="name", lookup_expr="icontains", label="Engagement name contains")
    - CharFilter(field_name="version", lookup_expr="icontains", label="Engagement version")
    - CharFilter(field_name="test__version", lookup_expr="icontains", label="Test version")
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="iexact",\n        label="Lead Username",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="engagement__lead__username",\n        lookup_expr="iexact",\n        label="Lead Username",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="engagement__lead__username",\n        lookup_expr="icontains",\n        label="Lead Username Contains",\n        help_text="Search for Lead username that contain a given pattern")
    - CharFilter(\n        field_name="prod_type__name",\n        lookup_expr="iexact",\n        label="Product Type Name",\n        help_text="Search for Product Type names that are an exact match")
    - CharFilter(\n        field_name="prod_type__name",\n        lookup_expr="icontains",\n        label="Product Type Name Contains",\n        help_text="Search for Product Type names that contain a given pattern")
    - CharFilter(lookup_expr="icontains", label="Engagement version")
    - CharFilter(field_name="test__version", lookup_expr="icontains", label="Test version")
    - CharFilter(lookup_expr="icontains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Not tag name contains", exclude=True)
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="iexact",\n        label="Lead Username",\n        help_text="Search for Lead username that are an exact match")
    - CharFilter(\n        field_name="lead__username",\n        lookup_expr="icontains",\n        label="Lead Username Contains",\n        help_text="Search for Lead username that contain a given pattern")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Tag name contains")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", help_text="Not Tag name contains", exclude="True")
    - CharFilter(lookup_expr="icontains", label="Product Name")
    - CharFilter(field_name="name", lookup_expr="iexact", label="Exact Product Name")
    - CharFilter(field_name="tags__name", lookup_expr="icontains", label="Tag contains")
