
dojo:
  dojo.tools.ptart.ptart_parser_tools aliased as ptart_tools:
    - ptart_tools.parse_title_from_hit(hit)
    - ptart_tools.parse_ptart_severity(hit.get("severity"))
    - ptart_tools.parse_date_added_from_hit(hit)
    - ptart_tools.parse_cvss_vector(hit, self.cvss_type)
    - ptart_tools.parse_endpoints_from_hit(hit)
    - ptart_tools.parse_screenshots_from_hit(hit)
    - ptart_tools.parse_attachment_from_hit(hit)
    - ptart_tools.parse_references_from_hit(hit)
    - ptart_tools.generate_test_description_from_report(data)
    - ptart_tools.parse_date(\n                data["start_date"], "%Y-%m-%d",\n            )
    - ptart_tools.parse_date(\n                data["end_date"], "%Y-%m-%d",\n            )
    - ptart_tools.parse_retest_status(hit['status'])
    - ptart_tools.parse_title_from_hit(fake_retest_hit)
    - ptart_tools.parse_ptart_severity(\n                original_hit.get("severity"),\n            )
    - ptart_tools.parse_ptart_fix_effort(\n                original_hit.get("fix_complexity"),\n            )
    - ptart_tools.parse_date(\n                retest.get("start_date"),\n                "%Y-%m-%d",\n            )
    - ptart_tools.parse_cvss_vector(\n            original_hit,\n            self.cvss_type,\n        )
    - ptart_tools.parse_endpoints_from_hit(\n            original_hit,\n        )
    - ptart_tools.parse_screenshots_from_hit(hit)
  dojo.models.Vulnerability_Id:
    - model = Vulnerability_Id
    - Vulnerability_Id.objects \\n        .filter(vulnerability_id__in=values)
    - Vulnerability_Id.objects \\n        .filter(vulnerability_id=value)
    - Vulnerability_Id.objects.filter(finding=finding)
    - Vulnerability_Id(finding=finding, vulnerability_id=vulnerability_id)
    - Vulnerability_Id.objects.none()
    - Vulnerability_Id.objects.all()
    - Vulnerability_Id.objects.filter(finding=finding)
    - Vulnerability_Id.objects.get_or_create(\n        finding=finding, vulnerability_id=finding.cve,\n    )
    - Vulnerability_Id.objects \\n            .filter(vulnerability_id=risk.vulnerability_id)
  dojo.forms.AddEngagementForm:
    - AddEngagementForm()
    - AddEngagementForm(request.POST)
  dojo.utils.get_celery_worker_status:
    - get_celery_worker_status()
  dojo.tools.intsights.csv_handler.IntSightsCSVParser:
    - IntSightsCSVParser()
  dojo.tools.sonarqube.soprasteria_json.SonarQubeSoprasteriaJSON:
    - SonarQubeSoprasteriaJSON()
  dojo.api_v2.views.CredentialsViewSet:
    - v2_api.register(r"credentials", CredentialsViewSet, basename="cred_user")
  dojo.models.STATS_FIELDS:
    - super().__init__(*args, **kwargs)\n        for stat in STATS_FIELDS:\n            self.fields[stat.lower()] = serializers.IntegerField()
  dojo.models.Global_Role:
    - model = Global_Role
    - Global_Role.objects.all()
    - Global_Role.objects.all()
    - model = Global_Role
    - def get_global_role_form(self, request: HttpRequest, global_role: Global_Role):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Se...
    - def get_initial_context(self, request: HttpRequest, group: Dojo_Group, global_role: Global_Role):\n        return {\n            "form": self.get_group_form(request, group),\n            "global_role_...
    - Global_Role.objects.filter(group=None, role__isnull=False)
    - Global_Role.objects.none()
    - Global_Role.objects.filter(user=None, role__isnull=False)
    - Global_Role.objects.none()
    - Global_Role.objects.filter(group=None, role__isnull=False)
    - Global_Role.objects.none()
    - Global_Role.objects.filter(user=None, role__isnull=False)
    - Global_Role.objects.none()
    - Global_Role.objects.filter(role__in=roles)
    - Global_Role.objects.filter(role__in=roles)
  dojo.api_v2.permissions:
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoGroupMemberPermission,\n    )
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEndpointPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEndpointStatusPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEngagementPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasRiskAcceptancePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasAppAnalysisPermission,\n    )
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasCredentialPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionStaff,)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasFindingPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionSuperuser,)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasJiraIssuePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasJiraProductPermission,\n    )
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductAPIScanConfigurationPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoMetaPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductMemberPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypeMemberPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypeGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasFindingPermission,\n    )
    - permission_classes = (IsAuthenticated, permissions.UserHasTestPermission)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasTestImportPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionSuperuser,)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasToolProductSettingsPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionSuperuser,)
    - permission_classes = (permissions.UserHasConfigurationPermissionSuperuser,)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (IsAuthenticated, permissions.UserHasImportPermission)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasMetaImportPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionStaff,)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasLanguagePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasLanguagePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasReimportPermission,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionSuperuser,)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEngagementPresetPermission,\n    )
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
    - permission_classes = (\n        permissions.UserHasEngagementPermission,\n        DjangoModelPermissions,\n    )
    - permission_classes = (\n        permissions.UserHasEngagementPermission,\n        DjangoModelPermissions,\n    )
    - permission_classes = (\n        permissions.UserHasEngagementPermission,\n        DjangoModelPermissions,\n    )
    - permission_classes = (\n        permissions.UserHasEngagementPermission,\n        DjangoModelPermissions,\n    )
    - permission_classes = (\n        permissions.UserHasEngagementPermission,\n        DjangoModelPermissions,\n    )
    - permission_classes = (permissions.UserHasConfigurationPermissionStaff,)
    - permission_classes = (permissions.IsSuperUser, DjangoModelPermissions)
  dojo.forms.ObjectSettingsForm:
    - ObjectSettingsForm(request.POST)
    - ObjectSettingsForm()
    - ObjectSettingsForm(request.POST, instance=object)
    - ObjectSettingsForm(instance=object)
    - ObjectSettingsForm(request.POST, instance=object)
  dojo.product.queries.get_authorized_global_members_for_product:
    - get_authorized_global_members_for_product(prod, Permissions.Product_View)
  dojo.forms.DeleteEngagementPresetsForm:
    - DeleteEngagementPresetsForm(instance=preset)
    - DeleteEngagementPresetsForm(request.POST, instance=preset)
  dojo.tools.awssecurityhub.guardduty.GuardDuty:
    - GuardDuty()
  dojo.api_v2.views.EndpointMetaImporterView:
    - v2_api.register(r"endpoint_meta_import", EndpointMetaImporterView, basename="endpointmetaimport")
  dojo.product.queries.get_authorized_product_groups:
    - get_authorized_product_groups(\n            Permissions.Product_Group_View,\n        )
  dojo.decorators.dojo_model_from_id:
    - import logging\nfrom time import strftime\n\nfrom django.conf import settings\nfrom django.db.models.query_utils import Q\nfrom django.db.models.signals import post_delete, pre_delete\nfrom django.db....
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - dojo_model_from_id(model=Finding_Group)
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - dojo_model_from_id(model=Finding_Group)
    - dojo_model_from_id(model=Engagement)
    - dojo_model_from_id(model=Engagement)
    - dojo_model_from_id(model=Engagement)
    - dojo_model_from_id(model=Notes, parameter=1)
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - dojo_model_from_id(model=Notes, parameter=1)
    - import logging\nfrom functools import wraps\n\nfrom django.core.management.base import BaseCommand\n\nfrom dojo.celery import app\n\n# from dojo.utils import get_system_setting, do_dedupe_finding, doj...
    - from dojo.celery import app\nfrom dojo.decorators import dojo_async_task, dojo_model_from_id, dojo_model_to_id\nfrom dojo.tools.api_sonarqube.parser import SCAN_SONARQUBE_API\n\n\ndef async_tool_issue...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - dojo_model_from_id(model=Product)
  dojo.finding.helper aliased as finding_helper:
    - findings.filter(finding_helper.OPEN_FINDINGS_QUERY)
    - findings.filter(finding_helper.VERIFIED_FINDINGS_QUERY)
    - findings.filter(finding_helper.OUT_OF_SCOPE_FINDINGS_QUERY)
    - findings.filter(finding_helper.FALSE_POSITIVE_FINDINGS_QUERY)
    - findings.filter(finding_helper.INACTIVE_FINDINGS_QUERY)
    - findings.filter(finding_helper.ACCEPTED_FINDINGS_QUERY)
    - findings.filter(finding_helper.CLOSED_FINDINGS_QUERY)
    - finding_helper.can_edit_mitigated_data(request.user)
    - finding_helper.can_edit_mitigated_data(request.user)
    - finding_helper.update_finding_group(new_finding, finding_group)
    - finding_helper.add_endpoints(new_finding, context["form"])
    - finding_helper.save_vulnerability_ids(new_finding, context["form"].cleaned_data["vulnerability_ids"].split())
    - finding_helper.save_vulnerability_ids(\n                finding, form.cleaned_data["vulnerability_ids"].split(),\n            )
    - finding_helper.add_endpoints(new_finding, form)
    - finding_helper.save_vulnerability_ids(\n                new_finding, form.cleaned_data["vulnerability_ids"].split(),\n            )
    - finding_helper.save_vulnerability_ids_template(\n                template, form.cleaned_data["vulnerability_ids"].split(),\n            )
    - finding_helper.save_vulnerability_ids_template(\n                template, form.cleaned_data["vulnerability_ids"].split(),\n            )
    - finding_helper.create_finding_group(\n                        finds, finding_group_name,\n                    )
    - finding_helper.add_to_finding_group(\n                        finding_group, finds,\n                    )
    - finding_helper.remove_from_finding_group(finds)
    - finding_helper.group_findings_by(finds, finding_group_by_option)
    - finding_helper.get_group_by_group_name(finding, self.group_by)
    - finding_helper.save_vulnerability_ids(finding, finding.unsaved_vulnerability_ids)
    - finding_helper.add_findings_to_auto_group(\n                group_name,\n                findings,\n                self.group_by,\n                create_finding_groups_for_all_findings=self.create_finding_groups_for_all_findings,\n                **kwargs,\n            )
    - finding_helper.add_findings_to_auto_group(\n                group_name,\n                findings,\n                self.group_by,\n                create_finding_groups_for_all_findings=self.create_finding_groups_for_all_findings,\n                **kwargs,\n            )
    - finding_helper.update_finding_status(self, user, changed_fields={"id": (None, None)})
    - finding_helper.post_process_finding_save(self, dedupe_option=dedupe_option, rules_option=rules_option, product_grading_option=product_grading_option,\n                issue_updater_option=issue_updater_option, push_to_jira=push_to_jira, user=user, *args, **kwargs)
    - findings_qs.filter(finding_helper.ACCEPTED_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.VERIFIED_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.VERIFIED_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.OPEN_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.INACTIVE_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.CLOSED_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.FALSE_POSITIVE_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.OUT_OF_SCOPE_FINDINGS_QUERY)
    - findings_qs.filter(finding_helper.OPEN_FINDINGS_QUERY)
    - finding_helper.add_endpoints(finding, context["form"])
    - finding_helper.save_vulnerability_ids(finding, context["form"].cleaned_data["vulnerability_ids"].split())
    - finding_helper.add_endpoints(finding, context["form"])
    - finding_helper.save_vulnerability_ids(finding, context["form"].cleaned_data["vulnerability_ids"].split())
    - finding_helper.update_finding_status(new_finding, request.user)
    - finding_helper.add_endpoints(new_finding, form)
  dojo.utils.get_page_items_and_count:
    - get_page_items_and_count(request, test_import_finding_action_filter.qs, 5, prefix="test_import_finding_actions")
    - get_page_items_and_count(request, test_import_filter.qs, 5, prefix="test_imports")
    - get_page_items_and_count(request, prefetch_for_findings(findings.qs), 25, prefix="findings")
  dojo.forms.NotificationsWebhookForm:
    - def get_form(\n        self,\n        request: HttpRequest,\n        **kwargs: dict,\n    ) -> NotificationsWebhookForm:\n        if request.method == "POST":\n            return NotificationsWebhookF...
    - NotificationsWebhookForm(request.POST, is_superuser=request.user.is_superuser, **kwargs)
    - NotificationsWebhookForm(is_superuser=request.user.is_superuser, **kwargs)
    - def get_form(\n        self,\n        request: HttpRequest,\n        **kwargs: dict,\n    ) -> NotificationsWebhookForm:\n        if request.method == "POST":\n            return DeleteNotificationsWebhookForm(request.POST, **kwargs)\n        return DeleteNotificationsWebhookForm(**kwargs)
  dojo.api_v2.views.SonarqubeIssueTransitionViewSet:
    - v2_api.register(r"sonarqube_transitions", SonarqubeIssueTransitionViewSet, basename="sonarqube_issue_transition")
  dojo.test.urls.urlpatterns aliased as test_urls:
    - ur += test_urls
  dojo.user.utils.get_configuration_permissions_fields:
    - get_configuration_permissions_fields()
  dojo.forms.ProductTagCountsForm:
    - ProductTagCountsForm()
    - ProductTagCountsForm(request.GET)
  dojo.api_v2.serializers.RiskAcceptanceSerializer:
    - RiskAcceptanceSerializer(many=True)
    - RiskAcceptanceSerializer(instance=accepted, many=True)
    - RiskAcceptanceSerializer(many=True)
    - RiskAcceptanceSerializer(instance=accepted_result, many=True)
  dojo.forms.ToolProductSettingsForm:
    - ToolProductSettingsForm(request.POST)
    - ToolProductSettingsForm()
    - ToolProductSettingsForm(request.POST, instance=tool_product)
    - ToolProductSettingsForm(instance=tool_product)
    - ToolProductSettingsForm(instance=tool_product)
  dojo.api_v2.views.EndpointStatusViewSet:
    - v2_api.register(r"endpoint_status", EndpointStatusViewSet, basename="endpoint_status")
  dojo.engagement.services.reopen_engagement:
    - reopen_engagement(eng)
    - reopen_engagement(eng)
  dojo.reports.widgets.ReportOptions:
    - ReportOptions(request=request)
  dojo.api_v2.views.ImportLanguagesView:
    - v2_api.register(r"import-languages", ImportLanguagesView, basename="importlanguages")
  dojo.test.queries.get_authorized_tests:
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_tests(Permissions.Import_Scan_Result)
    - get_authorized_tests(Permissions.Import_Scan_Result)
    - get_authorized_tests(Permissions.Test_View, product=self.pid)
    - get_authorized_tests(Permissions.Test_Edit)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_tests(Permissions.Test_View)
    - get_authorized_tests(Permissions.Test_View)
  dojo.utils.get_period_counts:
    - get_period_counts(all_findings, closed_findings, None, months_between, start_date,\n                                       relative_delta="months")
  dojo.forms.ProductNotificationsForm:
