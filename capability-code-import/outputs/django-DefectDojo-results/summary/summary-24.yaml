
dojo:
  dojo.models.Finding:
    - def process_finding_that_was_not_matched(\n        self,\n        unsaved_finding: Finding,\n    ) -> Finding:\n        """Create a new finding from the one parsed from the report"""\n        # Set so...
    - def process_finding_that_was_not_matched(\n        self,\n        unsaved_finding: Finding,\n    ) -> Finding:\n        """Create a new finding from the one parsed from the report"""\n        # Set so...
    - def finding_post_processing(\n        self,\n        finding: Finding,\n        finding_from_report: Finding,\n    ) -> None:\n        """\n        Save all associated objects to the finding after it ...
    - def finding_post_processing(\n        self,\n        finding: Finding,\n        finding_from_report: Finding,\n    ) -> None:\n        """\n        Save all associated objects to the finding after it ...
    - def process_results(\n        self,\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n        Determine how to to return the results b...
    - def process_results(\n        self,\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n        Determine how to to return the results b...
    - def process_results(\n        self,\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n        Determine how to to return the results b...
    - def process_results(\n        self,\n        **kwargs: dict,\n    ) -> tuple[list[Finding], list[Finding], list[Finding], list[Finding]]:\n        """\n        Determine how to to return the results b...
    - def calculate_unsaved_finding_hash_code(\n        self,\n        unsaved_finding: Finding,\n    ) -> str:\n        return unsaved_finding.compute_hash_code()
    - def add_endpoints_to_unsaved_finding(\n        self,\n        finding: Finding,\n        endpoints: list[Endpoint],\n        **kwargs: dict,\n    ) -> None:\n        """Creates Endpoint objects for a ...
    - def chunk_endpoints_and_disperse(\n        self,\n        finding: Finding,\n        endpoints: list[Endpoint],\n        **kwargs: dict,\n    ) -> None:\n        """\n        Determines whether to asy...
    - def update_endpoint_status(\n        self,\n        existing_finding: Finding,\n        new_finding: Finding,\n        user: Dojo_User,\n        **kwargs: dict,\n    ) -> None:\n        """Update the ...
    - def update_endpoint_status(\n        self,\n        existing_finding: Finding,\n        new_finding: Finding,\n        user: Dojo_User,\n        **kwargs: dict,\n    ) -> None:\n        """Update the ...
    - self.parsed_findings: list[Finding] | None = self.validate_parsed_findings(*args, **kwargs)
    - isinstance(obj, Finding)
    - Finding.get_number_severity(System_Settings.objects.get().jira_minimum_severity)
    - Finding.get_number_severity(severity)
    - isinstance(obj, Finding | Stub_Finding)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding | Engagement | Finding_Group)
    - isinstance(obj, Finding | Engagement | Finding_Group)
    - isinstance(obj, Finding | Engagement | Finding_Group)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding | Engagement)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding)
    - isinstance(obj, Finding)
    - def jira_already_linked(finding, jira_issue_key, jira_id) -> Finding | None:\n    jira_issues = JIRA_Issue.objects.filter(jira_id=jira_id, jira_key=jira_issue_key).exclude(engagement__isnull=False)\n    jira_issues = jira_issues.exclude(finding=finding)\n\n    return jira_issues.first()
    - Finding.objects.filter(verified=True,\n                                          active=True)
    - Finding.objects.filter(test__test_type__name__in=restrict_to_parsers)
    - Finding.objects.all()
    - mass_model_updater(Finding, finds, lambda f: generate_hash_code(f), fields=["hash_code"], order="asc", log_prefix="hash_code computation ")
    - mass_model_updater(Finding, findings, lambda f: do_dedupe_finding(f), fields=None, order="desc", page_size=100, log_prefix="deduplicating ")
    - mass_model_updater(Finding, findings.only("id"), lambda f: do_dedupe_finding_task(f.id), fields=None, order="desc", log_prefix="deduplicating ")
    - Finding.objects.exclude(jira_issue__isnull=True)
    - Finding.objects.all()
    - Finding.objects.filter(cve__isnull=False)
    - mass_model_updater(\n            Finding,\n            findings,\n            lambda f: create_vulnerability_id(f),\n            fields=None,\n            page_size=100,\n            log_prefix="creating vulnerability ids: ",\n        )
    - Finding.objects.exclude(jira_issue__isnull=True)
    - Finding.objects.filter(found_by=mend_id)
    - Finding.objects.all()
    - Finding.objects.all()
    - all_authorized_findings: QuerySet[Finding] = get_authorized_findings(\n        Permissions.Finding_View,\n        user=request.user,\n    ).select_related(\n        "reporter",\n        "test",\n     ...
    - filtered_findings: QuerySet[Finding] = queryset_check(findings_filter)
    - TypeVar("MetricsQuerySet", QuerySet[Finding], QuerySet[Endpoint_Status])
    - def findings_by_product(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Groups the given Findings queryset around related product (name/ID)\n\n    :param findings: A queryset...
    - def findings_by_product(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Groups the given Findings queryset around related product (name/ID)\n\n    :param findings: A queryset...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding], dict[str, int]]:\n    """\n    Gathers details for the given queryset, corresponding to m...
    - def get_accepted_in_period_details(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Gathers details for the given queryset, corresponding to metrics information for 'accepted'...
    - def get_accepted_in_period_details(\n    findings: QuerySet[Finding],\n) -> QuerySet[Finding]:\n    """\n    Gathers details for the given queryset, corresponding to metrics information for 'accepted'...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def get_closed_in_period_details(\n    findings: QuerySet[Finding],\n) -> tuple[QuerySet[Finding], QuerySet[Finding]]:\n    """\n    Gathers details for the given queryset, corresponding to metrics in...
    - def findings_queryset(\n    qs: MetricsQuerySet,\n) -> QuerySet[Finding]:\n    """\n    Given a MetricsQuerySet, returns a QuerySet representing all its findings.\n\n    :param qs: MetricsQuerySet (A ...
    - Finding.objects.filter(status_finding__in=qs)
    - Finding.objects.filter(test__engagement__product__prod_type=pt,\n                                       false_p=False,\n                                       duplicate=False,\n                       ...
    - Finding.objects.filter(mitigated__date__range=[start_date, end_date],\n                                                      test__engagement__product__prod_type=pt,\n                                                      severity__in=("Critical", "High", "Medium", "Low"))
    - Finding.objects.filter(mitigated__date__range=[start_date, end_date],\n                                                            test__engagement__product__prod_type=pt,\n                           ...
    - Finding.objects.filter(date__lt=end_date,\n                                                    verified=True,\n                                                    false_p=False,\n                     ...
    - Finding.objects.filter(date__lte=end_date,\n                                                            verified=True,\n                                                            false_p=False,\n    ...
    - Finding.objects.filter(date__lte=end_date,\n                                                        verified=True,\n                                                        false_p=False,\n            ...
    - Finding.objects.filter(date__lt=end_date,\n                                                    false_p=False,\n                                                    duplicate=False,\n                   ...
    - Finding.objects.filter(date__lte=end_date,\n                                                            false_p=False,\n                                                            duplicate=False,\n  ...
    - Finding.objects.filter(date__lte=end_date,\n                                                        false_p=False,\n                                                        duplicate=False,\n          ...
    - Finding.objects.filter(mitigated__date__range=[start_date, end_date],\n                                                      test__engagement__product__tags__name=pt,\n                                ...
    - Finding.objects.filter(mitigated__date__range=[start_date, end_date],\n                                                            test__engagement__product__tags__name=pt,\n                          ...
    - Finding.objects.filter(date__lt=end_date,\n                                                    verified=True,\n                                                    false_p=False,\n                     ...
    - Finding.objects.filter(date__lte=end_date,\n                                                            verified=True,\n                                                            false_p=False,\n    ...
    - Finding.objects.filter(date__lte=end_date,\n                                                        verified=True,\n                                                        false_p=False,\n            ...
    - Finding.objects.filter(date__lt=end_date,\n                                                    false_p=False,\n                                                    duplicate=False,\n                   ...
    - Finding.objects.filter(date__lte=end_date,\n                                                            false_p=False,\n                                                            duplicate=False,\n  ...
    - Finding.objects.filter(date__lte=end_date,\n                                                        false_p=False,\n                                                        duplicate=False,\n          ...
    - Finding.objects.filter(reporter=user, verified=True)
    - Finding.objects.filter(reporter=user)
    - Finding.objects.filter(mitigated_by=user)
    - get_object_or_404(Finding, id=objid)
    - get_object_or_404(Finding, id=objid)
    - get_object_or_404(Finding, id=objid)
    - def create_notification(\n    event: str | None = None,\n    title: str | None = None,\n    finding: Finding | None = None,\n    test: Test | None = None,\n    engagement: Engagement | None = None,\n ...
    - Finding.objects.filter(test__engagement__product=product)
    - Finding.objects.filter(test__engagement__product=product)
    - Finding.objects.filter(test__engagement__product=prod,\n                                           false_p=False,\n                                           active=True,\n                                           duplicate=False,\n                                           out_of_scope=False)
    - Finding.objects.filter(test__engagement__product__id=pid)
    - Finding.objects.filter(test__engagement__product__id=pid)
    - Finding.objects.filter(test__engagement__product=prod)
    - Finding.get_numerical_severity(finding.severity)
    - def process_jira_form(self, request: HttpRequest, finding: Finding, context: dict):\n        # Capture case if the jira not being enabled\n        if context["jform"] is None:\n            return requ...
    - def process_github_form(self, request: HttpRequest, finding: Finding, context: dict):\n        if "githubform-push_to_github" not in request.POST:\n            return request, True\n\n        if conte...
    - Finding.objects.filter()
    - get_words_for_field(Finding, "title")
    - get_words_for_field(Finding, "component_name")
    - Finding.objects.filter(\n            test__engagement__product__prod_type=product_type)
    - Finding.objects.filter(\n            test__engagement__product=product)
    - Finding.objects.filter(test__engagement=engagement)
    - Finding.objects.filter(test=test)
    - Finding.objects.filter(endpoints__in=endpoints)
    - get_words_for_field(Finding, "title")
    - get_words_for_field(Finding, "component_name")
    - Finding.objects.all()
    - def remove_finding_from_risk_acceptance(user: Dojo_User, risk_acceptance: Risk_Acceptance, finding: Finding) -> None:\n    logger.debug("removing finding %i from risk acceptance %i", finding.id, risk_...
    - def add_findings_to_risk_acceptance(user: Dojo_User, risk_acceptance: Risk_Acceptance, findings: list[Finding]) -> None:\n    for finding in findings:\n        if not finding.duplicate or finding.risk...
    - def simple_risk_accept(user: Dojo_User, finding: Finding, perform_save=True) -> None:\n    if not finding.test.engagement.product.enable_simple_risk_acceptance:\n        raise PermissionDenied\n\n    ...
    - def risk_unaccept(user: Dojo_User, finding: Finding, perform_save=True, post_comments=True) -> None:\n    logger.debug("unaccepting finding %i:%s if it is currently risk accepted", finding.id, finding...
    - def update_endpoint_statuses(finding: Finding, *, accept_risk: bool) -> None:\n    for status in finding.status_finding.all():\n        if accept_risk:\n            status.active = False\n            ...
    - get_words_for_field(Finding, "title")
    - get_words_for_field(Finding, "component_name")
    - tag_filters = {"tag": ""}\n\n    if qs.model == Finding:\n        tag_filters = {\n            "tag": "",\n            "test-tag": "test__",\n            "engagement-tag": "test__engagement__",\n     ...
    - Finding.objects.filter(test__engagement__product__sla_configuration_id=sla_config.id, severity__in=severities)
    - receiver(signals.m2m_changed, sender=Finding.tags.through)
    - receiver(signals.post_save, sender=Finding)
    - isinstance(instance, Finding)
    - Finding.objects \\n                .filter(duplicate=True)
    - Finding.objects.filter(id__in=originals_with_too_many_duplicates_ids)
    - Finding.objects.filter(duplicate=True)
    - Finding.objects.count()
    - Finding.get_number_severity(value)
    - Finding.objects.filter(test=id)
    - Finding.objects.filter(test__engagement=id, active=True, duplicate=False)
    - Finding.objects.filter(test__engagement__product=id)
    - Finding.objects.filter(test=instance)
    - Finding.objects.filter(test=test)
    - get_words_for_field(Finding, "title")
    - get_words_for_field(Finding, "component_name")
    - Finding.get_numerical_severity(finding.severity)
    - def process_jira_form(self, request: HttpRequest, finding: Finding, context: dict):\n        # Capture case if the jira not being enabled\n        if context["jform"] is None:\n            return requ...
    - Finding.get_numerical_severity(\n                new_finding.severity)
    - Finding(\n                title=title,\n                test=test,\n                description=findingdetail,\n                severity=sev.title(),\n                mitigation=mitigation,\n         ...
    - Finding(\n                    test=test,\n                    title=item.findtext("Name"),\n                    severity=self.get_severity(item.findtext("Severity")),\n                    description=...
    - Finding(\n                    title=title,\n                    test=test,\n                    cvssv3_score=cvssv3_base_score,\n                    description=findingdetail,\n                    sev...
    - Finding(\n                                        title=title,\n                                        test=test,\n                                        description=description,\n                  ...
    - Finding(\n                    title=finding_title.replace("\x00", ""),\n                    description=finding_description.replace("\x00", ""),\n                    cwe=1352,\n                    cvs...
    - Finding(\n                                title=title,\n                                test=test,\n                                description=description,\n                                severity=s...
    - Finding(\n                    title=title,\n                    test=test,\n                    cvssv3_score=cvssv3_base_score,\n                    description=findingdetail,\n                    sev...
    - Finding(\n                test=test,\n                title=f"{vulnerability_id} in {component_name}:{component_version}",\n                description=entry["vulnerabilityWithRemediation"].get(\n    ...
    - Finding(\n                test=test,\n                title=textwrap.shorten(title, width=511, placeholder="..."),\n                date=date,\n                severity=self.convert_severity(bugcrowd_...
    - Finding(\n                test=test,\n                title=textwrap.shorten(title, width=511, placeholder="..."),\n                date=date,\n                severity=self.convert_severity(cobalt_se...
    - Finding(test=test)
    - Finding.objects.filter(\n                    sonarqube_issue=sonarqube_issue,\n                )
    - Finding(\n                    title=title,\n                    cwe=cwe,\n                    description=description,\n                    test=test,\n                    severity=severity,\n        ...
    - Finding.objects.filter(\n                    sonarqube_issue=sonarqube_issue,\n                )
    - Finding(\n                    title=title,\n                    cwe=cwe,\n                    description=description,\n                    test=test,\n                    severity=severity,\n        ...
    - Finding.objects.filter(\n            sonarqube_issue__isnull=False,\n            active=True,\n        )
    - Finding(\n                title=title,\n                severity=severity,\n                impact=severity,\n                description=vuln.get("description", title),\n                mitigation=co...
    - def extract_request_response(self, finding: Finding, value: dict[str, [str]]) -> None:\n        if messages := value.get("Messages"):\n            # If we match either HTTP/1 or HTTP/2 request/respons...
    - def parse_details(self, finding: Finding, value: dict[str, str | dict[str, list[str]]]) -> None:\n        self.extract_request_response(finding, value)\n        # super's version adds everything else to the description field\n        return super().parse_details(finding, value)
    - hasattr(Finding, self.target_name)
    - def parse_initial_date(self, finding: Finding, value: str) -> None:\n        finding.date = self.get_date(value)
    - def parse_cves(self, finding: Finding, value: list[str]) -> None:\n        finding.unsaved_vulnerability_ids = [c.upper() for c in value if self.is_cve(c)]
