
base_test_class:
  base_test_class.BaseTestCase:
    - BaseTestCase("enable_github")
    - BaseTestCase("disable_github")
    - BaseTestCase("enable_block_execution")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class DedupeTest(BaseTestCase):\n    # --------------------------------------------------------------------------------------------------------\n    # Initialization\n    # ---------------------------...
    - BaseTestCase("test_login")
    - BaseTestCase("enable_jira")
    - BaseTestCase("disable_jira")
    - BaseTestCase("enable_github")
    - BaseTestCase("disable_github")
    - BaseTestCase("enable_block_execution")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class EndpointTest(BaseTestCase):\n\n    def test_create_endpoint(self):\n        # Login to the site.\n        # Username and password will be gotten from environ\n        driver = self.driver\n     ...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class EngagementTest(BaseTestCase):\n\n    def test_list_active_engagements_found(self):\n        driver = self.driver\n        self.goto_active_engagements_overview(driver)\n        self.assertIn("ed...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class EnvironmentTest(BaseTestCase):\n\n    def login_page(self):\n        driver = self.driver\n        driver.get(self.base_url + "login")\n        driver.find_element(By.ID, "id_username").clear()\...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class FalsePositiveHistoryTest(BaseTestCase):\n\n    def create_finding(self, product_name, engagement_name, test_name, finding_name):\n        driver = self.driver\n        # Navigate to the Product ...
    - BaseTestCase("test_login")
    - BaseTestCase("enable_block_execution")
    - BaseTestCase("disable_deduplication")
    - BaseTestCase("enable_false_positive_history")
    - BaseTestCase("enable_retroactive_false_positive_history")
    - BaseTestCase.tearDownDriver()
    - class FileUploadTest(BaseTestCase):\n\n    def uncollapse_all(self, driver):\n        elems = driver.find_elements(By.NAME, "collapsible")\n        for elem in elems:\n            elem.click()\n      ...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class FindingTest(BaseTestCase):\n\n    def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_...
    - BaseTestCase("test_login")
    - BaseTestCase("delete_finding_template_if_exists")
    - BaseTestCase.tearDownDriver()
    - class GroupTest(BaseTestCase):\n\n    def test_create_group(self):\n        # Login to the site.\n        driver = self.driver\n        # Navigate to the Group managegement page\n        driver.get(se...
    - BaseTestCase("test_login")
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class IBMAppScanTest(BaseTestCase):\n\n    def test_import_ibm_app_scan_result(self):\n        # Login to the site.\n        # Username and password will be gotten from environ\n        driver = self....
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class NoteTypeTest(BaseTestCase):\n\n    def test_create_note_type(self):\n        driver = self.driver\n        driver.get(self.base_url + "note_type")\n        driver.find_element(By.ID, "dropdownMe...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class NoteTest(BaseTestCase):\n\n    def uncollapse_all(self, driver):\n        elems = driver.find_elements(By.NAME, "collapsible")\n        for elem in elems:\n            elem.click()\n            ...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class NotificationTest(BaseTestCase):\n\n    def __init__(self, method_name, type):\n        super().__init__(method_name)\n        self.type = type\n\n    def enable_notification(self):\n        driv...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class ProductGroupTest(BaseTestCase):\n\n    def test_group_add_product_group(self):\n        driver = self.navigate_to_group_view()\n        # Open the menu to add product groups and click the 'Add' ...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class ProductMemberTest(BaseTestCase):\n\n    def test_user_add_product_member(self):\n        # Login to the site. Password will have to be modified\n        # to match an admin password in your own ...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class ProductTest(BaseTestCase):\n\n    @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class ProductTypeGroupTest(BaseTestCase):\n\n    def test_group_add_product_type_group(self):\n        driver = self.navigate_to_group_view()\n        # Open the menu to add product type groups and cl...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class ProductTypeMemberTest(BaseTestCase):\n\n    def test_user_add_product_type_member(self):\n        # Login to the site. Password will have to be modified\n        # to match an admin password in ...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class ProductTypeTest(BaseTestCase):\n\n    @on_exception_html_source_logger\n    def test_create_product_type(self):\n        logger.debug("\n\nDebug Print Log: testing 'create product type' \n")\n  ...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class RegulationTest(BaseTestCase):\n\n    def login_page(self):\n        driver = self.driver\n        driver.get(self.base_url + "login")\n        driver.find_element(By.ID, "id_username").clear()\n...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class ReportBuilderTest(BaseTestCase):\n\n    # Move the report blocks from Available Widgets to Report Format\n    def move_blocks(self, driver):\n        in_use = driver.find_element(By.ID, "sortabl...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class SearchTests(BaseTestCase):\n\n    def test_search(self):\n        # very basic search test to see if it doesn't 500\n        driver = self.goto_some_page()\n        driver.find_element(By.ID, "s...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class SLAConfigurationTest(BaseTestCase):\n\n    def login_page(self):\n        driver = self.driver\n        driver.get(self.base_url + "login")\n        driver.find_element(By.ID, "id_username").cle...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class TestUnitTest(BaseTestCase):\n\n    def test_view_test(self):\n        # View existing test from ProductTest()\n        # Login to the site.\n        driver = self.driver\n\n        # goto engage...
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
    - class ToolConfigTest(BaseTestCase):\n\n    def goto_add_api_scan_configuration(self, driver):\n        self.goto_product_overview(driver)\n        driver.find_element(By.CSS_SELECTOR, ".dropdown-toggl...
    - BaseTestCase("test_login")
    - BaseTestCase("disable_block_execution")
    - BaseTestCase.tearDownDriver()
    - class UserTest(BaseTestCase):\n\n    def test_create_user(self):\n        # Login to the site.\n        driver = self.driver\n        # Navigate to the User managegement page\n        driver.get(self....
    - BaseTestCase("test_login")
    - BaseTestCase("test_login")
    - BaseTestCase.tearDownDriver()
  base_test_class.on_exception_html_source_logger:
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logger.deb...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = Path(os.path.realpath(__file__)).parent\n\n    @on_exception_html_source_logger\n    def test_delete_findings(self):\n        lo...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def setUp(self):\n        super().setUp()\n        self.relative_path = str(Path(os.path.realpath(__file__)).parent)\n\n    def check_nb_duplicates(self, expected_number_of_duplicates):\n        logge...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - def test_list_findings_all(self):\n        return self.test_list_findings("finding")\n\n    def test_list_findings_closed(self):\n        return self.test_list_findings("finding/closed")\n\n    def te...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product(self):\n        # make sure no left overs from previous runs are left behind\n        self.delete_product_if_exists()\n\n        driver = ...
    - @on_exception_html_source_logger\n    def test_create_product_type(self):\n        logger.debug("\n\nDebug Print Log: testing 'create product type' \n")\n        driver = self.driver\n        driver.g...
    - @on_exception_html_source_logger\n    def test_create_product_type(self):\n        logger.debug("\n\nDebug Print Log: testing 'create product type' \n")\n        driver = self.driver\n        driver.g...
