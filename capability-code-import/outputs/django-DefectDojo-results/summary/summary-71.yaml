
django:
  django.db.models:
    - models.TextField(null=True, blank=True, db_column="refs")
    - models.DateTimeField(null=True, editable=False)
    - models.CharField(max_length=4, null=True, blank=True, editable=False)
    - models.BooleanField(default=False, verbose_name=_("Template Match Enabled"), help_text=_("Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE."))
    - models.BooleanField(default=False, verbose_name=_("Match Template by Title and CWE"), help_text=_("Matches by title text (contains search) and CWE."))
    - class Vulnerability_Id_Template(models.Model):\n    finding_template = models.ForeignKey(Finding_Template, editable=False, on_delete=models.CASCADE)\n    vulnerability_id = models.TextField(max_length=50, blank=False, null=False)
    - models.ForeignKey(Finding_Template, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Finding_Template, editable=False, on_delete=models.CASCADE)
    - models.TextField(max_length=50, blank=False, null=False)
    - class Check_List(models.Model):\n    session_management = models.CharField(max_length=50, default="none")\n    session_issues = models.ManyToManyField(Finding,\n                                       ...
    - models.CharField(max_length=50, default="none")
    - models.ManyToManyField(Finding,\n                                            related_name="session_issues",\n                                            blank=True)
    - models.CharField(max_length=50, default="none")
    - models.ManyToManyField(Finding,\n                                           related_name="crypto_issues",\n                                           blank=True)
    - models.CharField(max_length=50, default="")
    - models.ManyToManyField(Finding,\n                                           related_name="config_issues",\n                                           blank=True)
    - models.CharField(max_length=50, default="none")
    - models.ManyToManyField(Finding,\n                                         related_name="auth_issues",\n                                         blank=True)
    - models.CharField(max_length=50,\n                                                        default="none")
    - models.ManyToManyField(Finding,\n                                           related_name="author_issues",\n                                           blank=True)
    - models.CharField(max_length=50,\n                                                          default="none")
    - models.ManyToManyField(Finding, related_name="data_issues",\n                                         blank=True)
    - models.CharField(max_length=50, default="none")
    - models.ManyToManyField(Finding,\n                                              related_name="sensitive_issues",\n                                              blank=True)
    - models.CharField(max_length=50, default="none")
    - models.ManyToManyField(Finding, related_name="other_issues",\n                                          blank=True)
    - models.ForeignKey(Engagement, editable=False,\n                                   related_name="eng_for_check", on_delete=models.CASCADE)
    - models.ForeignKey(Engagement, editable=False,\n                                   related_name="eng_for_check", on_delete=models.CASCADE)
    - class BurpRawRequestResponse(models.Model):\n    finding = models.ForeignKey(Finding, blank=True, null=True, on_delete=models.CASCADE)\n    burpRequestBase64 = models.BinaryField()\n    burpResponseBa...
    - models.ForeignKey(Finding, blank=True, null=True, on_delete=models.CASCADE)
    - models.ForeignKey(Finding, blank=True, null=True, on_delete=models.CASCADE)
    - models.BinaryField()
    - models.BinaryField()
    - class Risk_Acceptance(models.Model):\n    TREATMENT_ACCEPT = "A"\n    TREATMENT_AVOID = "V"\n    TREATMENT_MITIGATE = "M"\n    TREATMENT_FIX = "F"\n    TREATMENT_TRANSFER = "T"\n\n    TREATMENT_TRANSL...
    - models.CharField(max_length=300, null=False, blank=False, help_text=_("Descriptive name which in the future may also be used to group risk acceptances together across engagements and products"))
    - models.ManyToManyField(Finding)
    - models.CharField(choices=TREATMENT_CHOICES, max_length=2, null=False, default=TREATMENT_FIX, help_text=_("Recommendation from the security team."), verbose_name=_("Security Recommendation"))
    - models.TextField(null=True,\n                                      blank=True,\n                                      help_text=_("Explanation of security recommendation"), verbose_name=_("Security Recommendation Details"))
    - models.CharField(choices=TREATMENT_CHOICES, max_length=2, null=False, default=TREATMENT_ACCEPT, help_text=_("Risk treatment decision by risk owner"))
    - models.TextField(default=None, blank=True, null=True, help_text=_("If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s)."))
    - models.CharField(max_length=200, default=None, null=True, blank=True, verbose_name=_("Accepted By"), help_text=_("The person that accepts the risk, can be outside of DefectDojo."))
    - models.FileField(upload_to="risk/%Y/%m/%d",\n                            editable=True, null=True,\n                            blank=True, verbose_name=_("Proof"))
    - models.ForeignKey(Dojo_User, editable=True, on_delete=models.RESTRICT, help_text=_("User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance."))
    - models.ForeignKey(Dojo_User, editable=True, on_delete=models.RESTRICT, help_text=_("User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance."))
    - models.DateTimeField(default=None, null=True, blank=True, help_text=_("When the risk acceptance expires, the findings will be reactivated (unless disabled below)."))
    - models.DateTimeField(default=None, null=True, blank=True, help_text=_("(readonly) Date at which notice about the risk acceptance expiration was sent."))
    - models.DateTimeField(default=None, null=True, blank=True, help_text=_("(readonly) When the risk acceptance expiration was handled (manually or by the daily job)."))
    - models.BooleanField(null=False, blank=False, default=True, verbose_name=_("Reactivate findings on expiration"), help_text=_("Reactivate findings when risk acceptance expires?"))
    - models.BooleanField(default=False, null=False, verbose_name=_("Restart SLA on expiration"), help_text=_("When enabled, the SLA for findings is restarted when the risk acceptance expires."))
    - models.ManyToManyField(Notes, editable=False)
    - models.DateTimeField(auto_now_add=True, null=False)
    - models.DateTimeField(auto_now=True, editable=False)
    - class FileAccessToken(models.Model):\n\n    """\n    This will allow reports to request the images without exposing the\n    media root to the world without\n    authentication\n    """\n\n    user = ...
    - models.ForeignKey(Dojo_User, null=False, blank=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, null=False, blank=False, on_delete=models.CASCADE)
    - models.ForeignKey(FileUpload, null=False, blank=False, on_delete=models.CASCADE)
    - models.ForeignKey(FileUpload, null=False, blank=False, on_delete=models.CASCADE)
    - models.CharField(max_length=255)
    - models.CharField(max_length=9,\n                            choices=(\n                                ("small", "Small"),\n                                ("medium", "Medium"),\n                     ...
    - class Announcement(models.Model):\n    message = models.CharField(max_length=500,\n                                help_text=_("This dismissable message will be displayed on all pages for authenticate...
    - models.CharField(max_length=500,\n                                help_text=_("This dismissable message will be displayed on all pages for authenticated users. It can contain basic html tags, for exam...
    - models.CharField(max_length=64, choices=ANNOUNCEMENT_STYLE_CHOICES, default="info",\n                            help_text=_("The style of banner to display. (info, success, warning, danger)"))
    - models.BooleanField(default=False,\n                                      null=False,\n                                      blank=True,\n                                      verbose_name=_("Dismissa...
    - class UserAnnouncement(models.Model):\n    announcement = models.ForeignKey(Announcement, null=True, editable=False, on_delete=models.CASCADE, related_name="user_announcement")\n    user = models.ForeignKey(Dojo_User, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Announcement, null=True, editable=False, on_delete=models.CASCADE, related_name="user_announcement")
    - models.ForeignKey(Announcement, null=True, editable=False, on_delete=models.CASCADE, related_name="user_announcement")
    - models.ForeignKey(Dojo_User, null=True, editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, null=True, editable=False, on_delete=models.CASCADE)
    - class BannerConf(models.Model):\n    banner_enable = models.BooleanField(default=False, null=True, blank=True)\n    banner_message = models.CharField(max_length=500, help_text=_("This message will be ...
    - models.BooleanField(default=False, null=True, blank=True)
    - models.CharField(max_length=500, help_text=_("This message will be displayed on the login page. It can contain basic html tags, for example <a href='https://www.fred.com' style='color: #337ab7;' target='_blank'>https://example.com</a>"), default="")
    - class GITHUB_Conf(models.Model):\n    configuration_name = models.CharField(max_length=2000, help_text=_("Enter a name to give to this configuration"), default="")\n    api_key = models.CharField(max_...
    - models.CharField(max_length=2000, help_text=_("Enter a name to give to this configuration"), default="")
    - models.CharField(max_length=2000, help_text=_("Enter your Github API Key"), default="")
    - class GITHUB_Issue(models.Model):\n    issue_id = models.CharField(max_length=200)\n    issue_url = models.URLField(max_length=2000, verbose_name=_("GitHub issue URL"))\n    finding = models.OneToOneF...
    - models.CharField(max_length=200)
    - models.URLField(max_length=2000, verbose_name=_("GitHub issue URL"))
    - models.OneToOneField(Finding, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Finding, null=True, blank=True, on_delete=models.CASCADE)
    - class GITHUB_Clone(models.Model):\n    github_id = models.CharField(max_length=200)\n    github_clone_id = models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - class GITHUB_Details_Cache(models.Model):\n    github_id = models.CharField(max_length=200)\n    github_key = models.CharField(max_length=200)\n    github_status = models.CharField(max_length=200)\n    github_resolution = models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - class GITHUB_PKey(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    git_project = models.CharField(max_length=200, blank=True, verbose_name=_("Github project"),...
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.CharField(max_length=200, blank=True, verbose_name=_("Github project"), help_text=_("Specify your project location. (:user/:repo)"))
    - models.ForeignKey(GITHUB_Conf, verbose_name=_("Github Configuration"),\n                                 null=True, blank=True, on_delete=models.CASCADE)
    - models.ForeignKey(GITHUB_Conf, verbose_name=_("Github Configuration"),\n                                 null=True, blank=True, on_delete=models.CASCADE)
    - models.BooleanField(default=False, blank=True, help_text=_("Notes added to findings will be automatically added to the corresponding github issue"))
    - class JIRA_Instance(models.Model):\n    configuration_name = models.CharField(max_length=2000, help_text=_("Enter a name to give to this configuration"), default="")\n    url = models.URLField(max_len...
    - models.CharField(max_length=2000, help_text=_("Enter a name to give to this configuration"), default="")
    - models.URLField(max_length=2000, verbose_name=_("JIRA URL"), help_text=_("For more information how to configure Jira, read the DefectDojo documentation."))
    - models.CharField(max_length=2000)
    - models.CharField(max_length=2000)
    - models.CharField(max_length=255,\n                                          choices=default_issue_type_choices,\n                                          default="Bug",\n                                          help_text=_("You can define extra issue types in settings.py"))
    - models.CharField(max_length=255,\n                                      null=True,\n                                      blank=True,\n                                      help_text=_("Choose the fol...
    - models.IntegerField(help_text=_("To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here."))
    - models.IntegerField(verbose_name=_("Reopen Transition ID"), help_text=_("Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance"))
    - models.IntegerField(verbose_name=_("Close Transition ID"), help_text=_("Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance"))
    - models.CharField(max_length=200, help_text=_("Maps to the 'Priority' field in Jira. For example: Info"))
    - models.CharField(max_length=200, help_text=_("Maps to the 'Priority' field in Jira. For example: Low"))
    - models.CharField(max_length=200, help_text=_("Maps to the 'Priority' field in Jira. For example: Medium"))
    - models.CharField(max_length=200, help_text=_("Maps to the 'Priority' field in Jira. For example: High"))
    - models.CharField(max_length=200, help_text=_("Maps to the 'Priority' field in Jira. For example: Critical"))
    - models.TextField(null=True, blank=True, help_text=_("Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information."))
    - models.CharField(null=True, blank=True, max_length=300, help_text=_("JIRA resolution names (comma-separated values) that maps to an Accepted Finding"))
    - models.CharField(null=True, blank=True, max_length=300, help_text=_("JIRA resolution names (comma-separated values) that maps to a False Positive Finding"))
    - models.BooleanField(default=True, blank=False, verbose_name=_("Globally send SLA notifications as comment?"), help_text=_("This setting can be overidden at the Product level"))
    - models.BooleanField(default=False, blank=False, verbose_name=_("Automatically sync Findings with JIRA?"), help_text=_("If enabled, this will sync changes to a Finding automatically to JIRA"))
    - class JIRA_Project(models.Model):\n    jira_instance = models.ForeignKey(JIRA_Instance, verbose_name=_("JIRA Instance"),\n                             null=True, blank=True, on_delete=models.PROTECT)\...
    - models.ForeignKey(JIRA_Instance, verbose_name=_("JIRA Instance"),\n                             null=True, blank=True, on_delete=models.PROTECT)
    - models.ForeignKey(JIRA_Instance, verbose_name=_("JIRA Instance"),\n                             null=True, blank=True, on_delete=models.PROTECT)
    - models.CharField(max_length=200, blank=True)
    - models.ForeignKey(Product, on_delete=models.CASCADE, null=True)
    - models.ForeignKey(Product, on_delete=models.CASCADE, null=True)
    - models.CharField(max_length=255,\n                                      null=True,\n                                      blank=True,\n                                      help_text=_("Choose the fol...
    - models.OneToOneField(Engagement, on_delete=models.CASCADE, null=True, blank=True)
    - models.OneToOneField(Engagement, on_delete=models.CASCADE, null=True, blank=True)
    - models.CharField(max_length=200, blank=True)
    - models.JSONField(max_length=200, blank=True, null=True,\n                                   help_text=_('JIRA custom field JSON mapping of Id to value, e.g. {"customfield_10122": [{"name": "8.0.1"}]}'))
    - models.CharField(max_length=200, blank=True, null=True,\n                                     help_text=_("JIRA default assignee (name). If left blank then it defaults to whatever is configured in JIRA."))
    - models.CharField(max_length=200, blank=True, null=True,\n                                   help_text=_("JIRA issue labels space seperated"))
    - models.BooleanField(default=False,\n                                                             verbose_name=_("Add vulnerability Id as a JIRA label"),\n                                                             blank=False)
    - models.BooleanField(default=False, blank=True,\n         help_text=_("Automatically create JIRA tickets for verified findings, assuming enforce_verified_status is True, or for all findings otherwise. Once linked, the JIRA ticket will continue to sync, regardless of status in DefectDojo."))
    - models.BooleanField(default=False,\n                                                         blank=True)
    - models.CharField(max_length=64, blank=True, default="Epic", help_text=_("The name of the of structure that represents an Epic"))
    - models.BooleanField(default=False, blank=True)
    - models.BooleanField(default=False, blank=True, verbose_name=_("Send SLA notifications as comment?"))
    - models.BooleanField(default=False, blank=True, verbose_name=_("Send Risk Acceptance expiration notifications as comment?"))
    - models.BooleanField(\n        verbose_name=_("Enable Connection With Jira Project"),\n        help_text=_("When disabled, Findings will no longer be pushed to Jira, even if they have already been pushed previously."),\n        default=True,\n        blank=True)
    - class JIRA_Issue(models.Model):\n    jira_project = models.ForeignKey(JIRA_Project, on_delete=models.CASCADE, null=True)\n    jira_id = models.CharField(max_length=200)\n    jira_key = models.CharFiel...
    - models.ForeignKey(JIRA_Project, on_delete=models.CASCADE, null=True)
    - models.ForeignKey(JIRA_Project, on_delete=models.CASCADE, null=True)
    - models.CharField(max_length=200)
    - models.CharField(max_length=200)
    - models.OneToOneField(Finding, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Finding, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Engagement, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Engagement, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Finding_Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Finding_Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.DateTimeField(editable=True,\n                                         null=True,\n                                         verbose_name=_("Jira creation"),\n                                         help_text=_("The date a Jira issue was created from this finding."))
