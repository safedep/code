
json:
  json:
    - json.load(file)
    - json.load(scan)
    - json.load(filehandle)
    - json.load(filename)
    - json.load(file)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.dumps(item["render_path"], indent=4)
    - json.load(file)
    - json.load(filename)
    - json.load(filename)
    - json.load(file)
    - json.load(file)
    - json.load(file)
    - json.load(filehandle)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(line)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(file)
    - json.loads(data)
    - json.load(file)
    - json.load(file)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(file)
    - json.load(filename)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(filename)
    - json.load(json_output)
    - json.load(filename)
    - json.load(filename)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(filename)
    - json.load(filename)
    - json.load(filename)
    - json.load(filename)
    - json.load(file)
    - json.load(file)
    - json.load(file)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(file)
    - json.load(filename)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.load(scan_file)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(json_output)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.load(filename)
    - json.load(scan)
    - json.load(filename)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(json_output)
    - json.load(json_file)
    - json.load(json_output)
    - json.load(json_output)
    - json.load(json_output)
    - json.load(json_output)
    - json.load(filename)
    - json.load(filename)
    - json.load(file)
    - json.loads(str(line, "utf-8"))
    - json.loads(line)
    - json.load(json_output)
    - json.load(file)
    - json.load(filename)
    - json.dumps(control["rules"], indent=4)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(report)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.load(filename)
    - json.load(file)
    - json.load(file)
    - json.loads(zipdata[vulnerabilityfile].decode("ascii"))
    - json.loads(zipdata[machinefile].decode("ascii"))
    - json.load(scan_file)
    - json.loads(str(tree, "utf-8-sig"))
    - json.loads(tree)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(file)
    - json.loads(line)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(filecontent)
    - json.loads(line)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(json_file)
    - json.load(file)
    - try:\n            data = json.load(file)\n        except json.decoder.JSONDecodeError:\n            return []\n        findings = []\n        for result in data.get("results", []):\n            # Extr...
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(scan_file)
    - json.load(file)
    - json.load(filename)
    - json.load(scan)
    - json.load(file)
    - json.load(filename)
    - json.load(filename)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.load(json_output)
    - json.dumps(vulnerability, indent=4, sort_keys=True)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.load(scan_file)
    - json.load(json_output)
    - json.load(json_output)
    - json.load(filehandle)
    - json.load(handle)
    - json.load(file)
    - json.loads(raw_data)
    - json.loads(raw_data)
    - json.load(filename)
    - json.dumps(item["extra"]["fix_regex"])
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(file)
    - json.loads(files[dictkey].decode("ascii"))
    - json.load(json_output)
    - json.load(filename)
    - json.loads(str(tree, "utf-8"))
    - json.loads(tree)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.load(json_output)
    - json.loads(str(scan_data, "utf-8"))
    - json.loads(scan_data)
    - json.load(filename)
    - json.load(filename)
    - json.load(filename)
    - json.load(file)
    - json.load(file)
    - json.loads(str(scan_data, "utf-8"))
    - json.loads(scan_data)
    - json.loads(str(scan_data, "utf-8"))
    - json.loads(scan_data)
    - json.loads(str(dict_strs[0], "utf-8"))
    - json.loads(dict_strs[0])
    - json.loads(str(line, "utf-8"))
    - json.loads(line)
    - json.loads(str(line, "utf-8"))
    - json.loads(line)
    - json.load(filename)
    - json.load(file)
    - json.loads(str(data, "utf-8"))
    - json.loads(data)
    - json.loads(cwe_node)
    - json.load(json_output)
    - json.load(file)
    - json.load(file)
    - json.load(filename)
    - json.load(file)
    - json.load(file)
    - json.loads(tags)
    - json.loads(scan_data.decode("utf-8"))
    - json.loads(scan_data)
    - json.loads(scan_data.decode("utf-8"))
    - json.loads(scan_data)
    - json.loads(scan_data.decode("utf-8"))
    - json.loads(scan_data)
    - json.load(file)
    - json.loads(line)
    - json.loads(line)
    - json.loads(lines)

watson:
  watson.search aliased as watson:
    - watson.register(self.get_model("Product"), fields=get_model_fields_with_extra(self.get_model("Product"), ("id", "prod_type__name")), store=("prod_type__name", ))
    - watson.register(self.get_model("Test"), fields=get_model_fields_with_extra(self.get_model("Test"), ("id", "engagement__product__name")), store=("engagement__product__name", ))
    - watson.register(self.get_model("Finding"), fields=get_model_fields_with_extra(self.get_model("Finding"), ("id", "url", "unique_id_from_tool", "test__engagement__product__name", "jira_issue__jira_key")...
    - watson.register(self.get_model("Finding_Template"))
    - watson.register(self.get_model("Endpoint"), store=("product__name", ))
    - watson.register(self.get_model("Engagement"), fields=get_model_fields_with_extra(self.get_model("Engagement"), ("id", "product__name")), store=("product__name", ))
    - watson.register(self.get_model("App_Analysis"))
    - watson.register(self.get_model("Vulnerability_Id"), store=("finding__test__engagement__product__name", ))
    - watson.filter(finding_templates, keywords_query)
    - finding_templates.filter(id__in=[watson.id for watson in watson_results])
    - finding_templates.filter(id__in=[watson.id for watson in watson_results])
    - watson.filter(tests, keywords_query)
    - tests.filter(id__in=[watson.id for watson in watson_results])
    - tests.filter(id__in=[watson.id for watson in watson_results])
    - watson.filter(engagements, keywords_query)
    - engagements.filter(id__in=[watson.id for watson in watson_results])
    - engagements.filter(id__in=[watson.id for watson in watson_results])
    - watson.filter(products, keywords_query)
    - products.filter(id__in=[watson.id for watson in watson_results])
    - products.filter(id__in=[watson.id for watson in watson_results])
    - watson.filter(vulnerability_ids, keywords_query)
    - vulnerability_ids.filter(id__in=[watson.id for watson in watson_results])
    - vulnerability_ids.filter(id__in=[watson.id for watson in watson_results])
    - watson.search(keywords_query, models=(\n                    authorized_findings, authorized_tests, authorized_engagements,\n                    authorized_products, authorized_endpoints,\n                    authorized_finding_templates, authorized_vulnerability_ids, authorized_app_analysis))
    - watson.filter(qs, keywords_query)
    - qs.filter(id__in=[watson.id for watson in watson_results])
    - qs.filter(id__in=[watson.id for watson in watson_results])

github:
  github.Github:
    - Github(github_conf.api_key)
    - Github(github_conf.api_key)
    - Github(github_conf.api_key)
    - Github(github_conf.api_key)
    - Github(api_key)
    - Github(github_pkey.git_conf.api_key)

pprint:
  pprint.pformat aliased as pp:
    - pp(kwargs)
    - pp(kwargs)
  pprint.pformat:
    - pformat(a_dict)

split_settings:
  split_settings.tools.include:
    - include(\n    "settings.dist.py",\n    optional("local_settings.py"),\n)
  split_settings.tools.optional:
    - optional("local_settings.py")

packageurl:
  packageurl.PackageURL:
    - PackageURL.from_string(id)

prettytable:
  prettytable.PrettyTable:
    - PrettyTable(["Risk", "Count"])
    - PrettyTable(["Risk", "Description"])

zipfile:
  zipfile:
    - zipfile.is_zipfile(str(report))
    - zipfile.ZipFile(str(report))
    - zipfile.is_zipfile(str(report))
    - zipfile.ZipFile(str(report))
    - zipfile.ZipFile(filename.name, "r")
    - zipfile.ZipFile(filename, "r")
    - zipfile.ZipFile(file.name, "r")
    - zipfile.ZipFile(file, "r")
    - zipfile.ZipFile(file.name, "r")
    - zipfile.ZipFile(file, "r")

logging:
  logging:
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo")
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger("dojo.specific-loggers.deduplication")
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
    - logging.getLogger(__name__)
  logging.config.dictConfig:
    - dictConfig(settings.LOGGING)

base64:
  base64:
    - base64.b64decode(b64request, validate=True)
    - base64.b64decode(b64response, validate=True)
    - base64.b64encode(\n                            pair["request"].encode("utf-8"),\n                        )
    - base64.b64encode(\n                            pair["response"].encode("utf-8"),\n                        )
    - base64.b64decode(request_response.burpRequestBase64)
    - base64.b64decode(request_response.burpResponseBase64)
    - base64.b64encode(\n                context["form"].cleaned_data["request"].encode(),\n            )
    - base64.b64encode(\n                context["form"].cleaned_data["response"].encode(),\n            )
    - base64.b64encode(req_resp["req"].encode("utf-8"))
    - base64.b64encode(req_resp["resp"].encode("utf-8"))
    - base64.b64encode(unsaved_request.encode())
    - base64.b64encode(unsaved_response.encode())
    - base64.b64decode(unsaved_file.get("data"))
    - base64.b64encode(b"")
    - base64.b64decode(reqres.burpRequestBase64)
    - base64.b64decode(reqres.burpResponseBase64)
    - base64.b64decode(self.burpRequestBase64)
    - base64.b64decode(self.burpResponseBase64)
    - base64.b64encode(context["form"].cleaned_data["request"].encode())
    - base64.b64encode(context["form"].cleaned_data["response"].encode())
    - base64.b64encode(image_file.file.read())
    - base64.b64encode(context["form"].cleaned_data["request"].encode())
    - base64.b64encode(context["form"].cleaned_data["response"].encode())
    - base64.b64encode(form.cleaned_data.get("request", "").encode("utf-8"))
    - base64.b64encode(form.cleaned_data.get("response", "").encode("utf-8"))
    - base64.b64decode(value)
    - base64.b64decode(value)
    - base64.b64decode(segment["data"])
    - base64.b64decode(unsaved_file.get("data"))
    - base64.b64decode(tag.text)

operator:
  operator:
    - reduce(operator.or_, filters)
    - operator.itemgetter("grouped_date")
    - reduce(operator.or_, q_objects)
    - reduce(operator.or_, filters)
  operator.itemgetter:
    - itemgetter(1)
    - itemgetter(2)
  operator.xor:
    - xor(bool(dismissable_control.is_selected()), bool(dismissable))

importlib:
  importlib:
    - importlib.import_module(mn)
    - importlib.import_module(module_name)
    - importlib.import_module(mn)
  importlib.util.find_spec:
    - find_spec(f"dojo.tools.{module_name}.parser")
  importlib.import_module:
    - import_module(f"dojo.tools.{module_name}.parser")

multiselectfield:
  multiselectfield.MultiSelectField:
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True, help_text=_("Triggered whenever an (re-)import has been done that created/updated/closed findings."))
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=[], blank=True, help_text=_("Triggered whenever an (re-)import has been done (even if that created/updated/closed no findings)."))
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True, verbose_name=_("JIRA problems"), help_text=_("JIRA sync happens in the background, errors will be shown as notifications/alerts so make sure to subscribe"))
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)
