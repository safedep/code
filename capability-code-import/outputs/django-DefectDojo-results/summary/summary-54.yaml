
django:
  django.db.models.When:
    - When(\n                                severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1))
    - When(\n                            severity__in=("Critical", "High", "Medium", "Low"),\n                            then=Value(1))
    - When(\n                                severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1))
  django.db.models.functions.Now:
    - Now()
  django.conf.urls.include:
    - include(v2_api.urls)
    - include(ur)
    - include("django_prometheus.urls")
    - include("djangosaml2.urls")
    - include("social_django.urls", namespace="social")
  django.contrib.auth.forms.AuthenticationForm:
    - authentication_form = AuthenticationForm
    - DojoLoginView.as_view(template_name="dojo/login.html", authentication_form=AuthenticationForm)
  django.conf.settings.QUALYS_WAS_WEAKNESS_IS_VULN:
    - QUALYS_WAS_WEAKNESS_IS_VULN = False
    - def get_findings(\n        self, file, test, enable_weakness=QUALYS_WAS_WEAKNESS_IS_VULN,\n    ):\n        return qualys_webapp_parser(\n            file, test, QUALYS_WAS_UNIQUE_ID, enable_weakness,\n        )
  django.contrib.auth.views.LoginView:
    - class DojoLoginView(LoginView):\n    template_name = "dojo/login.html"\n    authentication_form = AuthenticationForm\n\n    def form_valid(self, form):\n        last_login = None\n        with context...
  django.apps.AppConfig:
    - class DojoAppConfig(AppConfig):\n    name = "dojo"\n    verbose_name = "Defect Dojo"\n\n    def ready(self):\n        # we need to initializer waston here because in models.py is to early if we want a...
  django.db.models.OuterRef:
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("endpoint__product__prod_type_id")
    - OuterRef("endpoint__product_id")
    - OuterRef("endpoint__product__prod_type_id")
    - OuterRef("endpoint__product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("test__engagement__product__prod_type_id")
    - OuterRef("test__engagement__product_id")
    - OuterRef("test__engagement__product__prod_type_id")
    - OuterRef("test__engagement__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("pk")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("finding_group__test__engagement__product__prod_type_id")
    - OuterRef("finding_group__test__engagement__product_id")
    - OuterRef("finding_group__test__engagement__product__prod_type_id")
    - OuterRef("finding_group__test__engagement__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("prod_type_id")
    - OuterRef("pk")
    - OuterRef("prod_type_id")
    - OuterRef("pk")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("endpoint__product__prod_type_id")
    - OuterRef("endpoint__product_id")
    - OuterRef("endpoint__product__prod_type_id")
    - OuterRef("endpoint__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("finding__test__engagement__product__prod_type_id")
    - OuterRef("finding__test__engagement__product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("engagement_id")
    - OuterRef("pk")
    - OuterRef("pk")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("engagement__product__prod_type_id")
    - OuterRef("engagement__product_id")
    - OuterRef("test__engagement__product__prod_type_id")
    - OuterRef("test__engagement__product_id")
    - OuterRef("test__engagement__product__prod_type_id")
    - OuterRef("test__engagement__product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
    - OuterRef("product__prod_type_id")
    - OuterRef("product_id")
  django.core.serializers:
    - serializers.serialize("json", Finding_Template.objects.all())
    - serializers.serialize("json", Alerts.objects.filter(user_id=request.user)[:int(limit)])
    - serializers.serialize("json", Alerts.objects.filter(user_id=request.user))
  django.db.models.Case:
    - Case(\n                When(Q(**{metrics_type.closed_lookup: True}), then=Value(1)),\n                output_field=IntegerField(), default=0)
    - Case(When(age__lte=30, then=Value(1)))
    - Case(When(age__range=[31, 60], then=Value(1)))
    - Case(When(age__range=[61, 90], then=Value(1)))
    - Case(When(age__gt=90, then=Value(1)))
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                              then=Value(1)),\n                         output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                              then=Value(1)),\n                         output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
    - Case(When(**{stats_field: True}, then=1))
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Critical",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="High",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Medium",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Low",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Info",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Critical",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="High",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Medium",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Low",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Info",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity__in=("Critical", "High", "Medium", "Low"),\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Critical",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="High",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Medium",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Low",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(When(severity="Info",\n                          then=Value(1)),\n                     output_field=IntegerField())
    - Case(\n                        When(\n                            severity__in=("Critical", "High", "Medium", "Low"),\n                            then=Value(1)),\n                        output_field=IntegerField())
    - Case(\n                            When(\n                                severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
    - Case(\n                        When(\n                            severity__in=("Critical", "High", "Medium", "Low"),\n                            then=Value(1)),\n                        output_field=IntegerField())
    - Case(\n                            When(\n                                severity__in=("Critical", "High", "Medium", "Low"),\n                                then=Value(1)),\n                            output_field=IntegerField())
  django.core.validators.MinValueValidator:
    - MinValueValidator(0.0)
    - MinValueValidator(0.0)
    - MinValueValidator(0.0)
  django.core.cache.backends.locmem.LocMemCache:
    - class RequestCache(LocMemCache):\n\n    """\n    RequestCache is a customized LocMemCache which stores its data cache as an instance attribute, rather than\n    a global. It's designed to live only as...
  django.core.paginator.Paginator:
    - Paginator(items, size)
    - Paginator(self.findings, 25)
  django.core.exceptions.ValidationError:
    - isinstance(exc, ValidationError)
    - serializers.ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg, code="invalid")
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(str(e))
    - ValidationError(str(e))
    - serializers.ValidationError(msg)
    - ValidationError(str(e))
    - serializers.ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - serializers.ValidationError(msg)
    - serializers.ValidationError(msg)
    - engagement = self.get_object()\n        try:\n\n            if engagement.has_jira_issue:\n                jira_helper.update_epic(engagement, **request.data)\n                response = Response(\n  ...
    - name = metadata_data.validated_data["name"]\n            value = metadata_data.validated_data["value"]\n\n            metadata = DojoMeta(finding=finding, name=name, value=value)\n            try:\n  ...
    - ValidationError(str(ex))
    - ValidationError(str(ex))
    - ValidationError(msg)
    - ValidationError(str(e))
    - ValidationError(str(e))
    - try:\n                    validate_ipv46_address(endpoint.host)  # is old host valid IPv4/6?\n                except ValidationError:\n                    try:\n                        if "://" in end...
    - try:\n                        if "://" in endpoint.host:  # is the old host full uri?\n                            parts = Endpoint.from_uri(endpoint.host)\n                            # can raise exc...
    - endpoint_html_log = {\n            "view": reverse("view_endpoint", args=[endpoint.pk]),\n            "edit": reverse("edit_endpoint", args=[endpoint.pk]),\n            "delete": reverse("delete_endpo...
    - try:\n            # is it full uri?\n            # 1. from_uri validate URI format + split to components\n            # 2. from_uri parse any '//localhost', '//127.0.0.1:80', '//foo.bar/path' correctl...
    - ValidationError(f"Invalid endpoint {endpoint}: {ve}")
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(\n                    "Can not set a finding as inactive without adding all mandatory notes",\n                    code="inactive_without_mandatory_notes",\n                )
    - ValidationError(\n                    "Can not set a finding as false positive without adding all mandatory notes",\n                    code="false_p_without_mandatory_notes",\n                )
    - ValidationError(\n                    "Can not set a finding as out of scope without adding all mandatory notes",\n                    code="out_of_scope_without_mandatory_notes",\n                )
    - super().full_clean()\n        try:\n            self.instance.validate_unique()\n        except ValidationError:\n            msg = "A metadata entry with the same name exists already for this object."\n            self.add_error("name", msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - forms.ValidationError(errors)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - opts = self.instance._meta\n            try:\n                opts.get_field("mitigated").save_form_data(self.instance, self.cleaned_data.get("mitigated"))\n                opts.get_field("mitigated_b...
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg, code="invalid")
    - forms.ValidationError(msg, code="invalid")
    - forms.ValidationError(errors)
    - try:\n                    opts.get_field("mitigated").save_form_data(self.instance, self.cleaned_data.get("mitigated"))\n                    opts.get_field("mitigated_by").save_form_data(self.instance...
    - ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - from django.core.validators import URLValidator\n        form_data = self.cleaned_data\n\n        try:\n            if form_data["url"] is not None:\n                url_validator = URLValidator(schem...
    - forms.ValidationError(msg, code="invalid")
    - from django.core.validators import URLValidator\n        form_data = self.cleaned_data\n\n        try:\n            if form_data["url"] is not None:\n                url_validator = URLValidator(schem...
    - forms.ValidationError(msg, code="invalid")
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(error_message, code=error_code)
    - ValidationError(error_message, code=error_code)
    - ValidationError(error_message, code="not_active_or_verified")
    - ValidationError("JIRA issue " + jira_issue_key_new + " does not exist or cannot be retrieved")
    - ValidationError("JIRA issue " + jira_issue_key_new + " already linked to " + reverse("view_finding", args=(jira_issues[0].finding_id,)))
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(e)
    - ValidationError(e)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - try:\n                endpoint.clean()\n            except ValidationError as e:\n                logger.warning(f"DefectDojo is storing broken endpoint because cleaning wasn't successful: {e}")
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(msg)
    - ValidationError(f'Protocol "{self.protocol}" has invalid format')
    - ValidationError(f'Userinfo "{self.userinfo}" has invalid format')
    - try:\n                    validate_ipv46_address(self.host)\n                except ValidationError:\n                    errors.append(ValidationError(f'Host "{self.host}" has invalid format'))
    - ValidationError(f'Host "{self.host}" has invalid format')
    - ValidationError("Host must not be empty")
    - ValidationError(f'Port "{self.port}" has invalid format - out of range')
    - ValidationError(f'Port "{self.port}" has invalid format - it is not a number')
    - ValidationError(errors)
    - ValidationError(msg)
    - ValidationError(msg)
