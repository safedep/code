
django:
  django.forms:
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea)
    - forms.ChoiceField(\n        choices=SEVERITY_CHOICES,\n        error_messages={\n            "required": "Select valid choice: In Progress, On Hold, Completed",\n            "invalid_choice": EFFORT_FOR_FIXING_INVALID_CHOICE})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ModelMultipleChoiceField(Endpoint.objects.none(), required=False, label="Systems / Endpoints")
    - forms.CharField(max_length=5000, required=False, label="Endpoints to add",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n   ...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.CharField(max_length=99, required=False)
    - forms.ChoiceField(\n        required=False,\n        choices=EFFORT_FOR_FIXING_CHOICES,\n        error_messages={\n            "invalid_choice": EFFORT_FOR_FIXING_INVALID_CHOICE})
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - class AdHocFindingForm(forms.ModelForm):\n    title = forms.CharField(max_length=1000)\n    date = forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "da...
    - forms.CharField(max_length=1000)
    - forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.IntegerField(required=False)
    - forms.CharField(max_length=117, required=False, widget=forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea)
    - forms.ChoiceField(\n        choices=SEVERITY_CHOICES,\n        error_messages={\n            "required": "Select valid choice: In Progress, On Hold, Completed",\n            "invalid_choice": EFFORT_FOR_FIXING_INVALID_CHOICE})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ModelMultipleChoiceField(queryset=Endpoint.objects.none(), required=False, label="Systems / Endpoints")
    - forms.CharField(max_length=5000, required=False, label="Endpoints to add",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n   ...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.CharField(max_length=99, required=False)
    - forms.ChoiceField(\n        required=False,\n        choices=EFFORT_FOR_FIXING_CHOICES,\n        error_messages={\n            "invalid_choice": EFFORT_FOR_FIXING_INVALID_CHOICE})
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - class PromoteFindingForm(forms.ModelForm):\n    title = forms.CharField(max_length=1000)\n    date = forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "...
    - forms.CharField(max_length=1000)
    - forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.IntegerField(required=False)
    - forms.CharField(max_length=117, required=False, widget=forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea)
    - forms.ChoiceField(\n        choices=SEVERITY_CHOICES,\n        error_messages={\n            "required": "Select valid choice: In Progress, On Hold, Completed",\n            "invalid_choice": "Select valid choice: Critical,High,Medium,Low"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ModelMultipleChoiceField(Endpoint.objects.none(), required=False, label="Systems / Endpoints")
    - forms.CharField(max_length=5000, required=False, label="Endpoints to add",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n   ...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ValidationError(errors)
    - class FindingForm(forms.ModelForm):\n    title = forms.CharField(max_length=1000)\n    group = forms.ModelChoiceField(required=False, queryset=Finding_Group.objects.none(), help_text="The Finding Grou...
    - forms.CharField(max_length=1000)
    - forms.ModelChoiceField(required=False, queryset=Finding_Group.objects.none(), help_text="The Finding Group to which this finding belongs, leave empty to remove the finding from the group. Groups can only be created via Bulk Edit for now.")
    - forms.DateField(required=True,\n                           widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.IntegerField(required=False)
    - forms.CharField(max_length=117, required=False, widget=forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "cvsscalculator", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
    - forms.FloatField(required=False, max_value=10.0, min_value=0.0)
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea)
    - forms.ChoiceField(\n        choices=SEVERITY_CHOICES,\n        error_messages={\n            "required": "Select valid choice: In Progress, On Hold, Completed",\n            "invalid_choice": "Select valid choice: Critical,High,Medium,Low"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ModelMultipleChoiceField(queryset=Endpoint.objects.none(), required=False, label="Systems / Endpoints")
    - forms.CharField(max_length=5000, required=False, label="Endpoints to add",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n   ...
    - forms.widgets.Textarea(attrs={"rows": "3", "cols": "400"})
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.DateField(required=False, help_text="Date and time when the flaw has been fixed", widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.ModelChoiceField(required=False, queryset=Dojo_User.objects.none())
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.DateField(widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}), required=False)
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.CharField(max_length=99, required=False)
    - forms.ChoiceField(\n        required=False,\n        choices=EFFORT_FOR_FIXING_CHOICES,\n        error_messages={\n            "invalid_choice": EFFORT_FOR_FIXING_INVALID_CHOICE})
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - forms.ValidationError(errors)
    - opts = self.instance._meta\n            try:\n                opts.get_field("mitigated").save_form_data(self.instance, self.cleaned_data.get("mitigated"))\n                opts.get_field("mitigated_b...
    - class StubFindingForm(forms.ModelForm):\n    title = forms.CharField(required=True, max_length=1000)\n\n    class Meta:\n        model = Stub_Finding\n        order = ("title",)\n        exclude = (\n...
    - forms.CharField(required=True, max_length=1000)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - class ApplyFindingTemplateForm(forms.Form):\n\n    title = forms.CharField(max_length=1000, required=True)\n\n    cwe = forms.IntegerField(label="CWE", required=False)\n    vulnerability_ids = vulnera...
    - forms.CharField(max_length=1000, required=True)
    - forms.IntegerField(label="CWE", required=False)
    - forms.CharField(label="CVSSv3", max_length=117, required=False, widget=forms.TextInput(attrs={"class": "btn btn-secondary dropdown-toggle", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "btn btn-secondary dropdown-toggle", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
    - forms.ChoiceField(required=False, choices=SEVERITY_CHOICES, error_messages={"required": "Select valid choice: In Progress, On Hold, Completed", "invalid_choice": "Select valid choice: Critical,High,Medium,Low"})
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.CharField(widget=forms.Textarea, required=False)
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - class FindingTemplateForm(forms.ModelForm):\n    apply_to_findings = forms.BooleanField(required=False, help_text="Apply template to all findings that match this CWE. (Update will overwrite mitigation...
    - forms.BooleanField(required=False, help_text="Apply template to all findings that match this CWE. (Update will overwrite mitigation, impact and references for any active, verified findings.)")
    - forms.CharField(max_length=1000, required=True)
    - forms.IntegerField(label="CWE", required=False)
    - forms.CharField(max_length=117, required=False, widget=forms.TextInput(attrs={"class": "btn btn-secondary dropdown-toggle", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"}))
    - forms.TextInput(attrs={"class": "btn btn-secondary dropdown-toggle", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false"})
    - forms.ChoiceField(\n        required=False,\n        choices=SEVERITY_CHOICES,\n        error_messages={\n            "required": "Select valid choice: In Progress, On Hold, Completed",\n            "invalid_choice": "Select valid choice: Critical,High,Medium,Low"})
    - class DeleteFindingTemplateForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Finding_Template\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class FindingBulkUpdateForm(forms.ModelForm):\n    status = forms.BooleanField(required=False)\n    risk_acceptance = forms.BooleanField(required=False)\n    risk_accept = forms.BooleanField(required=...
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.DateField(required=False, widget=forms.DateInput(attrs={"class": "datepicker"}))
    - forms.DateInput(attrs={"class": "datepicker"})
    - forms.DateField(required=False, widget=forms.DateInput(attrs={"class": "datepicker"}))
    - forms.DateInput(attrs={"class": "datepicker"})
    - forms.CharField(required=False, max_length=99, widget=forms.TextInput(attrs={"class": "form-control"}))
    - forms.TextInput(attrs={"class": "form-control"})
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.CharField(required=False)
    - forms.BooleanField(required=False)
    - forms.CharField(required=False)
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.CharField(required=False)
    - forms.BooleanField(required=False)
    - forms.BooleanField(required=False)
    - forms.CharField(required=False, max_length=1024, widget=forms.TextInput(attrs={"class": "form-control"}))
    - forms.TextInput(attrs={"class": "form-control"})
    - forms.ValidationError(msg)
    - forms.ValidationError(msg)
    - class EditEndpointForm(forms.ModelForm):\n    class Meta:\n        model = Endpoint\n        exclude = ["product", "inherited_tags"]\n\n    def __init__(self, *args, **kwargs):\n        self.product =...
    - forms.ValidationError(msg, code="invalid")
    - class AddEndpointForm(forms.Form):\n    endpoint = forms.CharField(max_length=5000, required=True, label="Endpoint(s)",\n                               help_text="The IP address, host name or full URL...
    - forms.CharField(max_length=5000, required=True, label="Endpoint(s)",\n                               help_text="The IP address, host name or full URL. You may enter one endpoint per line. "\n         ...
    - forms.widgets.Textarea(attrs={"rows": "15", "cols": "400"})
    - forms.CharField(required=True,\n                              widget=forms.widgets.HiddenInput(), help_text="The product this endpoint should be "\n                                                                            "associated with.")
    - forms.widgets.HiddenInput()
    - forms.ModelChoiceField(queryset=get_authorized_products(Permissions.Endpoint_Add))
    - forms.ValidationError(msg, code="invalid")
    - forms.ValidationError(errors)
    - class DeleteEndpointForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Endpoint\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class NoteForm(forms.ModelForm):\n    entry = forms.CharField(max_length=2400, widget=forms.Textarea(attrs={"rows": 4, "cols": 15}),\n                            label="Notes:")\n\n    class Meta:\n  ...
    - forms.CharField(max_length=2400, widget=forms.Textarea(attrs={"rows": 4, "cols": 15}),\n                            label="Notes:")
    - forms.Textarea(attrs={"rows": 4, "cols": 15})
    - forms.ModelChoiceField(queryset=queryset, label="Note Type", required=True)
    - class DeleteNoteForm(forms.ModelForm):\n    id = forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())\n\n    class Meta:\n        model = Notes\n        fields = ["id"]
    - forms.IntegerField(required=True,\n                            widget=forms.widgets.HiddenInput())
    - forms.widgets.HiddenInput()
    - class CloseFindingForm(forms.ModelForm):\n    entry = forms.CharField(\n        required=True, max_length=2400,\n        widget=forms.Textarea, label="Notes:",\n        error_messages={"required": ("T...
    - forms.CharField(\n        required=True, max_length=2400,\n        widget=forms.Textarea, label="Notes:",\n        error_messages={"required": ("The reason for closing a finding is "\n                ...
    - forms.CharField(\n        required=True, max_length=2400,\n        widget=forms.Textarea, label="Notes:",\n        error_messages={"required": ("The reason for closing a finding is "\n                ...
    - forms.DateField(required=False, help_text="Date and time when the flaw has been fixed", widget=forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"}))
    - forms.TextInput(attrs={"class": "datepicker", "autocomplete": "off"})
    - forms.ModelChoiceField(required=False, queryset=Dojo_User.objects.none())
    - forms.BooleanField(initial=False, required=False, label="False Positive")
    - forms.BooleanField(initial=False, required=False, label="Out of Scope")
    - forms.BooleanField(initial=False, required=False, label="Duplicate")
    - forms.HiddenInput()
    - forms.ModelChoiceField(queryset=queryset, label="Note Type", required=True)
    - try:\n                    opts.get_field("mitigated").save_form_data(self.instance, self.cleaned_data.get("mitigated"))\n                    opts.get_field("mitigated_by").save_form_data(self.instance...
    - class EditPlannedRemediationDateFindingForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        finding = None\n        if "finding" in kwargs:\n            finding = kwargs.pop("find...
    - forms.DateInput(attrs={"class": "datepicker"})
    - class DefectFindingForm(forms.ModelForm):\n    CLOSE_CHOICES = (("Close Finding", "Close Finding"), ("Not Fixed", "Not Fixed"))\n    defect_choice = forms.ChoiceField(required=True, choices=CLOSE_CHOI...
    - forms.ChoiceField(required=True, choices=CLOSE_CHOICES)
