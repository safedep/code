
rest_framework:
  rest_framework.response.Response:
    - Response(\n                "Users may not delete themselves",\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(serializer.data)
    - Response(serialized_answered_survey.data)
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(status=status.HTTP_201_CREATED, data=result.data)
    - Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    - Response(status=201, data=result.data)
  rest_framework.decorators.action:
    - action(detail=True, methods=["get"], filter_backends=[], suffix="List")
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(detail=True, methods=["post"])
    - action(detail=True, methods=["post"])
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(detail=True, methods=["get", "post"])
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - action(detail=True, methods=["get", "post"])
    - action(\n        detail=True,\n        methods=["get"],\n        url_path=r"files/download/(?P<file_id>\d+)",\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(detail=True, methods=["get"])
    - action(detail=True, methods=["post"])
    - action(detail=True, methods=["get", "post"])
    - action(detail=True, methods=["get", "post"])
    - action(detail=True, methods=["get", "post"])
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - action(\n        detail=True,\n        methods=["get"],\n        url_path=r"files/download/(?P<file_id>\d+)",\n    )
    - action(detail=True, methods=["patch"])
    - action(detail=True, methods=["put", "patch"])
    - action(\n        detail=True,\n        methods=["get"],\n        url_path=r"duplicate",\n        filter_backends=[],\n        pagination_class=None,\n    )
    - action(detail=True, methods=["post"], url_path=r"duplicate/reset")
    - action(\n        detail=True, methods=["post"], url_path=r"original/(?P<new_fid>\d+)",\n    )
    - action(\n        detail=False, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(\n        detail=True,\n        methods=["post", "put", "delete", "get"],\n        filter_backends=[],\n        pagination_class=None,\n    )
    - action(\n        detail=False, methods=["post", "patch"], pagination_class=None,\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - if self.action == "accept_risks":\n                return ra_api.AcceptedRiskSerializer\n            return serializers.TestCreateSerializer
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(detail=True, methods=["get", "post"])
    - action(\n        detail=True, methods=["get", "post"], parser_classes=(MultiPartParser,),\n    )
    - action(\n        detail=True,\n        methods=["get"],\n        url_path=r"files/download/(?P<file_id>\d+)",\n    )
    - action(\n        detail=True, methods=["get"], filter_backends=[], pagination_class=None,\n    )
    - action(\n        detail=True, methods=["post"], url_path=r"link_engagement/(?P<engagement_id>\d+)",\n    )
    - action(methods=["post"], detail=True, permission_classes=[IsAdminUser], serializer_class=AcceptedRiskSerializer,\n            filter_backends=[], pagination_class=None)
    - action(methods=["post"], detail=False, permission_classes=[IsAdminUser], serializer_class=AcceptedRiskSerializer)
  rest_framework.authtoken.models.Token:
    - isinstance(x, Token)
    - Token.objects.get(user=request.user)
    - Token.objects.create(user=request.user)
    - try:\n                api_key = Token.objects.get(user=request.user)\n                api_key.delete()\n                api_key = Token.objects.create(user=request.user)\n            except Token.Does...
    - Token.objects.create(user=request.user)
    - Token.objects.get(user=request.user)
    - try:\n            api_key = Token.objects.get(user=request.user)\n        except Token.DoesNotExist:\n            api_key = Token.objects.create(user=request.user)
    - Token.objects.create(user=request.user)
  rest_framework.fields.DictField:
    - DictField(child=serializers.CharField())
  rest_framework.permissions.IsAuthenticated:
    - permission_classes = (IsAuthenticated,)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoGroupMemberPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEndpointPermission,\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEndpointStatusPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEngagementPermission,\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasRiskAcceptancePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasAppAnalysisPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasCredentialPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasFindingPermission,\n    )
    - action(\n        detail=False, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasJiraIssuePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasJiraProductPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductAPIScanConfigurationPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasDojoMetaPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductPermission,\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductMemberPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypePermission,\n    )
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypeMemberPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasProductTypeGroupPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasFindingPermission,\n    )
    - permission_classes = (IsAuthenticated, DjangoModelPermissions)
    - permission_classes = (IsAuthenticated, permissions.UserHasTestPermission)
    - action(\n        detail=True, methods=["post"], permission_classes=[IsAuthenticated],\n    )
    - permission_classes = (IsAuthenticated, DjangoModelPermissions)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasTestImportPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasToolProductSettingsPermission,\n    )
    - permission_classes = (IsAuthenticated, DjangoModelPermissions)
    - permission_classes = (IsAuthenticated,)
    - permission_classes = (IsAuthenticated, permissions.UserHasImportPermission)
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasMetaImportPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasLanguagePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasLanguagePermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasReimportPermission,\n    )
    - permission_classes = (\n        IsAuthenticated,\n        permissions.UserHasEngagementPresetPermission,\n    )
    - permission_classes = (IsAuthenticated, DjangoModelPermissions)
    - permission_classes = (IsAuthenticated, DjangoModelPermissions)
  rest_framework.permissions.IsAdminUser:
    - action(methods=["post"], detail=True, permission_classes=[IsAdminUser], serializer_class=AcceptedRiskSerializer,\n            filter_backends=[], pagination_class=None)
    - action(methods=["post"], detail=False, permission_classes=[IsAdminUser], serializer_class=AcceptedRiskSerializer)
  rest_framework.routers.DefaultRouter:
    - DefaultRouter()
  rest_framework.authtoken.views aliased as tokenviews:
    - re_path(\n                f"^{get_system_setting('url_prefix')}api/v2/api-token-auth/",\n                tokenviews.obtain_auth_token,\n                name="api-token-auth",\n            )
  rest_framework.status:
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.DeletePreviewSerializer(many=True),\n        },\n    )
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - Response(response, status=status.HTTP_405_METHOD_NOT_ALLOWED)
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(status=status.HTTP_204_NO_CONTENT)
    - Response(status=status.HTTP_204_NO_CONTENT)
    - extend_schema(\n        request=OpenApiTypes.NONE, responses={status.HTTP_200_OK: ""},\n    )
    - extend_schema(\n        request=OpenApiTypes.NONE, responses={status.HTTP_200_OK: ""},\n    )
    - extend_schema(\n        request=serializers.ReportGenerateOptionSerializer,\n        responses={status.HTTP_200_OK: serializers.ReportGenerateSerializer},\n    )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                report_options.errors, status=status.HTTP_400_BAD_REQUEST,\n            )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.EngagementToNotesSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewNoteOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.NoteSerializer},\n    )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response("Only one instance of this note_type allowed on an engagement.", status=status.HTTP_400_BAD_REQUEST)
    - Response("Only one instance of this note_type allowed on an engagement.", status=status.HTTP_400_BAD_REQUEST)
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.EngagementToFilesSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewFileOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.FileSerializer},\n    )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - Response(serialized_files.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["POST"],\n        request=serializers.EngagementCheckListSerializer,\n        responses={\n            status.HTTP_201_CREATED: serializers.EngagementCheckListSerializer,\n        },\n    )
    - Response(\n                    {\n                        "message": "A completed checklist for this engagement already exists.",\n                    },\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    {\n                        "message": "A completed checklist for this engagement already exists.",\n                    },\n                    status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    check_list.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    check_list.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                serialized_check_list.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_check_list.data, status=status.HTTP_201_CREATED,\n            )
    - Response(result, status=status.HTTP_200_OK)
    - Response(result, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RawFileSerializer,\n        },\n    )
    - Response(\n                {"error": "File ID not associated with Engagement"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - Response(\n                {"error": "File ID not associated with Engagement"},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - extend_schema(\n        request=serializers.EngagementUpdateJiraEpicSerializer,\n        responses={status.HTTP_200_OK: serializers.EngagementUpdateJiraEpicSerializer},\n    )
    - Response(\n                    {"info": "Jira Epic update query sent"},\n                    status=status.HTTP_200_OK,\n                )
    - Response(\n                    {"info": "Jira Epic update query sent"},\n                    status=status.HTTP_200_OK,\n                )
    - Response(\n                    {"info": "Jira Epic create query sent"},\n                    status=status.HTTP_200_OK,\n                )
    - Response(\n                    {"info": "Jira Epic create query sent"},\n                    status=status.HTTP_200_OK,\n                )
    - Response(\n                {"error": "Bad Request!"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - Response(\n                {"error": "Bad Request!"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.RiskAcceptanceProofSerializer,\n        },\n    )
    - Response(\n                {"error": "Proof has not provided to this risk acceptance..."},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - Response(\n                {"error": "Proof has not provided to this risk acceptance..."},\n                status=status.HTTP_404_NOT_FOUND,\n            )
    - FileResponse(\n            file_handle,\n            content_type=f"{mimetypes.guess_type(file_path)}",\n            status=status.HTTP_200_OK,\n        )
    - FileResponse(\n            file_handle,\n            content_type=f"{mimetypes.guess_type(file_path)}",\n            status=status.HTTP_200_OK,\n        )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.FindingCloseSerializer,\n        responses={status.HTTP_200_OK: serializers.FindingCloseSerializer},\n    )
    - Response(\n                    finding_close.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    finding_close.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.TagSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.TagSerializer,\n        responses={status.HTTP_201_CREATED: serializers.TagSerializer},\n    )
    - Response(\n                    new_tags.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_tags.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - extend_schema(\n        methods=["GET"],\n        responses={\n            status.HTTP_200_OK: serializers.BurpRawRequestResponseSerializer,\n        },\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.BurpRawRequestResponseSerializer,\n        responses={\n            status.HTTP_201_CREATED: serializers.BurpRawRequestResponseSerializer,\n        },\n    )
    - Response(\n                    burps.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    burps.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.FindingToNotesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewNoteOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.NoteSerializer},\n    )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_note.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response("Only one instance of this note_type allowed on a finding.", status=status.HTTP_400_BAD_REQUEST)
    - Response("Only one instance of this note_type allowed on a finding.", status=status.HTTP_400_BAD_REQUEST)
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(\n                serialized_note.data, status=status.HTTP_201_CREATED,\n            )
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - Response(serialized_notes.data, status=status.HTTP_200_OK)
    - extend_schema(\n        methods=["GET"],\n        responses={status.HTTP_200_OK: serializers.FindingToFilesSerializer},\n    )
    - extend_schema(\n        methods=["POST"],\n        request=serializers.AddNewFileOptionSerializer,\n        responses={status.HTTP_201_CREATED: serializers.FileSerializer},\n    )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                    new_file.errors, status=status.HTTP_400_BAD_REQUEST,\n                )
    - Response(\n                serialized_file.data, status=status.HTTP_201_CREATED,\n            )
