
django:
  django.http.HttpRequest:
    - def get_credential_form(\n        self,\n        request: HttpRequest,\n        engagement: Engagement,\n    ) -> CredMappingForm:\n        """\n        Return a new instance of a form managing creden...
    - def get_jira_form(\n        self,\n        request: HttpRequest,\n        engagement_or_product: Engagement | Product,\n    ) -> tuple[JIRAImportScanForm | None, bool]:\n        """Returns a JiraImpor...
    - def handle_request(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> tuple[HttpRequest, dict]:\n        """\n ...
    - def handle_request(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> tuple[HttpRequest, dict]:\n        """\n ...
    - def process_form(\n        self,\n        request: HttpRequest,\n        form: ImportScanForm,\n        context: dict,\n    ) -> str | None:\n        """Process the form and manipulate the input in an...
    - def process_jira_form(\n        self,\n        request: HttpRequest,\n        form: JIRAImportScanForm,\n        context: dict,\n    ) -> str | None:\n        """\n        Process the jira form by fir...
    - def process_credentials_form(\n        self,\n        request: HttpRequest,\n        form: CredMappingForm,\n        context: dict,\n    ) -> str | None:\n        """Process the credentials form by cr...
    - def get(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> HttpResponse:\n        """Process GET requests for t...
    - def post(\n        self,\n        request: HttpRequest,\n        engagement_id: int | None = None,\n        product_id: int | None = None,\n    ) -> HttpResponse:\n        """Process POST requests for...
    - def filter_findings_by_form(self, request: HttpRequest, findings: QuerySet[Finding]):\n        # Set up the args for the form\n        args = [request.GET, findings]\n        # Set the initial form ar...
    - def get_fully_filtered_findings(self, request: HttpRequest):\n        findings = self.get_filtered_findings()\n        return self.filter_findings_by_form(request, findings)
    - def get_initial_context(self, request: HttpRequest):\n        context = {\n            "filter_name": self.get_filter_name(),\n            "show_product_column": True,\n            "custom_breadcrumb"...
    - def add_breadcrumbs(self, request: HttpRequest, context: dict):\n        # show custom breadcrumb if user has filtered by exactly 1 endpoint\n        if "endpoints" in request.GET:\n            endpoi...
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        # Store the product and engagement ids\n        self.product_id = product_id\n        sel...
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Open"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Verified"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Out of Scope"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "False Positive"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Inactive"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Accepted"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get(self, request: HttpRequest, product_id: int | None = None, engagement_id: int | None = None):\n        self.filter_name = "Closed"\n        self.order_by = "-mitigated"\n        return super().get(request, product_id=product_id, engagement_id=engagement_id)
    - def get_dojo_user(self, request: HttpRequest):\n        user = request.user\n        return get_object_or_404(Dojo_User, id=user.id)
    - def get_test_import_data(self, request: HttpRequest, finding: Finding):\n        test_imports = Test_Import.objects.filter(findings_affected=finding)\n        test_import_filter = TestImportFilter(req...
    - def get_similar_findings(self, request: HttpRequest, finding: Finding):\n        similar_findings_enabled = get_system_setting("enable_similar_findings", True)\n        if similar_findings_enabled is ...
    - def get_note_form(self, request: HttpRequest):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial form args\n        kwargs = {}\n\n        return NoteForm(*args, **kwargs)
    - def get_typed_note_form(self, request: HttpRequest, context: dict):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initia...
    - def get_form(self, request: HttpRequest, context: dict):\n        return (\n            self.get_typed_note_form(request, context)\n            if context.get("note_type_activation")\n            else self.get_note_form(request)\n        )
    - def process_form(self, request: HttpRequest, finding: Finding, context: dict):\n        if context["form"].is_valid():\n            # Create the note object\n            new_note = context["form"].sav...
    - def get_initial_context(self, request: HttpRequest, finding: Finding, user: Dojo_User):\n        notes = finding.notes.all()\n        note_type_activation = Note_Type.objects.filter(is_active=True).co...
    - def get(self, request: HttpRequest, finding_id: int):\n        # Get the initial objects\n        finding = self.get_finding(finding_id)\n        user = self.get_dojo_user(request)\n        # Make sur...
    - def post(self, request: HttpRequest, finding_id):\n        # Get the initial objects\n        finding = self.get_finding(finding_id)\n        user = self.get_dojo_user(request)\n        # Make sure th...
    - def get_finding_form(self, request: HttpRequest, finding: Finding):\n        # Get the burp request if available\n        req_resp = self.get_request_response(finding)\n        # Set up the args for t...
    - def get_jira_form(self, request: HttpRequest, finding: Finding, finding_form: FindingForm = None):\n        # Determine if jira should be used\n        if (jira_project := jira_helper.get_jira_project...
    - def get_github_form(self, request: HttpRequest, finding: Finding):\n        # Determine if github should be used\n        if get_system_setting("enable_github"):\n            # Ensure there is a githu...
    - def get_initial_context(self, request: HttpRequest, finding: Finding):\n        # Get the finding form first since it is used in another place\n        finding_form = self.get_finding_form(request, fi...
    - def validate_status_change(self, request: HttpRequest, finding: Finding, context: dict):\n        # If the finding is already not active, skip this extra validation\n        if not finding.active:\n  ...
    - def process_mitigated_data(self, request: HttpRequest, finding: Finding, context: dict):\n        # If active is not checked and CAN_EDIT_MITIGATED_DATA,\n        # mitigate the finding and the associ...
    - def process_finding_form(self, request: HttpRequest, finding: Finding, context: dict):\n        if context["form"].is_valid():\n            # process some of the easy stuff first\n            new_find...
    - def process_jira_form(self, request: HttpRequest, finding: Finding, context: dict):\n        # Capture case if the jira not being enabled\n        if context["jform"] is None:\n            return requ...
    - def process_github_form(self, request: HttpRequest, finding: Finding, context: dict, old_status: str):\n        if "githubform-push_to_github" not in request.POST:\n            return request, True\n\...
    - def process_forms(self, request: HttpRequest, finding: Finding, context: dict):\n        form_success_list = []\n        # Set vars for the completed forms\n        old_status = finding.status()\n    ...
    - def get(self, request: HttpRequest, finding_id: int):\n        # Get the initial objects\n        finding = self.get_finding(finding_id)\n        # Make sure the user is authorized\n        user_has_p...
    - def post(self, request: HttpRequest, finding_id: int):\n        # Get the initial objects\n        finding = self.get_finding(finding_id)\n        # Make sure the user is authorized\n        user_has_...
    - def process_form(self, request: HttpRequest, finding: Finding, context: dict):\n        if context["form"].is_valid():\n            product = finding.test.engagement.product\n            finding.delet...
    - def post(self, request: HttpRequest, finding_id):\n        # Get the initial objects\n        finding = self.get_finding(finding_id)\n        # Make sure the user is authorized\n        user_has_permi...
    - def get_initial_context(self, request: HttpRequest, groups: QuerySet[Dojo_Group]):\n        filtered_groups = GroupFilter(request.GET, queryset=groups)\n        return {\n            "name": "All Grou...
    - def get(self, request: HttpRequest):\n        # quick permission check\n        if not user_has_configuration_permission(request.user, "auth.view_group"):\n            raise PermissionDenied\n        ...
    - def get(self, request: HttpRequest, group_id: int):\n        # Fetch the group\n        group = self.get_group(group_id)\n        # quick permission check\n        if not user_has_configuration_permis...
    - def get_group_form(self, request: HttpRequest, group: Dojo_Group):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial...
    - def get_global_role_form(self, request: HttpRequest, global_role: Global_Role):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Se...
    - def get_initial_context(self, request: HttpRequest, group: Dojo_Group, global_role: Global_Role):\n        return {\n            "form": self.get_group_form(request, group),\n            "global_role_...
    - def process_forms(self, request: HttpRequest, group: Dojo_Group, context: dict):\n        # Validate the forms\n        if context["form"].is_valid() and context["global_role_form"].is_valid():\n     ...
    - def get(self, request: HttpRequest, group_id: int):\n        # Fetch the group and global role\n        group = self.get_group(group_id)\n        global_role = self.get_global_role(group)\n        # q...
    - def post(self, request: HttpRequest, group_id: int):\n        # Fetch the group and global role\n        group = self.get_group(group_id)\n        global_role = self.get_global_role(group)\n        # ...
    - def get_group_form(self, request: HttpRequest, group: Dojo_Group):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial...
    - def get_initial_context(self, request: HttpRequest, group: Dojo_Group):\n        # Add the related objects to the delete page\n        rels = ["Previewing the relationships has been disabled.", ""]\n ...
    - def process_forms(self, request: HttpRequest, group: Dojo_Group, context: dict):\n        # Validate the forms\n        if context["form"].is_valid():\n            try:\n                group.delete()...
    - def get(self, request: HttpRequest, group_id: int):\n        # Fetch the group and global role\n        group = self.get_group(group_id)\n        # quick permission check\n        user_has_permission_...
    - def post(self, request: HttpRequest, group_id: int):\n        # Fetch the group and global role\n        group = self.get_group(group_id)\n        # quick permission check\n        user_has_permission...
    - def get_group_form(self, request: HttpRequest):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial form args\n        kwargs = {}\n\n        return DojoGroupForm(*args, **kwargs)
    - def get_global_role_form(self, request: HttpRequest):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the initial form args\n        kwargs = {}\n\n        return GlobalRoleForm(*args, **kwargs)
    - def get_initial_context(self, request: HttpRequest):\n        return {\n            "form": self.get_group_form(request),\n            "global_role_form": self.get_global_role_form(request),\n        }
    - def process_forms(self, request: HttpRequest, context: dict):\n        group = None\n        # Validate the forms\n        if context["form"].is_valid() and context["global_role_form"].is_valid():\n  ...
    - def get(self, request: HttpRequest):\n        # quick permission check\n        if not user_has_configuration_permission(request.user, "auth.add_group"):\n            raise PermissionDenied\n        #...
    - def post(self, request: HttpRequest):\n        # quick permission check\n        if not user_has_configuration_permission(request.user, "auth.add_group"):\n            raise PermissionDenied\n        ...
    - def home(request: HttpRequest) -> HttpResponse:\n    return HttpResponseRedirect(reverse("dashboard"))
    - def dashboard(request: HttpRequest) -> HttpResponse:\n    engagements = get_authorized_engagements(Permissions.Engagement_View).distinct()\n    findings = get_authorized_findings(Permissions.Finding_V...
    - def support(request: HttpRequest) -> HttpResponse:\n    add_breadcrumb(title="Support", top_level=not len(request.GET), request=request)\n    return render(request, "dojo/support.html", {})
    - def finding_queries(\n    prod_type: QuerySet[Product_Type],\n    request: HttpRequest,\n) -> dict[str, Any]:\n    # Get the initial list of findings the user is authorized to see\n    all_authorized_...
    - def endpoint_queries(\n    prod_type: QuerySet[Product_Type],\n    request: HttpRequest,\n) -> dict[str, Any]:\n    endpoints_query = Endpoint_Status.objects.filter(\n        mitigated=False,\n       ...
    - def identify_view(\n    request: HttpRequest,\n) -> str:\n    """\n    Identifies the requested metrics view.\n\n    :param request: The request object\n    :return: A string, either 'Endpoint' or 'Fi...
    - def get_notifications(self, request: HttpRequest):\n        try:\n            notifications = Notifications.objects.get(user=None, product__isnull=True, template=False)\n        except Notifications.D...
    - def check_user_permissions(self, request: HttpRequest):\n        if not request.user.is_superuser:\n            raise PermissionDenied
    - def get_form(self, request: HttpRequest, notifications: Notifications):\n        # Set up the args for the form\n        args = [request.POST] if request.method == "POST" else []\n        # Set the in...
    - def get_initial_context(self, request: HttpRequest, notifications: Notifications, scope: str):\n        return {\n            "form": self.get_form(request, notifications),\n            "scope": scope...
    - def set_breadcrumbs(self, request: HttpRequest):\n        add_breadcrumb(title=_("System notification settings"), top_level=False, request=request)\n        return request
    - def process_form(self, request: HttpRequest, context: dict):\n        if context["form"].is_valid():\n            context["form"].save()\n            messages.add_message(request, messages.SUCCESS, _(...
    - def get(self, request: HttpRequest):\n        # Check permissions\n        self.check_user_permissions(request)\n        # Get the notifications object\n        notifications = self.get_notifications(...
    - def post(self, request: HttpRequest):\n        # Check permissions\n        self.check_user_permissions(request)\n        # Get the notifications object\n        notifications = self.get_notifications...
    - def get_notifications(self, request: HttpRequest):\n        try:\n            notifications = Notifications.objects.get(user=request.user, product__isnull=True)\n        except Notifications.DoesNotExist:\n            notifications = Notifications(user=request.user)\n        return notifications
    - def check_user_permissions(self, request: HttpRequest):\n        pass
    - def set_breadcrumbs(self, request: HttpRequest):\n        add_breadcrumb(title=_("Personal notification settings"), top_level=False, request=request)\n        return request
    - def get_notifications(self, request: HttpRequest):\n        try:\n            notifications = Notifications.objects.get(template=True)\n        except Notifications.DoesNotExist:\n            notifications = Notifications(user=None, template=True)\n        return notifications
    - def set_breadcrumbs(self, request: HttpRequest):\n        add_breadcrumb(title=_("Template notification settings"), top_level=False, request=request)\n        return request
    - def check_user_permissions(self, request: HttpRequest):\n        if not request.user.is_superuser:\n            raise PermissionDenied\n        # TODO: finished access for other users\n        # if no...
    - def set_breadcrumbs(self, request: HttpRequest):\n        add_breadcrumb(title=self.breadcrumb, top_level=False, request=request)\n        return request
    - def get_form(\n        self,\n        request: HttpRequest,\n        **kwargs: dict,\n    ) -> NotificationsWebhookForm:\n        if request.method == "POST":\n            return NotificationsWebhookF...
    - def preprocess_request(self, request: HttpRequest):\n        # Check Webhook notifications are enabled\n        self.check_webhooks_enabled()\n        # Check permissions\n        self.check_user_permissions(request)
    - def get_initial_context(self, request: HttpRequest, nwhs: Notification_Webhooks):\n        return {\n            "name": "Notification Webhook List",\n            "metric": False,\n            "user": request.user,\n            "nwhs": nwhs,\n        }
    - def get_notification_webhooks(self, request: HttpRequest):\n        return Notification_Webhooks.objects.all().order_by("name")\n        # TODO: finished pagination\n        # TODO: restrict based on user - not only superadmins have access and they see everything
    - def get(self, request: HttpRequest):\n        # Run common checks\n        super().preprocess_request(request)\n        # Get Notification Webhooks\n        nwhs = self.get_notification_webhooks(reque...
    - def get_initial_context(self, request: HttpRequest):\n        return {\n            "name": "Add Notification Webhook",\n            "user": request.user,\n            "form": self.get_form(request),\n        }
    - def process_form(self, request: HttpRequest, context: dict):\n        form = context["form"]\n        if form.is_valid():\n            try:\n                self.get_webhook_manager_instance()._test_w...
    - def get(self, request: HttpRequest):\n        # Run common checks\n        super().preprocess_request(request)\n        # Set up the initial context\n        context = self.get_initial_context(request...
