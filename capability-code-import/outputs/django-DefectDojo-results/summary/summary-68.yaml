
django:
  django.db.models:
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Password must contain one digit"),\n        help_text=_("Requires user passwords to contain at least one digit (0-9)."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Password must contain one special character"),\n        help_text=_("Requires user passwords to contain at least one special character (()[]{}|\\`~!@#$%^&*_-+=;:'\",<>./?)."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Password must contain one lowercase letter"),\n        help_text=_("Requires user passwords to contain at least one lowercase letter (a-z)."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Password must contain one uppercase letter"),\n        help_text=_("Requires user passwords to contain at least one uppercase letter (A-Z)."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Password must not be common"),\n        help_text=_("Requires user passwords to not be part of list of common passwords."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("API expose error details"),\n        help_text=_("When turned on, the API will expose error details in the response."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Filter String Matching Optimization"),\n        help_text=_(\n            "When turned on, all filter operat...
    - class Dojo_Group_Member(models.Model):\n    group = models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)\n    user = models.ForeignKey(Dojo_User, on_delete=models.CASCADE)\n    role = models.Foreig...
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE, help_text=_("This role determines the permissions of the user to manage the group."), verbose_name=_("Group role"))
    - models.ForeignKey(Role, on_delete=models.CASCADE, help_text=_("This role determines the permissions of the user to manage the group."), verbose_name=_("Group role"))
    - class Global_Role(models.Model):\n    user = models.OneToOneField(Dojo_User, null=True, blank=True, on_delete=models.CASCADE)\n    group = models.OneToOneField(Dojo_Group, null=True, blank=True, on_de...
    - models.OneToOneField(Dojo_User, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Dojo_User, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Dojo_Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.OneToOneField(Dojo_Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE, null=True, blank=True, help_text=_("The global role will be applied to all product types and products."), verbose_name=_("Global role"))
    - models.ForeignKey(Role, on_delete=models.CASCADE, null=True, blank=True, help_text=_("The global role will be applied to all product types and products."), verbose_name=_("Global role"))
    - class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    team = models.CharField(max_length=100)\n    is_admin = models.BooleanField(default=Fals...
    - models.CharField(max_length=100)
    - models.EmailField()
    - models.CharField(max_length=100)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.DateTimeField(auto_now=True)
    - class Note_Type(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.CharField(max_length=200)\n    is_single = models.BooleanField(default=False, null=Fa...
    - models.CharField(max_length=100, unique=True)
    - models.CharField(max_length=200)
    - models.BooleanField(default=False, null=False)
    - models.BooleanField(default=True, null=False)
    - models.BooleanField(default=True, null=False)
    - class NoteHistory(models.Model):\n    note_type = models.ForeignKey(Note_Type, null=True, blank=True, on_delete=models.CASCADE)\n    data = models.TextField()\n    time = models.DateTimeField(null=Tru...
    - models.ForeignKey(Note_Type, null=True, blank=True, on_delete=models.CASCADE)
    - models.ForeignKey(Note_Type, null=True, blank=True, on_delete=models.CASCADE)
    - models.TextField()
    - models.DateTimeField(null=True, editable=False,\n                                default=get_current_datetime)
    - models.ForeignKey(Dojo_User, editable=False, null=True, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, editable=False, null=True, on_delete=models.CASCADE)
    - class Notes(models.Model):\n    note_type = models.ForeignKey(Note_Type, related_name="note_type", null=True, blank=True, on_delete=models.CASCADE)\n    entry = models.TextField()\n    date = models.D...
    - models.ForeignKey(Note_Type, related_name="note_type", null=True, blank=True, on_delete=models.CASCADE)
    - models.ForeignKey(Note_Type, related_name="note_type", null=True, blank=True, on_delete=models.CASCADE)
    - models.TextField()
    - models.DateTimeField(null=False, editable=False,\n                                default=get_current_datetime)
    - models.ForeignKey(Dojo_User, related_name="editor_notes_set", editable=False, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, related_name="editor_notes_set", editable=False, on_delete=models.CASCADE)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.ForeignKey(Dojo_User, related_name="author_notes_set", editable=False, null=True, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, related_name="author_notes_set", editable=False, null=True, on_delete=models.CASCADE)
    - models.DateTimeField(null=True, editable=False,\n                                default=get_current_datetime)
    - models.ManyToManyField(NoteHistory, blank=True,\n                                   editable=False)
    - class FileUpload(models.Model):\n    title = models.CharField(max_length=100, unique=True)\n    file = models.FileField(upload_to=UniqueUploadNameProvider("uploaded_files"))\n\n    def copy(self):\n  ...
    - models.CharField(max_length=100, unique=True)
    - models.FileField(upload_to=UniqueUploadNameProvider("uploaded_files"))
    - class Product_Type(models.Model):\n\n    """\n    Product types represent the top level model, these can be business unit divisions, different offices or locations, development teams, or any other log...
    - models.CharField(max_length=255, unique=True)
    - models.CharField(max_length=4000, null=True, blank=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.DateTimeField(auto_now=True, null=True)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.ManyToManyField(Dojo_User, through="Product_Type_Member", related_name="prod_type_members", blank=True)
    - models.ManyToManyField(Dojo_Group, through="Product_Type_Group", related_name="product_type_groups", blank=True)
    - class Product_Line(models.Model):\n    name = models.CharField(max_length=300)\n    description = models.CharField(max_length=2000)\n\n    def __str__(self):\n        return self.name
    - models.CharField(max_length=300)
    - models.CharField(max_length=2000)
    - class Report_Type(models.Model):\n    name = models.CharField(max_length=255)
    - models.CharField(max_length=255)
    - class Test_Type(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    static_tool = models.BooleanField(default=False)\n    dynamic_tool = models.BooleanField(default=False)\n ...
    - models.CharField(max_length=200, unique=True)
    - models.BooleanField(default=False)
    - models.BooleanField(default=False)
    - models.BooleanField(default=True)
    - models.BooleanField(\n        default=False,\n        help_text=_("Set to True for test types that are created at import time"))
    - class DojoMeta(models.Model):\n    name = models.CharField(max_length=120)\n    value = models.CharField(max_length=300)\n    product = models.ForeignKey("Product",\n                                on...
    - models.CharField(max_length=120)
    - models.CharField(max_length=300)
    - models.ForeignKey("Product",\n                                on_delete=models.CASCADE,\n                                null=True,\n                                editable=False,\n                                related_name="product_meta")
    - models.ForeignKey("Product",\n                                on_delete=models.CASCADE,\n                                null=True,\n                                editable=False,\n                                related_name="product_meta")
    - models.ForeignKey("Endpoint",\n                                 on_delete=models.CASCADE,\n                                 null=True,\n                                 editable=False,\n                                 related_name="endpoint_meta")
    - models.ForeignKey("Endpoint",\n                                 on_delete=models.CASCADE,\n                                 null=True,\n                                 editable=False,\n                                 related_name="endpoint_meta")
    - models.ForeignKey("Finding",\n                                 on_delete=models.CASCADE,\n                                 null=True,\n                                 editable=False,\n                                 related_name="finding_meta")
    - models.ForeignKey("Finding",\n                                 on_delete=models.CASCADE,\n                                 null=True,\n                                 editable=False,\n                                 related_name="finding_meta")
    - class SLA_Configuration(models.Model):\n    name = models.CharField(max_length=128, unique=True, blank=False, verbose_name=_("Custom SLA Name"),\n        help_text=_("A unique name for the set of SLAs...
    - models.CharField(max_length=128, unique=True, blank=False, verbose_name=_("Custom SLA Name"),\n        help_text=_("A unique name for the set of SLAs."))
    - models.CharField(\n        max_length=512,\n        null=True,\n        blank=True)
    - models.IntegerField(\n        default=7,\n        verbose_name=_("Critical Finding SLA Days"),\n        help_text=_("The number of days to remediate a critical finding."))
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Critical Finding SLA Days"),\n        help_text=_("When enabled, critical findings will be assigned an SLA expiration date based on the critical finding SLA days within this SLA configuration."))
    - models.IntegerField(\n        default=30,\n        verbose_name=_("High Finding SLA Days"),\n        help_text=_("The number of days to remediate a high finding."))
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce High Finding SLA Days"),\n        help_text=_("When enabled, high findings will be assigned an SLA expiration date based on the high finding SLA days within this SLA configuration."))
    - models.IntegerField(\n        default=90,\n        verbose_name=_("Medium Finding SLA Days"),\n        help_text=_("The number of days to remediate a medium finding."))
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Medium Finding SLA Days"),\n        help_text=_("When enabled, medium findings will be assigned an SLA expiration date based on the medium finding SLA days within this SLA configuration."))
    - models.IntegerField(\n        default=120,\n        verbose_name=_("Low Finding SLA Days"),\n        help_text=_("The number of days to remediate a low finding."))
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Low Finding SLA Days"),\n        help_text=_("When enabled, low findings will be assigned an SLA expiration date based on the low finding SLA days within this SLA configuration."))
    - models.BooleanField(\n        default=False,\n        help_text=_("Findings under this SLA configuration are asynchronously being updated"))
    - class Product(models.Model):\n    WEB_PLATFORM = "web"\n    IOT = "iot"\n    DESKTOP_PLATFORM = "desktop"\n    MOBILE_PLATFORM = "mobile"\n    WEB_SERVICE_PLATFORM = "web service"\n    PLATFORM_CHOICE...
    - models.CharField(max_length=255, unique=True)
    - models.CharField(max_length=4000)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                        related_name="product_manager", on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                        related_name="product_manager", on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                          related_name="technical_contact", on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                          related_name="technical_contact", on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                     related_name="team_manager", on_delete=models.RESTRICT)
    - models.ForeignKey(Dojo_User, null=True, blank=True,\n                                     related_name="team_manager", on_delete=models.RESTRICT)
    - models.DateTimeField(auto_now_add=True, null=True)
    - models.ForeignKey(Product_Type, related_name="prod_type",\n                                  null=False, blank=False, on_delete=models.CASCADE)
    - models.ForeignKey(Product_Type, related_name="prod_type",\n                                  null=False, blank=False, on_delete=models.CASCADE)
    - models.DateTimeField(auto_now=True, null=True)
    - models.ForeignKey(SLA_Configuration,\n                                          related_name="sla_config",\n                                          null=False,\n                                     ...
    - models.ForeignKey(SLA_Configuration,\n                                          related_name="sla_config",\n                                          null=False,\n                                     ...
    - models.IntegerField(default=0, editable=False)
    - models.ManyToManyField(Dojo_User, through="Product_Member", related_name="product_members", blank=True)
    - models.ManyToManyField(Dojo_Group, through="Product_Group", related_name="product_groups", blank=True)
    - models.IntegerField(null=True, blank=True)
    - models.CharField(max_length=9, choices=BUSINESS_CRITICALITY_CHOICES, blank=True, null=True)
    - models.CharField(max_length=11, choices=PLATFORM_CHOICES, blank=True, null=True)
    - models.CharField(max_length=12, choices=LIFECYCLE_CHOICES, blank=True, null=True)
    - models.CharField(max_length=19, choices=ORIGIN_CHOICES, blank=True, null=True)
    - models.PositiveIntegerField(blank=True, null=True, help_text=_("Estimate the number of user records within the application."))
    - models.DecimalField(max_digits=15, decimal_places=2, blank=True, null=True, help_text=_("Estimate the application's revenue."))
    - models.BooleanField(default=False, help_text=_("Specify if the application is used by people outside the organization."))
    - models.BooleanField(default=False, help_text=_("Specify if the application is accessible from the public internet."))
    - models.ManyToManyField(Regulation, blank=True)
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Product Tag Inheritance"),\n        help_text=_("Enables product tag inheritance. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings"))
    - models.BooleanField(default=False, help_text=_("Allows simple risk acceptance by checking/unchecking a checkbox."))
    - models.BooleanField(default=True, help_text=_("Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Disable SLA breach notifications"),\n        help_text=_("Disable SLA breach notifications if configured in the global settings"))
    - models.BooleanField(default=False,\n                                            help_text=_("Findings under this Product or SLA configuration are asynchronously being updated"))
    - class Product_Member(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    user = models.ForeignKey(Dojo_User, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - class Product_Group(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    group = models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Product, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - class Product_Type_Member(models.Model):\n    product_type = models.ForeignKey(Product_Type, on_delete=models.CASCADE)\n    user = models.ForeignKey(Dojo_User, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Product_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Product_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_User, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - class Product_Type_Group(models.Model):\n    product_type = models.ForeignKey(Product_Type, on_delete=models.CASCADE)\n    group = models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Product_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Product_Type, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Dojo_Group, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - models.ForeignKey(Role, on_delete=models.CASCADE)
    - class Tool_Type(models.Model):\n    name = models.CharField(max_length=200)\n    description = models.CharField(max_length=2000, null=True, blank=True)\n\n    class Meta:\n        ordering = ["name"]\n\n    def __str__(self):\n        return self.name
    - models.CharField(max_length=200)
    - models.CharField(max_length=2000, null=True, blank=True)
    - class Tool_Configuration(models.Model):\n    name = models.CharField(max_length=200, null=False)\n    description = models.CharField(max_length=2000, null=True, blank=True)\n    url = models.CharField...
    - models.CharField(max_length=200, null=False)
    - models.CharField(max_length=2000, null=True, blank=True)
    - models.CharField(max_length=2000, null=True, blank=True)
