
dojo:
  dojo.forms.RiskAcceptanceForm:
    - RiskAcceptanceForm(request.POST, request.FILES)
    - RiskAcceptanceForm(initial={"owner": request.user, "name": risk_acceptance_title_suggestion})
  dojo.forms.EditRiskAcceptanceForm:
    - EditRiskAcceptanceForm(request.POST, request.FILES, instance=risk_acceptance)
    - EditRiskAcceptanceForm(instance=risk_acceptance)
  dojo.decorators.dojo_async_task:
    - import logging\nfrom time import strftime\n\nfrom django.conf import settings\nfrom django.db.models.query_utils import Q\nfrom django.db.models.signals import post_delete, pre_delete\nfrom django.db....
    - @dojo_async_task\n    @app.task()\n    def add_endpoints_to_unsaved_finding(\n        self,\n        finding: Finding,\n        endpoints: list[Endpoint],\n        **kwargs: dict,\n    ) -> None:\n   ...
    - @dojo_async_task\n    @app.task()\n    def add_endpoints_to_unsaved_finding(\n        self,\n        finding: Finding,\n        endpoints: list[Endpoint],\n        **kwargs: dict,\n    ) -> None:\n   ...
    - @dojo_async_task\n    @app.task()\n    def add_endpoints_to_unsaved_finding(\n        self,\n        finding: Finding,\n        endpoints: list[Endpoint],\n        **kwargs: dict,\n    ) -> None:\n   ...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import logging\nfrom functools import wraps\n\nfrom django.core.management.base import BaseCommand\n\nfrom dojo.celery import app\n\n# from dojo.utils import get_system_setting, do_dedupe_finding, doj...
    - """Manger for slack notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_slack_notification(\n        self,\n        event: str,\n        user: Dojo_User | None = N...
    - """Manger for Microsoft Teams notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_msteams_notification(\n        self,\n        event: str,\n        user: Dojo_Use...
    - """Manger for email notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_mail_notification(\n        self,\n        event: str,\n        user: Dojo_User | None = No...
    - """Manger for webhook notifications and their helpers."""\n\n    ERROR_PERMANENT = "permanent"\n    ERROR_TEMPORARY = "temporary"\n\n    @dojo_async_task\n    @app.task\n    def send_webhooks_notifica...
    - import contextlib\nimport logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Endpoint, Engagement, Finding, Product, SLA_Configuration, Test\n...
    - import contextlib\nimport logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Endpoint, Engagement, Finding, Product, SLA_Configuration, Test\n...
    - import logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Finding, Product, SLA_Configuration\n\nlogger = logging.getLogger(__name__)\n\n\n@do...
    - from dojo.celery import app\nfrom dojo.decorators import dojo_async_task, dojo_model_from_id, dojo_model_to_id\nfrom dojo.tools.api_sonarqube.parser import SCAN_SONARQUBE_API\n\n\ndef async_tool_issue...
    - from dojo.celery import app\nfrom dojo.decorators import dojo_async_task, dojo_model_from_id, dojo_model_to_id\nfrom dojo.tools.api_sonarqube.parser import SCAN_SONARQUBE_API\n\n\ndef async_tool_issue...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
  dojo.importers.endpoint_manager.EndpointManager:
    - EndpointManager()
  dojo.filters.ProductEngagementFilter:
    - filter_class = ProductEngagementFilterWithoutObjectLookups if filter_string_matching else ProductEngagementFilter
  dojo.api_v2.views.ProductViewSet:
    - v2_api.register(r"products", ProductViewSet, basename="product")
  dojo.api_v2.views.BurpRawRequestResponseViewSet:
    - v2_api.register(r"request_response_pairs", BurpRawRequestResponseViewSet, basename="request_response_pairs")
  dojo.group.utils.get_auth_group_name:
    - get_auth_group_name(instance)
    - get_auth_group_name(group)
  dojo.models.Dojo_Group_Member:
    - model = Dojo_Group_Member
    - Dojo_Group_Member.objects.filter(\n                group=data.get("group"), user=data.get("user"),\n            )
    - Dojo_Group_Member.objects.filter(\n                    group=data.get("group"), role__is_owner=True,\n                )
    - Dojo_Group_Member.objects.none()
    - Dojo_Group_Member.objects.filter(user=user)
    - Dojo_Group_Member.objects.none()
    - Dojo_Group_Member.objects.filter(group=self.initial["group"])
    - model = Dojo_Group_Member
    - Dojo_Group_Member.objects.filter(user=self.initial["user"])
    - model = Dojo_Group_Member
    - model = Dojo_Group_Member
    - Dojo_Group_Member.objects.filter(group=OuterRef("pk"),\n        user=user,\n        role__in=roles)
    - Dojo_Group_Member.objects.none()
    - Dojo_Group_Member.objects.all()
    - Dojo_Group_Member.objects.filter(group__in=groups)
    - Dojo_Group_Member.objects.filter(user=user, group__in=groups)
    - Dojo_Group_Member.objects.filter(group=group)
    - Dojo_Group_Member()
    - receiver(post_save, sender=Dojo_Group_Member)
    - receiver(post_delete, sender=Dojo_Group_Member)
    - Dojo_Group_Member.objects.filter(group=group, user=user)
    - Dojo_Group_Member()
    - user_is_authorized(Dojo_Group_Member, Permissions.Group_Manage_Members, "mid")
    - get_object_or_404(Dojo_Group_Member, pk=mid)
    - Dojo_Group_Member.objects.filter(group=member.group, role__is_owner=True)
    - user_is_authorized(Dojo_Group_Member, Permissions.Group_Member_Delete, "mid")
    - get_object_or_404(Dojo_Group_Member, pk=mid)
    - Dojo_Group_Member.objects.filter(group=member.group, role__is_owner=True)
    - Dojo_Group_Member(\n            user=user,\n            group=group,\n            role=owner_role,\n        )
    - Dojo_Group_Member(\n                    user=staff_user,\n                    group=group,\n                    role=reader_role,\n                )
    - Dojo_Group_Member.objects.get_or_create(group=group, user=user, defaults={\n            "role": Role.objects.get(id=Roles.Maintainer)})
    - Dojo_Group_Member.objects.select_related("group")
    - Dojo_Group_Member.objects \\n        .filter(Q(group__in=[ptg.group for ptg in product_type_groups])\n                | Q(group__in=[gr.group for gr in global_roles]))
    - Dojo_Group_Member.objects \\n        .filter(\n            Q(group__in=[pg.group for pg in product_groups])\n            | Q(group__in=[ptg.group for ptg in product_type_groups])\n            | Q(group__in=[gr.group for gr in global_roles]))
    - Dojo_Group_Member.objects \\n        .filter(\n            Q(group__in=[pg.group for pg in product_groups])\n            | Q(group__in=[ptg.group for ptg in product_type_groups]))
    - Dojo_Group_Member.objects.filter(user=user, group=group)
    - Dojo_Group_Member()
    - Dojo_Group_Member(\n                    group=system_settings.default_group,\n                    user=instance,\n                    role=system_settings.default_group_role)
  dojo.utils.count_findings:
    - count_findings(open_month)
    - count_findings(closed_month)
    - count_findings(accepted_month)
    - count_findings(open_week)
    - count_findings(closed_week)
    - count_findings(accepted_week)
  dojo.reports.widgets.WYSIWYGContent:
    - WYSIWYGContent(request=request)
  dojo.tools.trivy_operator.checks_handler.TrivyChecksHandler:
    - TrivyChecksHandler()
  dojo.api_v2.views.JiraProjectViewSet:
    - v2_api.register(r"jira_product_configurations", JiraProjectViewSet, basename="jira_product_configurations")
    - v2_api.register(r"jira_projects", JiraProjectViewSet, basename="jira_project")
  dojo.tool_type.urls.urlpatterns aliased as tool_type_urls:
    - ur += tool_type_urls
  dojo.finding.helper.save_vulnerability_ids_template:
    - save_vulnerability_ids_template(\n                new_finding_template, vulnerability_ids,\n            )
    - save_vulnerability_ids_template(instance, vulnerability_ids)
  dojo.celery.app:
    - import logging\nfrom time import strftime\n\nfrom django.conf import settings\nfrom django.db.models.query_utils import Q\nfrom django.db.models.signals import post_delete, pre_delete\nfrom django.db....
    - app.task()
    - app.task()
    - app.task()
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - import io\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Any\n\nimport requests\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.template...
    - app.task(name="rename_mend_finding_task")
    - import logging\nfrom functools import wraps\n\nfrom django.core.management.base import BaseCommand\n\nfrom dojo.celery import app\n\n# from dojo.utils import get_system_setting, do_dedupe_finding, doj...
    - import logging\nfrom functools import wraps\n\nfrom django.core.management.base import BaseCommand\n\nfrom dojo.celery import app\n\n# from dojo.utils import get_system_setting, do_dedupe_finding, doj...
    - """Manger for slack notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_slack_notification(\n        self,\n        event: str,\n        user: Dojo_User | None = N...
    - """Manger for Microsoft Teams notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_msteams_notification(\n        self,\n        event: str,\n        user: Dojo_Use...
    - """Manger for email notifications and their helpers."""\n\n    @dojo_async_task\n    @app.task\n    def send_mail_notification(\n        self,\n        event: str,\n        user: Dojo_User | None = No...
    - """Manger for webhook notifications and their helpers."""\n\n    ERROR_PERMANENT = "permanent"\n    ERROR_TEMPORARY = "temporary"\n\n    @dojo_async_task\n    @app.task\n    def send_webhooks_notifica...
    - app.task(ignore_result=True)
    - app.task(ignore_result=True)
    - import contextlib\nimport logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Endpoint, Engagement, Finding, Product, SLA_Configuration, Test\n...
    - import contextlib\nimport logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Endpoint, Engagement, Finding, Product, SLA_Configuration, Test\n...
    - import logging\nfrom contextlib import suppress\n\nfrom dateutil.relativedelta import relativedelta\nfrom django.core.exceptions import PermissionDenied\nfrom django.urls import reverse\nfrom django.u...
    - import logging\n\nfrom dojo.celery import app\nfrom dojo.decorators import dojo_async_task\nfrom dojo.models import Finding, Product, SLA_Configuration\n\nlogger = logging.getLogger(__name__)\n\n\n@do...
    - app.task(bind=True)
    - app.task(bind=True)
    - app.task(bind=True)
    - app.task(bind=True)
    - app.task(ignore_result=False)
    - import logging\nfrom datetime import date, timedelta\n\nfrom auditlog.models import LogEntry\nfrom celery.utils.log import get_task_logger\nfrom dateutil.relativedelta import relativedelta\nfrom djang...
    - import logging\nfrom datetime import date, timedelta\n\nfrom auditlog.models import LogEntry\nfrom celery.utils.log import get_task_logger\nfrom dateutil.relativedelta import relativedelta\nfrom djang...
    - import logging\nfrom datetime import date, timedelta\n\nfrom auditlog.models import LogEntry\nfrom celery.utils.log import get_task_logger\nfrom dateutil.relativedelta import relativedelta\nfrom djang...
    - import logging\nfrom datetime import date, timedelta\n\nfrom auditlog.models import LogEntry\nfrom celery.utils.log import get_task_logger\nfrom dateutil.relativedelta import relativedelta\nfrom djang...
    - from dojo.celery import app\nfrom dojo.decorators import dojo_async_task, dojo_model_from_id, dojo_model_to_id\nfrom dojo.tools.api_sonarqube.parser import SCAN_SONARQUBE_API\n\n\ndef async_tool_issue...
    - from dojo.celery import app\nfrom dojo.decorators import dojo_async_task, dojo_model_from_id, dojo_model_to_id\nfrom dojo.tools.api_sonarqube.parser import SCAN_SONARQUBE_API\n\n\ndef async_tool_issue...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - import binascii\nimport calendar as tcalendar\nimport hashlib\nimport importlib\nimport logging\nimport mimetypes\nimport os\nimport pathlib\nimport re\nfrom calendar import monthrange\nfrom collectio...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
    - def __init__(self, *args, **kwargs):\n        self.mapping = {\n            "Product_Type": [\n                (Endpoint, "product__prod_type"),\n                (Finding, "test__engagement__product__...
  dojo.models.GITHUB_PKey:
    - GITHUB_PKey.objects.filter(product=product)
    - GITHUB_PKey.objects.filter(product__engagement=engagement)
    - GITHUB_PKey.objects.filter(product=finding.test.engagement.product)
    - GITHUB_PKey.objects.get(\n                        product=test.engagement.product,\n                    )
    - model = GITHUB_PKey
    - GITHUB_PKey.objects.filter(product=prod)
    - GITHUB_PKey.objects.get(product=prod)
    - GITHUB_PKey.objects.filter(product=prod)
    - GITHUB_PKey.objects.get(product=prod)
    - GITHUB_PKey.objects.filter(product=prod)
    - GITHUB_PKey.objects.get(product=prod)
    - GITHUB_PKey.objects.filter(product=prod)
    - GITHUB_PKey.objects.get(product=prod)
    - GITHUB_PKey.objects.get(product=prod)
    - GITHUB_PKey.objects.all()
    - GITHUB_PKey()
    - GITHUB_PKey.objects.get(product=product)
    - GITHUB_PKey.objects.filter(product=test.engagement.product)
  dojo.benchmark.urls.urlpatterns aliased as benchmark_urls:
