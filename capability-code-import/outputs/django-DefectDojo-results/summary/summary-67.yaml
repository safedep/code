
django:
  django.db.models:
    - models.BooleanField(default=False)
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('cve', 'cve'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', '...
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('cve', 'cve'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', '...
    - models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('cve', 'cve'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', '...
    - isinstance(model_or_id, models.Model)
    - isinstance(model_or_id, models.Model)
    - models.Value(1, models.IntegerField())
    - models.IntegerField()
    - models.Value(2, models.IntegerField())
    - models.IntegerField()
    - models.Value(2, models.IntegerField())
    - models.IntegerField()
    - models.signals.post_save.connect(self.cleanup, sender=System_Settings)
    - class System_Settings_Manager(models.Manager):\n\n    def get_from_db(self, *args, **kwargs):\n        # logger.debug('refreshing system_settings from db')\n        try:\n            from_db = super()...
    - class Regulation(models.Model):\n    PRIVACY_CATEGORY = "privacy"\n    FINANCE_CATEGORY = "finance"\n    EDUCATION_CATEGORY = "education"\n    MEDICAL_CATEGORY = "medical"\n    CORPORATE_CATEGORY = "c...
    - models.CharField(max_length=128, unique=True, help_text=_("The name of the regulation."))
    - models.CharField(max_length=20, unique=True, help_text=_("A shortened representation of the name."))
    - models.CharField(max_length=9, choices=CATEGORY_CHOICES, help_text=_("The subject of the regulation."))
    - models.CharField(max_length=64, help_text=_("The territory over which the regulation applies."))
    - models.TextField(blank=True, help_text=_("Information about the regulation's purpose."))
    - models.URLField(blank=True, help_text=_("An external URL for more information."))
    - class UserContactInfo(models.Model):\n    user = models.OneToOneField(Dojo_User, on_delete=models.CASCADE)\n    title = models.CharField(blank=True, null=True, max_length=150)\n    phone_regex = Regex...
    - models.OneToOneField(Dojo_User, on_delete=models.CASCADE)
    - models.OneToOneField(Dojo_User, on_delete=models.CASCADE)
    - models.CharField(blank=True, null=True, max_length=150)
    - models.CharField(validators=[phone_regex], blank=True,\n                                    max_length=15,\n                                    help_text=_("Phone number must be entered in the format: '+999999999'. "\n                                              "Up to 15 digits allowed."))
    - models.CharField(validators=[phone_regex], blank=True,\n                                   max_length=15,\n                                   help_text=_("Phone number must be entered in the format: '+999999999'. "\n                                             "Up to 15 digits allowed."))
    - models.CharField(blank=True, null=True, max_length=150)
    - models.CharField(blank=True, null=True, max_length=150)
    - models.CharField(blank=True, null=True, max_length=150, help_text=_("Email address associated with your slack account"), verbose_name=_("Slack Email Address"))
    - models.CharField(blank=True, null=True, max_length=25)
    - models.BooleanField(default=False, help_text=_("Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion."))
    - models.BooleanField(default=False, help_text=_("Forces this user to reset their password on next login."))
    - class Dojo_Group(models.Model):\n    AZURE = "AzureAD"\n    REMOTE = "Remote"\n    SOCIAL_CHOICES = (\n        (AZURE, _("AzureAD")),\n        (REMOTE, _("Remote")),\n    )\n    name = models.CharFiel...
    - models.CharField(max_length=255, unique=True)
    - models.CharField(max_length=4000, null=True, blank=True)
    - models.ManyToManyField(Dojo_User, through="Dojo_Group_Member", related_name="users", blank=True)
    - models.ForeignKey(Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.ForeignKey(Group, null=True, blank=True, on_delete=models.CASCADE)
    - models.CharField(max_length=10, choices=SOCIAL_CHOICES, blank=True, null=True, help_text=_("Group imported from a social provider."), verbose_name=_("Social Authentication Provider"))
    - class Role(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    is_owner = models.BooleanField(default=False)\n\n    class Meta:\n        ordering = ("name",)\n\n    def __str__(self):\n        return self.name
    - models.CharField(max_length=255, unique=True)
    - models.BooleanField(default=False)
    - class System_Settings(models.Model):\n    enable_deduplication = models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Deduplicate findings"),\n        help_text=...
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Deduplicate findings"),\n        help_text=_("With this setting turned on, DefectDojo deduplicates findings ...
    - models.BooleanField(default=False, blank=False, help_text=_("Requires next setting: maximum number of duplicates to retain."))
    - models.IntegerField(blank=True, null=True, default=10,\n                                    verbose_name=_("Max Duplicates"),\n                                    help_text=_("When enabled, if a singl...
    - models.CharField(max_length=200, default="no-reply@example.com", blank=True)
    - models.BooleanField(default=False,\n                                      verbose_name=_("Enable JIRA integration"),\n                                      blank=False)
    - models.BooleanField(default=False,\n                                      verbose_name=_("Enable JIRA web hook"),\n                                      help_text=_("Please note: It is strongly recomm...
    - models.BooleanField(default=False,\n                                      verbose_name=_("Disable web hook secret"),\n                                      help_text=_("Allows incoming requests without a secret (discouraged legacy behaviour)"),\n                                      blank=False)
    - models.CharField(max_length=64, blank=False, null=True, verbose_name=_("JIRA Webhook URL"),\n                                           help_text=_("Secret needed in URL for incoming JIRA Webhook"))
    - models.CharField(max_length=20, blank=True,\n                                             null=True, choices=jira_choices,\n                                             default="Low")
    - models.CharField(max_length=200, blank=True, null=True,\n                                   help_text=_("JIRA issue labels space seperated"))
    - models.BooleanField(default=False,\n                                        verbose_name=_("Add vulnerability Id as a JIRA label"),\n                                        blank=False)
    - models.BooleanField(default=False,\n                                      verbose_name=_("Enable GITHUB integration"),\n                                      blank=False)
    - models.BooleanField(default=False,\n                            verbose_name=_("Enable Slack notifications"),\n                            blank=False)
    - models.CharField(max_length=100, default="", blank=True,\n                    help_text=_("Optional. Needed if you want to send global notifications."))
    - models.CharField(max_length=100, default="", blank=True,\n                                   help_text=_("Token required for interacting "\n                                             "with Slack. Get one at "\n                                             "https://api.slack.com/tokens"))
    - models.CharField(max_length=100, default="", blank=True,\n                     help_text=_("Optional. Will take your bot name otherwise."))
    - models.BooleanField(default=False,\n                            verbose_name=_("Enable Microsoft Teams notifications"),\n                            blank=False)
    - models.CharField(max_length=400, default="", blank=True,\n                                    help_text=_("The full URL of the "\n                                              "incoming webhook"))
    - models.BooleanField(default=False, blank=False)
    - models.CharField(max_length=200, default="",\n                                             blank=True)
    - models.BooleanField(default=False,\n                            verbose_name=_("Enable Webhook notifications"),\n                            blank=False)
    - models.IntegerField(default=10,\n                                          help_text=_("How many seconds will DefectDojo waits for response from webhook endpoint"))
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Verified Status - Globally"),\n        help_text=_(\n            "When enabled, features such as product grading, jira "\n ...
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Verified Status - Jira"),\n        help_text=_("When enabled, findings must have a verified status to be pushed to jira."),\n    )
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Verified Status - Product Grading"),\n        help_text=_(\n            "When enabled, findings must have a verified status to be considered as part of a product's grading.",\n        ),\n    )
    - models.BooleanField(\n        default=True,\n        verbose_name=_("Enforce Verified Status - Metrics"),\n        help_text=_(\n            "When enabled, findings must have a verified status to be c...
    - models.BooleanField(\n        default=False, help_text=_(\n            "(EXPERIMENTAL) DefectDojo will automatically mark the finding as a "\n            "false positive if an equal finding (according...
    - models.BooleanField(\n        default=False, help_text=_(\n            "(EXPERIMENTAL) FP History will also retroactively mark/unmark all "\n            "existing equal findings in the same product as...
    - models.CharField(max_length=300, default="", blank=True, help_text=_("URL prefix if DefectDojo is installed in it's own virtual subdirectory."))
    - models.CharField(max_length=100, default="", blank=True)
    - models.CharField(max_length=50,\n                                 choices=[(tz, tz) for tz in all_timezones],\n                                 default="UTC", blank=False)
    - models.BooleanField(default=False, verbose_name=_("Enable Product Grading"), help_text=_("Displays a grade letter next to a product to show the overall health."))
    - models.CharField(max_length=800, blank=True)
    - models.IntegerField(default=90,\n                                          verbose_name=_("Grade A"),\n                                          help_text=_("Percentage score for an "\n                                                    "'A' >="))
    - models.IntegerField(default=80,\n                                          verbose_name=_("Grade B"),\n                                          help_text=_("Percentage score for a "\n                                                    "'B' >="))
    - models.IntegerField(default=70,\n                                          verbose_name=_("Grade C"),\n                                          help_text=_("Percentage score for a "\n                                                    "'C' >="))
    - models.IntegerField(default=60,\n                                          verbose_name=_("Grade D"),\n                                          help_text=_("Percentage score for a "\n                                                    "'D' >="))
    - models.IntegerField(default=59,\n                                          verbose_name=_("Grade F"),\n                                          help_text=_("Percentage score for an "\n                                                    "'F' <="))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Product Tag Inheritance"),\n        help_text=_("Enables product tag inheritance globally for all pro...
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Benchmarks"),\n        help_text=_("Enables Benchmarks such as the OWASP ASVS "\n                  "(Application Security Verification Standard)"))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Remediation Advice"),\n        help_text=_("Enables global remediation advice and matching on CWE and...
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Similar Findings"),\n        help_text=_("Enable the query of similar findings on the view finding page. This feature can involve potentially large queries and negatively impact performance"))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Engagement Auto-Close"),\n        help_text=_("Closes an engagement after 3 days (default) past due date including last update."))
    - models.IntegerField(\n        default=3,\n        blank=False,\n        verbose_name=_("Engagement Auto-Close Days"),\n        help_text=_("Closes an engagement after the specified number of days past due date including last update."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Finding SLA's"),\n        help_text=_("Enables Finding SLA's for time to remediate."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Notify SLA's Breach for active Findings"),\n        help_text=_("Enables Notify when time to remediate according to Finding SLA's is breached for active Findings."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Notify SLA's Breach for active, verified Findings"),\n        help_text=_("Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings."))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable Notify SLA's Breach only for Findings linked to JIRA"),\n        help_text=_("Enables Notify when tim...
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Enable an exponential backoff strategy for SLA breach notifications."),\n        help_text=_("Enable an expo...
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Allow Anonymous Survey Responses"),\n        help_text=_("Enable anyone with a link to the survey to answer a survey"),\n    )
    - models.TextField(max_length=3000, blank=True)
    - models.TextField(max_length=3000, default="", blank=True,\n                                  verbose_name=_("Custom Disclaimer for Notifications"),\n                                  help_text=_("Include this custom disclaimer on all notifications"))
    - models.TextField(max_length=5000, default="", blank=True,\n                                  verbose_name=_("Custom Disclaimer for Reports"),\n                                  help_text=_("Include this custom disclaimer on generated reports"))
    - models.BooleanField(\n        default=False,\n        blank=False,\n        verbose_name=_("Force to add disclaimer reports"),\n        help_text=_("Disclaimer will be added to all reports even if user didn't selected 'Include disclaimer'."))
    - models.TextField(max_length=3000, default="", blank=True,\n                                  verbose_name=_("Custom Disclaimer for Notes"),\n                                  help_text=_("Include this custom disclaimer next to input form for notes"))
    - models.IntegerField(null=True, blank=True, default=180, help_text=_("Default expiry period for risk acceptance form."))
    - models.IntegerField(null=True, blank=True, default=10,\n                    verbose_name=_("Risk acceptance expiration heads up days"), help_text=_("Notify X days before risk acceptance expires. Leave empty to disable."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable credentials"),\n        help_text=_("With this setting turned off, credentials will be disabled in the user interface."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable questionnaires"),\n        help_text=_("With this setting turned off, questionnaires will be disabled in the user interface."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable checklists"),\n        help_text=_("With this setting turned off, checklists will be disabled in the user interface."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Endpoint Metadata Import"),\n        help_text=_("With this setting turned off, endpoint metadata import will be disabled in the user interface."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable user profile for writing"),\n        help_text=_("When turned on users can edit their profiles"))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Product Tracking Files"),\n        help_text=_("With this setting turned off, the product tracking files will be disabled in the user interface."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Finding Groups"),\n        help_text=_("With this setting turned off, the Finding Groups will be disabled."))
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable UI Table Based Filtering/Sorting"),\n        help_text=_("With this setting enabled, table headings wi...
    - models.BooleanField(\n        default=True,\n        blank=False,\n        verbose_name=_("Enable Calendar"),\n        help_text=_("With this setting turned off, the Calendar will be disabled in the user interface."))
    - models.ForeignKey(\n        Dojo_Group,\n        null=True,\n        blank=True,\n        help_text=_("New users will be assigned to this group."),\n        on_delete=models.RESTRICT)
    - models.ForeignKey(\n        Dojo_Group,\n        null=True,\n        blank=True,\n        help_text=_("New users will be assigned to this group."),\n        on_delete=models.RESTRICT)
    - models.ForeignKey(\n        Role,\n        null=True,\n        blank=True,\n        help_text=_("New users will be assigned to their default group with this role."),\n        on_delete=models.RESTRICT)
    - models.ForeignKey(\n        Role,\n        null=True,\n        blank=True,\n        help_text=_("New users will be assigned to their default group with this role."),\n        on_delete=models.RESTRICT)
    - models.CharField(\n        max_length=200,\n        default="",\n        blank=True,\n        help_text=_("New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition."))
    - models.IntegerField(\n        default=9,\n        verbose_name=_("Minimum password length"),\n        help_text=_("Requires user to set passwords greater than minimum length."))
    - models.IntegerField(\n        default=48,\n        verbose_name=_("Maximum password length"),\n        help_text=_("Requires user to set passwords less than maximum length."))
