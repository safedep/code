
multiselectfield:
  multiselectfield.MultiSelectField:
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True,\n        verbose_name=_("SLA breach"),\n        help_text=_("Get notified of (upcoming) SLA breaches"))
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True,\n        verbose_name=_("Risk Acceptance Expiration"),\n        help_text=_("Get notified of (upcoming) Risk Acceptance expiries"))
    - MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True,\n        verbose_name=_("SLA breach (combined)"),\n        help_text=_("Get notified of (upcoming) SLA breaches (a message per project)"))

bleach:
  bleach.css_sanitizer.CSSSanitizer:
    - CSSSanitizer(allowed_css_properties=["color", "font-weight"])
    - CSSSanitizer(allowed_css_properties=["color", "font-weight"])
  bleach:
    - allowed_attributes = bleach.ALLOWED_ATTRIBUTES
    - bleach.clean(\n        message,\n        attributes=allowed_attributes,\n        css_sanitizer=CSSSanitizer(allowed_css_properties=["color", "font-weight"]))
    - bleach.clean(markdown_text, tags=markdown_tags, attributes=markdown_attrs, css_sanitizer=markdown_styles)
    - allowed_attributes = bleach.ALLOWED_ATTRIBUTES
    - bleach.clean(\n                    value,\n                    attributes=allowed_attributes,\n                    css_sanitizer=CSSSanitizer(allowed_css_properties=["color", "font-weight"]))
    - bleach.clean(link, tags={"a"}, attributes={"a": ["href", "target", "title"]})

defusedxml:
  defusedxml.ElementTree.parse:
    - parse(filename)
    - dateutil.parser.parse(\n                    scan.findtext("StartTime"), dayfirst=True,\n                )
    - hyperlink.parse(start_url)
    - parse(file)
    - parse(file)
    - parse(file)
    - parse(file)
  defusedxml.ElementTree:
    - ElementTree.parse(filename)
    - ElementTree.parse(filename)
    - ElementTree.parse(file)
    - ElementTree.fromstring(content)
    - ElementTree.fromstring(zip_data.get(audit_file).decode("utf-8"))
    - ElementTree.parse(filename)
    - ElementTree.parse(file)
    - ElementTree.parse(file)
    - ElementTree.parse(xml_output)
    - ElementTree.parse(file)
    - ElementTree.parse(file)
    - ElementTree.parse(qualys_xml_file)
    - ElementTree.parse(filename)
    - ElementTree.fromstring(content)
    - ElementTree.parse(filename)
  defusedxml.ElementTree aliased as etree:
    - etree.parse(xml_output, etree.XMLParser())
    - etree.XMLParser()
    - etree.parse(xml_output, etree.XMLParser())
    - etree.XMLParser()
    - etree.XMLParser()
    - etree.parse(qualys_xml_file, parser)
  defusedxml.ElementTree aliased as ET:
    - ET.parse(xml_output)
    - ET.parse(file)
    - ET.parse(file)
    - ET.parse(file)
    - ET.parse(filename)
    - ET.parse(filename)
    - ET.tostring(pattern.find("Details"), method="text")
    - ET.parse(file)
    - ET.parse(file)
    - ET.parse(filename)
    - ET.parse(file)

product_test:
  product_test.ProductTest:
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_add_product_finding")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_add_product_finding")
    - ProductTest("test_enable_simple_risk_acceptance")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_add_product_finding")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_add_product_finding")
    - ProductTest("test_add_product_endpoints")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_add_product_finding")
    - ProductTest("test_delete_product")
    - ProductTest("test_create_product")
    - ProductTest("test_delete_product")
  product_test.WaitForPageLoad:
    - WaitForPageLoad(driver, timeout=30)
    - WaitForPageLoad(driver, timeout=50)
    - WaitForPageLoad(driver, timeout=50)
    - WaitForPageLoad(driver, timeout=50)
    - WaitForPageLoad(driver, timeout=50)
    - WaitForPageLoad(driver, timeout=50)
    - WaitForPageLoad(driver, timeout=30)

six:
  six:
    - isinstance(data, six.string_types)
    - isinstance(s, six.string_types)
    - isinstance(data, six.string_types)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)
    - six.iteritems(self.options)

dateutil:
  dateutil.relativedelta.SU:
    - SU(-1)
  dateutil.relativedelta.MO:
    - MO(1)
    - MO(1)
    - MO(1)
    - MO(1)
  dateutil.relativedelta.relativedelta:
    - relativedelta(end_date, start_date)
    - relativedelta(end_date, start_date)
    - relativedelta(days=expiration_delta_days)
    - relativedelta(weeks=i)
    - relativedelta(weeks=1, weekday=0,\n                                                   hour=0, minute=0, second=0)
    - relativedelta(weeks=0, weekday=0,\n                                                 hour=0, minute=0, second=0)
    - relativedelta(weeks=26)
    - relativedelta(months=6)
    - relativedelta(days=int(daysback))
    - relativedelta(**{period.datetime_name: x})
    - relativedelta(end_date, start_date)
    - relativedelta(months=-x)
    - relativedelta(months=-x)
    - relativedelta(months=-x)
    - relativedelta(months=-x)
    - relativedelta(weeks=1,\n                                    weekday=x,\n                                    hour=0,\n                                    minute=0,\n                                    second=0)
    - relativedelta(days=overdue_grace_days)
    - relativedelta(days=days_remaining)
    - relativedelta(days=days_remaining)
    - relativedelta(end_date, start_date)
    - relativedelta(end_date, start_date)
    - relativedelta(days=expiration_delta_days)
    - relativedelta(days=heads_up_days)
    - relativedelta(months=retention_period)
    - relativedelta(weeks=i)
    - relativedelta(\n                weeks=1, weekday=0, hour=0, minute=0, second=0)
    - relativedelta(\n                weeks=0, weekday=0, hour=0, minute=0, second=0)
    - relativedelta(months=i)
    - relativedelta(\n                day=1, hour=0, minute=0, second=0)
    - relativedelta(\n                day=31, hour=23, minute=59, second=59)
    - relativedelta(weekday=SU(-1))
    - relativedelta(weeks=weeks)
    - relativedelta(weeks=1)
    - relativedelta(weeks=1)
    - relativedelta(weeks=1)
    - relativedelta(months=x)
    - relativedelta(\n                day=1, months=+1, days=-1)
    - relativedelta(months=x)
    - relativedelta(day=1)
    - relativedelta(weeks=x, weekday=MO(1))
    - relativedelta(weeks=1, weekday=MO(1))
    - relativedelta(months=x)
    - relativedelta(\n                day=1, months=+1, days=-1)
    - relativedelta(months=x)
    - relativedelta(day=1)
    - relativedelta(weeks=x, weekday=MO(1))
    - relativedelta(weeks=1, weekday=MO(1))
  dateutil.parser.parse:
    - hyperlink.parse(url=uri)
    - hyperlink.parse(url="//" + urlparse(uri).netloc)
    - parse(start_date)
    - parse(row["Date"])
    - parse(data["scan"]["end_time"])
    - parse(data.get("createdAt"))
    - parse(column_value)
    - hyperlink.parse(str(e))
    - parse(start_date)
  dateutil.parser:
    - parser.parse(data["Generated"], dayfirst=True)
    - parser.parse(item["FirstSeenDate"], dayfirst=True)
    - parser.parse(data["scan_info"]["end_time"])
    - parser.parse(row.get("submitted_at"))
    - parser.parse(root.get("ScanStart"))
    - parser.parse(value)
    - parser.parse(value)
    - parser.parse(\n                    row["TimeofDiscovery"].replace("Z", ""),\n                )
    - parser.parse(data["scan_started"])
    - parser.parse(extra_info.get("date"))
    - parser.parse(date.replace("Z", ""))
    - parser.parse(date.replace("Z", ""))
    - parser.isoparse(i.text)
    - parser.parse(first_found_date)
    - parser.parse(last_found_date)
    - parser.parse(issue.get("created_date"))
    - parser.parse(issue.get("created_date"))
  dateutil:
    - dateutil.parser.parse(\n                    scan.findtext("StartTime"), dayfirst=True,\n                )
    - dateutil.parser.parse(item.get("CreatedAt"))
    - dateutil.parser.parse(\n                data.get("metadata").get("timestamp"),\n            )
    - dateutil.parser.parse(report_date_raw)
    - dateutil.parser.parse(\n                    projectInfo_node.findtext(f"{namespace}reportDate"),\n                )
    - dateutil.parser.parse(alert["createdAt"])
    - dateutil.parser.parse(item.get("first_seen"))
  dateutil.parser aliased as date_parser:
    - date_parser.parse(last_observed)
    - date_parser.parse(entry.get("reported_at"))
    - date_parser.parse(row.get("closed_at"))
    - date_parser.parse(data["timestamp"])
    - try:\n                find_date = date_parser.parse(data["timestamp"])\n            except date_parser.ParserError:\n                find_date = datetime.now()
    - date_parser.parse(data["Generated"])
    - try:\n                scan_date = date_parser.parse(data["Generated"])\n            except date_parser.ParserError:\n                scan_date = None
    - date_parser.parse(item.get("timestamp"))
    - date_parser.parse(row.get("LAST SCAN"))
    - date_parser.parse(row.get("FirstDetected"))

hyperlink:
  hyperlink:
    - hyperlink.EncodedURL(\n                    scheme=self.protocol or dummy_scheme,\n                    userinfo=self.userinfo or "",\n                    host=self.host,\n                    port=self....
    - hyperlink.parse(url=uri)
    - hyperlink.parse(url="//" + urlparse(uri).netloc)
    - try:\n            url = hyperlink.parse(url=uri)\n        except UnicodeDecodeError:\n            from urllib.parse import urlparse\n            url = hyperlink.parse(url="//" + urlparse(uri).netloc)\...
    - hyperlink.parse(start_url)
    - hyperlink.parse(item["url"])
    - hyperlink.parse(settings.SITE_URL)
    - hyperlink.parse(settings.SITE_URL)
    - hyperlink.parse(str(e))
  hyperlink._url.SCHEME_PORT_MAP:
    - if (kwargs.get("protocol")) and \\n                (kwargs["protocol"].lower() in SCHEME_PORT_MAP) and \\n                (SCHEME_PORT_MAP[kwargs["protocol"].lower()] == kwargs["port"]):\n            ...
    - if (kwargs.get("protocol")) and \\n                (kwargs["protocol"].lower() in SCHEME_PORT_MAP) and \\n                (SCHEME_PORT_MAP[kwargs["protocol"].lower()] == kwargs["port"]):\n            ...
    - Q(port__exact=SCHEME_PORT_MAP[kwargs["protocol"].lower()])
    - if (kwargs.get("protocol")) and (kwargs["protocol"].lower() in SCHEME_PORT_MAP):\n            qs = qs.filter(Q(port__isnull=True) | Q(port__exact=SCHEME_PORT_MAP[kwargs["protocol"].lower()]))\n        else:\n            qs = qs.filter(port__isnull=True)
    - Q(port__exact=SCHEME_PORT_MAP[kwargs["protocol"].lower()])
    - Endpoint(\n                        host=host["name"],\n                        port=service["port"],\n                        protocol=service["name"]\n                        if service["name"] in SC...
    - protocol = re.sub(r"[^A-Za-z0-9\-\+]+", "", protocol)\n                        if protocol == "www":\n                            protocol = "http"\n                        if protocol not in SCHEME_P...

warnings:
  warnings:
    - warnings.catch_warnings(action="ignore", category=ManagerInheritanceWarning)
    - warnings.catch_warnings(action="ignore", category=ManagerInheritanceWarning)
    - warnings.catch_warnings(action="ignore", category=ManagerInheritanceWarning)
    - warnings.catch_warnings(action="ignore", category=ManagerInheritanceWarning)
    - warnings.filterwarnings("ignore", message="polymorphic.base.ManagerInheritanceWarning.*")
    - warnings.filterwarnings("ignore", message="PolymorphicModelBase._default_manager.*")
    - warnings.filterwarnings("ignore", "The FORMS_URLFIELD_ASSUME_HTTPS transitional setting is deprecated.")
    - warnings.filterwarnings("ignore", message="executable_path has been deprecated, please pass in a Service object")
    - warnings.filterwarnings("ignore", message="use options instead of chrome_options")
    - warnings.filterwarnings("ignore", message="desired_capabilities has been deprecated, please pass in a Service object")
    - warnings.filterwarnings("ignore", message="It is deprecated to return a value that is not None from a test case")

math:
  math.sqrt:
    - sqrt(highest_day_count / pi)
    - sqrt(punch[2] / pi)
  math.pi:
    - sqrt(highest_day_count / pi)
    - sqrt(punch[2] / pi)
  math.ceil:
    - ceil((((r.years * 12) + r.months) * 4.33) + (r.days / 7))
  math:
    - math.ceil(severity / 2)

shlex:
  shlex:
    - shlex.split(clean_query)

cpe:
  cpe.CPE:
    - CPE(cpe_str)
    - CPE(id)
    - CPE(component_element.attrib["key"])
    - CPE(detected_cpe[0])
    - CPE(location["applicationCpe"])

selenium:
  selenium.webdriver.support.ui.WebDriverWait:
    - WebDriverWait(self.driver, 30)
    - WebDriverWait(driver, 1)
    - WebDriverWait(driver, 1)
    - WebDriverWait(driver, 1)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 5)
    - WebDriverWait(driver, 20)
    - WebDriverWait(driver, 20)
  selenium.webdriver.common.keys.Keys:
    - driver.find_element(By.ID, "id_cvssv3").send_keys(Keys.TAB, "This is just a Test Case Finding")
    - driver.find_element(By.ID, "id_name").send_keys(Keys.TAB, "Updated Desription: ")
    - driver.find_element(By.ID, "id_name").send_keys(Keys.TAB, "Running Test on product before approving and push to production.")
    - driver.find_element(By.ID, "id_cvssv3").send_keys(Keys.TAB, "This is just a Test Case Finding")
    - driver.find_element(By.NAME, "mitigation").send_keys(Keys.TAB, "How to mitigate this finding")
    - driver.find_element(By.NAME, "impact").send_keys(Keys.TAB, "This has a very critical effect on production")
    - driver.find_element(By.ID, "id_cvssv3").send_keys(Keys.TAB, "This is just a Test Case Finding2")
    - driver.find_element(By.NAME, "mitigation").send_keys(Keys.TAB, "How to mitigate this finding2")
    - driver.find_element(By.NAME, "impact").send_keys(Keys.TAB, "This has a very critical effect on production2")
    - driver.find_element(By.ID, "id_cvssv3_score").send_keys(Keys.TAB, Keys.TAB, "This is a promoted stub finding")
    - driver.find_element(By.ID, "id_cvssv3_score").send_keys(Keys.TAB, Keys.TAB, "This is a promoted stub finding")
  selenium.webdriver.ActionChains:
    - ActionChains(driver)
    - ActionChains(driver)
  selenium.webdriver.common.by.By:
    - driver.find_element(By.CSS_SELECTOR, ".dropdown-toggle.pull-left")
    - driver.find_element(By.LINK_TEXT, "Add New Engagement")
    - driver.find_element(By.ID, "id_name")
    - driver.find_element(By.NAME, "_Import Scan Results")
    - driver.find_element(By.NAME, "scan_type")
    - driver.find_element(By.CSS_SELECTOR, ".dropdown-toggle.pull-left")
    - driver.find_element(By.LINK_TEXT, "Add New Engagement")
    - driver.find_element(By.ID, "id_name")
    - driver.find_element(By.NAME, "_Import Scan Results")
    - driver.find_element(By.ID, "id_active")
    - driver.find_element(By.ID, "id_verified")
    - driver.find_element(By.ID, "id_scan_type")
    - driver.find_element(By.ID, "id_file")
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary")
    - driver.find_element(By.TAG_NAME, "BODY")
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-danger")
    - driver.find_element(By.ID, "id_message")
    - driver.find_element(By.ID, "id_style")
    - driver.find_element(By.ID, "id_dismissable")
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary")
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-danger")
    - driver.find_element(By.XPATH, "//div[contains(@class, 'announcement-banner')]/a/span[contains(text(), '×')]")
    - driver.find_element(By.XPATH, "//button[contains(@class, 'btn-danger') and contains(text(), 'Dismiss Announcement')]")
    - driver.find_element(By.XPATH, "//div[contains(@class, 'announcement-banner')]/a/span[contains(text(), '×')]")
    - driver.find_element(By.XPATH, "//button[contains(@class, 'btn-danger') and contains(text(), 'Dismiss Announcement')]")
    - driver.find_element(By.XPATH, "//input[contains(@id, 'id_message') and @disabled]")
    - driver.find_element(By.XPATH, "//select[contains(@id, 'id_style') and @disabled]")
    - driver.find_element(By.XPATH, "//input[contains(@id, 'id_dismissable') and @disabled]")
    - driver.find_element(By.XPATH, "//input[contains(@id, 'id_message') and contains(@value,'')]")
    - driver.find_element(By.XPATH, "//select[contains(@id, 'id_style')]/option[@selected and contains(text(), 'Info')]")
    - driver.find_element(By.XPATH, "//input[contains(@id, 'id_dismissable') and not(@checked)]")
    - driver.find_element(By.XPATH, "//div[contains(@class, 'announcement-banner')]/a[@href='https://github.com/DefectDojo/django-DefectDojo' and @style='color: #224477;' and @target='_blank']")
    - driver.find_element(By.ID, "id_username")
    - driver.find_element(By.ID, "id_username")
    - driver.find_element(By.ID, "id_password")
    - driver.find_element(By.ID, "id_password")
    - driver.find_element(By.CSS_SELECTOR, "button.btn.btn-success")
    - driver.find_element(By.ID, "id_username")
    - driver.find_element(By.ID, "id_username")
    - driver.find_element(By.ID, "id_password")
    - driver.find_element(By.ID, "id_password")
    - driver.find_element(By.CSS_SELECTOR, "button.btn.btn-success")
    - driver.find_elements(By.LINK_TEXT, name)
    - driver.find_elements(By.LINK_TEXT, name)
    - driver.find_element(By.ID, "id_delete")
    - EC.presence_of_element_located((By.ID, wrapper_id))
    - self.driver.find_elements(By.CSS_SELECTOR, selector)
    - self.driver.find_element(By.ID, id)
    - self.driver.find_element(By.TAG_NAME, "body")
    - self.driver.find_elements(By.ID, id)
    - driver.find_element(By.ID, id)
    - driver.find_element(By.ID, id)
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary")
    - driver.find_element(By.ID, id)
    - driver.find_element(By.ID, "id_block_execution")
    - driver.find_element(By.XPATH, '//*[@id="id_block_execution"]')
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary")
    - driver.find_element(By.ID, "id_block_execution")
    - driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary")
    - driver.find_elements(By.XPATH, '//*[@id="open_findings"]/tbody/tr')
    - row.find_elements(By.XPATH, ".//td")
    - driver.find_element(By.ID, "open_findings")
    - driver.find_element(By.ID, "id_enable_deduplication")
